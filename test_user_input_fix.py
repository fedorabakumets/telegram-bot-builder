"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ inline –∫–Ω–æ–ø–∫–æ–π, –≤–µ–¥—É—â–µ–π –∫ —É–∑–ª—É user-input
"""

import json
import requests

def create_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-node",
                "type": "start",
                "data": {
                    "messageText": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:",
                    "command": "/start",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-input",
                            "text": "üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                            "action": "goto",
                            "target": "input-node"
                        }
                    ]
                }
            },
            {
                "id": "input-node", 
                "type": "user-input",
                "data": {
                    "inputPrompt": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                    "inputType": "text",
                    "inputVariable": "user_name",
                    "minLength": 2,
                    "maxLength": 50,
                    "inputRequired": True,
                    "saveToDatabase": True,
                    "inputSuccessMessage": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
                    "inputRetryMessage": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è."
                }
            }
        ],
        "connections": [
            {
                "source": "start-node",
                "target": "input-node",
                "sourceHandle": "btn-input",
                "targetHandle": "input"
            }
        ]
    }
    
    return bot_data

def test_bot_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Python –∫–æ–¥–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    bot_data = create_test_bot()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç —á–µ—Ä–µ–∑ API
        response = requests.post('http://localhost:5000/api/projects', 
                               json={
                                   'name': '–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞',
                                   'description': '–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å user-input',
                                   'data': bot_data
                               })
        
        if response.status_code == 200:
            project = response.json()
            project_id = project['id']
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º Python –∫–æ–¥
            export_response = requests.get(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                python_code = export_response.json()['pythonCode']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                with open('test_user_input_bot_FIXED.py', 'w', encoding='utf-8') as f:
                    f.write(python_code)
                
                print("‚úÖ Python –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ test_user_input_bot_FIXED.py")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
                checks = [
                    ('generateUserInputHandler –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥', 'def start_handler' in python_code and 'waiting_for_input' not in python_code.split('def start_handler')[1].split('def ')[0]),
                    ('–ï—Å—Ç—å callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–∫–∏', 'handle_callback_input_node' in python_code),
                    ('Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞', '"waiting_for_input"' in python_code),
                    ('–ï—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞', 'handle_user_input' in python_code),
                    ('–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'min_length' in python_code and 'max_length' in python_code),
                    ('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ', 'save_to_database' in python_code)
                ]
                
                print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
                all_passed = True
                for check_name, condition in checks:
                    status = "‚úÖ" if condition else "‚ùå"
                    print(f"{status} {check_name}")
                    if not condition:
                        all_passed = False
                
                if all_passed:
                    print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò! –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
                else:
                    print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
                    
                return project_id
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.text}")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º...")
    test_bot_generation()