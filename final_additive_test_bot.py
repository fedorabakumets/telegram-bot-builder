"""
üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç: –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
"""

import os
import sys
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardRemove
import asyncpg
import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ —Ç–æ–∫–µ–Ω–∞)
bot = Bot(token="YOUR_BOT_TOKEN", default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
async def init_database():
    pass

async def update_user_data_in_db(user_id: int, variable: str, data):
    return True

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(lambda message: message.text and message.text.lower() == "/start")
async def start_handler(message: types.Message):
    text = """üéØ <b>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏</b>

–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:

üîπ <b>–ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ</b> - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞
üîπ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã</b> - –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
üîπ <b>–ù–∏–∫–∞–∫–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è</b> - –æ–¥–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–≤–æ—ë!"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìä –ú–µ–Ω—é", callback_data="menu"))
    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["input_collection_enabled"] = True
    user_data[message.from_user.id]["input_node_id"] = "start-1"
    user_data[message.from_user.id]["input_variable"] = "start_response"

@dp.callback_query(F.data == "menu")
async def handle_callback_menu(callback_query: types.CallbackQuery):
    text = """üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>
    
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è!

<i>–≠—Ç–æ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–æ–≤</i>"""
    
    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéÆ –ò–≥—Ä—ã"))
    builder.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    builder.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è"))
    
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.delete()
    except:
        pass
        
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})
    user_data[callback_query.from_user.id]["input_collection_enabled"] = True
    user_data[callback_query.from_user.id]["input_node_id"] = "menu-1"
    user_data[callback_query.from_user.id]["input_variable"] = "menu_response"

@dp.callback_query(F.data == "info")
async def handle_callback_info(callback_query: types.CallbackQuery):
    text = """‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ</b>
    
<b>–ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:</b>
‚úÖ –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
‚úÖ –ù–∏–∫–∞–∫–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –ù–∞–∂–∏–º–∞–µ—Ç–µ –∫–Ω–æ–ø–∫—É ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–∫—Ä–∞–Ω—É + –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
‚Ä¢ –ü–∏—à–µ—Ç–µ —Ç–µ–∫—Å—Ç ‚Üí —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
‚Ä¢ –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

<i>–≠—Ç–æ –∏ –µ—Å—Ç—å –∞–¥–¥–∏—Ç–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞!</i>"""

    await callback_query.message.edit_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ reply –∫–Ω–æ–ø–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å–±–æ—Ä–æ–º –æ—Ç–≤–µ—Ç–æ–≤
@dp.message(lambda message: message.text == "üéÆ –ò–≥—Ä—ã")
async def handle_reply_games(message: types.Message):
    text = """üéÆ <b>–†–∞–∑–¥–µ–ª –∏–≥—Ä</b>
    
–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ –æ–± –∏–≥—Ä–∞—Ö!

<i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ + –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç</i>"""
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéØ –ö–≤–∏–∑"))
    builder.add(KeyboardButton(text="üé≤ –ö—É–±–∏–∫–∏"))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):
        timestamp = datetime.datetime.now().isoformat()
        input_node_id = user_data[user_id].get("input_node_id")
        input_variable = user_data[user_id].get("input_variable", "button_response")
        
        response_data = {
            "value": "üéÆ –ò–≥—Ä—ã",
            "type": "reply_button",
            "timestamp": timestamp,
            "nodeId": input_node_id,
            "variable": input_variable,
            "source": "reply_button_click"
        }
        
        user_data[user_id][f"{input_variable}_button"] = response_data
        logging.info(f"Reply –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {input_variable}_button = üéÆ –ò–≥—Ä—ã (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    user_data[message.from_user.id]["input_collection_enabled"] = True
    user_data[message.from_user.id]["input_node_id"] = "games-1"
    user_data[message.from_user.id]["input_variable"] = "games_response"

@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_reply_settings(message: types.Message):
    text = """‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>
    
–ó–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å!

<i>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</i>"""
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):
        timestamp = datetime.datetime.now().isoformat()
        input_node_id = user_data[user_id].get("input_node_id")
        input_variable = user_data[user_id].get("input_variable", "button_response")
        
        response_data = {
            "value": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            "type": "reply_button",
            "timestamp": timestamp,
            "nodeId": input_node_id,
            "variable": input_variable,
            "source": "reply_button_click"
        }
        
        user_data[user_id][f"{input_variable}_button"] = response_data
        logging.info(f"Reply –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {input_variable}_button = ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")

@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–∞—è")
async def handle_reply_home(message: types.Message):
    text = """üè† <b>–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é</b>
    
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É..."""
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):
        timestamp = datetime.datetime.now().isoformat()
        input_node_id = user_data[user_id].get("input_node_id")
        input_variable = user_data[user_id].get("input_variable", "button_response")
        
        response_data = {
            "value": "üè† –ì–ª–∞–≤–Ω–∞—è",
            "type": "reply_button",
            "timestamp": timestamp,
            "nodeId": input_node_id,
            "variable": input_variable,
            "source": "reply_button_click"
        }
        
        user_data[user_id][f"{input_variable}_button"] = response_data
        logging.info(f"Reply –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {input_variable}_button = üè† –ì–ª–∞–≤–Ω–∞—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    await start_handler(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
@dp.message(lambda message: message.text and message.text.lower() == "/stats")
async def stats_handler(message: types.Message):
    user_id = message.from_user.id
    
    if user_id not in user_data:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–Ω–∞—á–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!")
        return
    
    stats_text = "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    for key, value in user_data[user_id].items():
        if key not in ["input_collection_enabled", "input_node_id", "input_variable"]:
            if isinstance(value, dict):
                stats_text += f"üîπ <b>{key}:</b> {value.get('value', 'N/A')} ({value.get('type', 'unknown')})\n"
            else:
                stats_text += f"üîπ <b>{key}:</b> {value}\n"
    
    if len(stats_text) <= 50:  # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ
        stats_text += "\n<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö!</i>"
    
    await message.answer(stats_text)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å –Ω–æ–≤–æ–π –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
@dp.message(F.text)
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):
        input_node_id = user_data[user_id].get("input_node_id")
        input_variable = user_data[user_id].get("input_variable", "button_response")
        user_text = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        timestamp = datetime.datetime.now().isoformat()
        
        response_data = {
            "value": user_text,
            "type": "text_addition", 
            "timestamp": timestamp,
            "nodeId": input_node_id,
            "variable": input_variable,
            "source": "additional_text_input"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id][f"{input_variable}_additional"] = response_data
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –µ—â—ë –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.</i>")
        
        logging.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: {input_variable}_additional = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("ü§î –Ø –ø–æ–∫–∞ –Ω–µ –∂–¥—É –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞!")
    return

async def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞...")
    logging.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    logging.info("   /start - –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
    logging.info("   /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    logging.info("‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç + –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ —Ç—É—Ç –±—ã–ª –±—ã dp.start_polling(bot)
    print("üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    print("üí° –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())