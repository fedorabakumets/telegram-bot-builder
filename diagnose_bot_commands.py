"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ Telegram –±–æ—Ç–∞
"""

import re
import requests

def check_bot_code_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –±–æ—Ç–∞"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ú–ê–ù–î TELEGRAM –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        with open("generated_advanced_bot.py", "r", encoding="utf-8") as f:
            code = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª generated_advanced_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ test_advanced_complex_bot.py")
        return
    
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í:")
    imports_found = []
    import_lines = [
        "from aiogram import Bot, Dispatcher, types, F",
        "from aiogram.filters import CommandStart, Command",
        "from aiogram.types import ReplyKeyboardMarkup, KeyboardButton"
    ]
    
    for imp in import_lines:
        if imp in code:
            imports_found.append(f"‚úÖ {imp}")
        else:
            imports_found.append(f"‚ùå {imp}")
    
    for imp in imports_found:
        print(f"   {imp}")
    
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –ö–û–ú–ê–ù–î:")
    
    # –ò—â–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    command_patterns = [
        (r'@dp\.message\(CommandStart\(\)\)', "CommandStart"),
        (r'@dp\.message\(Command\("(\w+)"\)\)', "Command")
    ]
    
    start_handlers = re.findall(command_patterns[0][0], code)
    command_handlers = re.findall(command_patterns[1][0], code)
    
    print(f"   ‚úÖ CommandStart –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(start_handlers)}")
    print(f"   ‚úÖ Command –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(command_handlers)}")
    
    if command_handlers:
        print(f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(command_handlers)}")
    
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    
    # –ò—â–µ–º async def —Ñ—É–Ω–∫—Ü–∏–∏
    handler_functions = re.findall(r'async def (\w+_handler)', code)
    print(f"   ‚úÖ Async —Ñ—É–Ω–∫—Ü–∏–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handler_functions)}")
    
    for i, handler in enumerate(handler_functions[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"      {i:2d}. {handler}")
    
    if len(handler_functions) > 10:
        print(f"      ... –∏ –µ—â–µ {len(handler_functions) - 10}")
    
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê MAIN –§–£–ù–ö–¶–ò–ò:")
    
    if "async def main():" in code:
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏—è main() –Ω–∞–π–¥–µ–Ω–∞")
        
        if "dp.start_polling(bot)" in code:
            print("   ‚úÖ Polling –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("   ‚ùå Polling –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            
        if "asyncio.run(main())" in code:
            print("   ‚úÖ –ó–∞–ø—É—Å–∫ asyncio.run(main()) –Ω–∞–π–¥–µ–Ω")
        else:
            print("   ‚ùå –ó–∞–ø—É—Å–∫ asyncio.run(main()) –ù–ï –Ω–∞–π–¥–µ–Ω!")
    else:
        print("   ‚ùå –§—É–Ω–∫—Ü–∏—è main() –ù–ï –Ω–∞–π–¥–µ–Ω–∞!")
    
    print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê:")
    
    if 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"' in code:
        print("   ‚ö†Ô∏è –¢–æ–∫–µ–Ω –ù–ï –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!")
        print("   üìù –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    else:
        print("   ‚úÖ –¢–æ–∫–µ–Ω –∑–∞–º–µ–Ω–µ–Ω")
    
    print("\n6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    
    callback_handlers = re.findall(r'@dp\.callback_query', code)
    print(f"   ‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(callback_handlers)}")
    
    print("\n7Ô∏è‚É£ –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ò –†–ï–®–ï–ù–ò–Ø:")
    
    problems = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"' in code:
        problems.append({
            "problem": "–ù–µ –∑–∞–º–µ–Ω–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞",
            "solution": "–ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather"
        })
    
    if "dp.start_polling(bot)" not in code:
        problems.append({
            "problem": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—É—Å–∫ polling",
            "solution": "–î–æ–±–∞–≤—å—Ç–µ await dp.start_polling(bot) –≤ main —Ñ—É–Ω–∫—Ü–∏—é"
        })
    
    if len(command_handlers) == 0:
        problems.append({
            "problem": "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–¥–µ",
            "solution": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"
        })
    
    if not problems:
        print("   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã!")
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò:")
        print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É") 
        print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        print("   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ (–º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)")
        print("   5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞")
    else:
        for i, prob in enumerate(problems, 1):
            print(f"   ‚ùå {i}. {prob['problem']}")
            print(f"      üí° {prob['solution']}")
    
    return {
        "imports_ok": all("‚úÖ" in imp for imp in imports_found),
        "handlers_count": len(handler_functions),
        "commands_count": len(command_handlers),
        "has_main": "async def main():" in code,
        "has_polling": "dp.start_polling(bot)" in code,
        "token_replaced": 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"' not in code,
        "problems": problems
    }

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ API"""
    
    print("\nüóÇÔ∏è –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê:")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        response = requests.get('http://localhost:5000/api/projects')
        if response.status_code == 200:
            projects = response.json()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}")
            
            for project in projects:
                print(f"   üìã {project['id']}: {project['name']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞
                data = project.get('data', {})
                nodes = data.get('nodes', [])
                connections = data.get('connections', [])
                
                command_nodes = [n for n in nodes if n.get('type') in ['start', 'command']]
                
                print(f"      ‚Ä¢ –£–∑–ª–æ–≤: {len(nodes)}")
                print(f"      ‚Ä¢ –°–≤—è–∑–µ–π: {len(connections)}")
                print(f"      ‚Ä¢ –ö–æ–º–∞–Ω–¥: {len(command_nodes)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                for node in command_nodes:
                    cmd = node.get('data', {}).get('command', 'no_command')
                    print(f"         - {cmd}")
                print()
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")

def create_minimal_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("\nüß™ –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢-–ë–û–¢–ê:")
    
    minimal_bot = '''"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-–±–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command

# –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer("üöÄ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@dp.message(Command("test"))
async def test_handler(message: types.Message):
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer("‚ùì –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç-–±–æ—Ç–∞...")
    print("üìù –ù–ï –ó–ê–ë–£–î–¨–¢–ï –ó–ê–ú–ï–ù–ò–¢–¨ –¢–û–ö–ï–ù!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open("minimal_test_bot.py", "w", encoding="utf-8") as f:
        f.write(minimal_bot)
    
    print("   ‚úÖ –°–æ–∑–¥–∞–Ω minimal_test_bot.py")
    print("   üìù –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python minimal_test_bot.py")
    print("   üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: /start, /test, /help")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    result = check_bot_code_structure()
    check_project_structure()
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    
    if result["token_replaced"] and result["has_main"] and result["has_polling"]:
        print("‚úÖ –ö–æ–¥ –±–æ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é") 
        print("   ‚Ä¢ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("   ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—Å–∞–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ!")
        if result["problems"]:
            print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    
    create_minimal_test_bot()
    
    print("\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ minimal_test_bot.py")
    print("3. –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ")
    print("4. –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–∫–µ–Ω–µ/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")

if __name__ == "__main__":
    main()