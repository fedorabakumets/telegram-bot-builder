{"code":"\"\"\"\nМой первый бот - Telegram Bot\nСгенерировано с помощью TelegramBot Builder\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.filters import CommandStart, Command\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile\nfrom aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\nfrom aiogram.enums import ParseMode\nfrom typing import Optional\nimport asyncpg\nfrom datetime import datetime, timezone, timedelta\nimport json\n\n# Функция для получения московского времени\ndef get_moscow_time():\n    \"\"\"Возвращает текущее время в московском часовом поясе\"\"\"\n    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 для Москвы\n    return datetime.now(moscow_tz).isoformat()\n\n# Токен вашего бота (получите у @BotFather)\nBOT_TOKEN = \"YOUR_BOT_TOKEN_HERE\"\n\n# Настройка логирования\nlogging.basicConfig(level=logging.INFO)\n\n# Создание бота и диспетчера\nbot = Bot(token=BOT_TOKEN)\ndp = Dispatcher()\n\n# Список администраторов (добавьте свой Telegram ID)\nADMIN_IDS = [123456789]  # Замените на реальные ID администраторов\n\n# Настройки базы данных\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Пул соединений с базой данных\ndb_pool = None\n\n# Хранилище пользователей (резервное для случаев без БД)\nuser_data = {}\n\n\n# Функции для работы с базой данных\nasync def init_database():\n    \"\"\"Инициализация подключения к базе данных и создание таблиц\"\"\"\n    global db_pool\n    try:\n        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)\n        # Создаем таблицу пользователей если её нет\n        async with db_pool.acquire() as conn:\n            await conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS bot_users (\n                    user_id BIGINT PRIMARY KEY,\n                    username TEXT,\n                    first_name TEXT,\n                    last_name TEXT,\n                    registered_at TIMESTAMP DEFAULT NOW(),\n                    last_interaction TIMESTAMP DEFAULT NOW(),\n                    interaction_count INTEGER DEFAULT 0,\n                    user_data JSONB DEFAULT '{}',\n                    is_active BOOLEAN DEFAULT TRUE\n                );\n            \"\"\")\n        logging.info(\"✅ База данных инициализирована\")\n    except Exception as e:\n        logging.warning(f\"⚠️ Не удалось подключиться к БД: {e}. Используем локальное хранилище.\")\n        db_pool = None\n\nasync def save_user_to_db(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None):\n    \"\"\"Сохраняет пользователя в базу данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        async with db_pool.acquire() as conn:\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id, username, first_name, last_name)\n                VALUES ($1, $2, $3, $4)\n                ON CONFLICT (user_id) DO UPDATE SET\n                    username = EXCLUDED.username,\n                    first_name = EXCLUDED.first_name,\n                    last_name = EXCLUDED.last_name,\n                    last_interaction = NOW(),\n                    interaction_count = bot_users.interaction_count + 1\n            \"\"\", user_id, username, first_name, last_name)\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка сохранения пользователя в БД: {e}\")\n        return False\n\nasync def get_user_from_db(user_id: int):\n    \"\"\"Получает данные пользователя из базы данных\"\"\"\n    if not db_pool:\n        return None\n    try:\n        async with db_pool.acquire() as conn:\n            row = await conn.fetchrow(\"SELECT * FROM bot_users WHERE user_id = $1\", user_id)\n            if row:\n                return dict(row)\n        return None\n    except Exception as e:\n        logging.error(f\"Ошибка получения пользователя из БД: {e}\")\n        return None\n\nasync def update_user_data_in_db(user_id: int, data_key: str, data_value):\n    \"\"\"Обновляет пользовательские данные в базе данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        import json\n        async with db_pool.acquire() as conn:\n            # Сначала создаём или получаем существующую запись\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id) \n                VALUES ($1) \n                ON CONFLICT (user_id) DO NOTHING\n            \"\"\", user_id)\n            \n            # Обновляем данные пользователя\n            update_data = {data_key: data_value}\n            await conn.execute(\"\"\"\n                UPDATE bot_users \n                SET user_data = COALESCE(user_data, '{}'::jsonb) || $2::jsonb,\n                    last_interaction = NOW()\n                WHERE user_id = $1\n            \"\"\", user_id, json.dumps(update_data))\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка обновления данных пользователя: {e}\")\n        return False\n\nasync def save_user_data_to_db(user_id: int, data_key: str, data_value):\n    \"\"\"Алиас для update_user_data_in_db для обратной совместимости\"\"\"\n    return await update_user_data_in_db(user_id, data_key, data_value)\n\nasync def update_user_variable_in_db(user_id: int, variable_name: str, variable_value: str):\n    \"\"\"Сохраняет переменную пользователя в базу данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        import json\n        async with db_pool.acquire() as conn:\n            # Сначала создаём или получаем существующую запись\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id) \n                VALUES ($1) \n                ON CONFLICT (user_id) DO NOTHING\n            \"\"\", user_id)\n            \n            # Обновляем переменную пользователя\n            update_data = {variable_name: variable_value}\n            await conn.execute(\"\"\"\n                UPDATE bot_users \n                SET user_data = COALESCE(user_data, '{}'::jsonb) || $2::jsonb,\n                    last_interaction = NOW()\n                WHERE user_id = $1\n            \"\"\", user_id, json.dumps(update_data))\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка сохранения переменной пользователя: {e}\")\n        return False\n\n\n# Утилитарные функции\nasync def is_admin(user_id: int) -> bool:\n    return user_id in ADMIN_IDS\n\nasync def is_private_chat(message: types.Message) -> bool:\n    return message.chat.type == \"private\"\n\nasync def check_auth(user_id: int) -> bool:\n    # Проверяем наличие пользователя в БД или локальном хранилище\n    if db_pool:\n        user = await get_user_from_db(user_id)\n        return user is not None\n    return user_id in user_data\n\ndef is_local_file(url: str) -> bool:\n    \"\"\"Проверяет, является ли URL локальным загруженным файлом\"\"\"\n    return url.startswith(\"/uploads/\") or url.startswith(\"uploads/\")\n\ndef get_local_file_path(url: str) -> str:\n    \"\"\"Получает локальный путь к файлу из URL\"\"\"\n    if url.startswith(\"/\"):\n        return url[1:]  # Убираем ведущий слеш\n    return url\n\ndef extract_coordinates_from_yandex(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки Яндекс.Карт\"\"\"\n    import re\n    # Ищем координаты в формате ll=longitude,latitude\n    match = re.search(r\"ll=([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    # Ищем координаты в формате /longitude,latitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    return None, None\n\ndef extract_coordinates_from_google(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки Google Maps\"\"\"\n    import re\n    # Ищем координаты в формате @latitude,longitude\n    match = re.search(r\"@([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(1)), float(match.group(2))  # lat, lon\n    # Ищем координаты в формате /latitude,longitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(1)), float(match.group(2))  # lat, lon\n    return None, None\n\ndef extract_coordinates_from_2gis(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки 2ГИС\"\"\"\n    import re\n    # Ищем координаты в различных форматах 2ГИС\n    # Формат: center/longitude,latitude\n    match = re.search(r\"center/([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    # Формат: /longitude,latitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    return None, None\n\ndef generate_map_urls(latitude: float, longitude: float, title: str = \"\") -> dict:\n    \"\"\"Генерирует ссылки на различные картографические сервисы\"\"\"\n    import urllib.parse\n    \n    encoded_title = urllib.parse.quote(title) if title else \"\"\n    \n    return {\n        \"yandex\": f\"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15&l=map&pt={longitude},{latitude}\",\n        \"google\": f\"https://maps.google.com/?q={latitude},{longitude}\",\n        \"2gis\": f\"https://2gis.ru/geo/{longitude},{latitude}\",\n        \"openstreetmap\": f\"https://www.openstreetmap.org/?mlat={latitude}&mlon={longitude}&zoom=15\"\n    }\n\n\n@dp.message(CommandStart())\nasync def start_handler(message: types.Message):\n\n    # Регистрируем пользователя в системе\n    user_id = message.from_user.id\n    username = message.from_user.username\n    first_name = message.from_user.first_name\n    last_name = message.from_user.last_name\n    \n    # Сохраняем пользователя в базу данных\n    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)\n    \n    # Резервное сохранение в локальное хранилище\n    if not saved_to_db:\n        user_data[user_id] = {\n            \"username\": username,\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"registered_at\": message.date\n        }\n        logging.info(f\"Пользователь {user_id} сохранен в локальное хранилище\")\n    else:\n        logging.info(f\"Пользователь {user_id} сохранен в базу данных\")\n\n    text = \"\"\"👋 Добро пожаловать!\n\nРасскажите нам о ваших интересах. Выберите все, что вам подходит:\"\"\"\n    # Определяем режим форматирования (приоритет у условного сообщения)\n    if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n        current_parse_mode = conditional_parse_mode\n    else:\n        current_parse_mode = None\n    # Инициализируем переменную для проверки условной клавиатуры\n    use_conditional_keyboard = False\n    conditional_keyboard = None\n    \n    # Проверяем, нужно ли использовать условную клавиатуру\n    if use_conditional_keyboard:\n        await message.answer(text, reply_markup=conditional_keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n    else:\n        # Создаем inline клавиатуру с поддержкой множественного выбора\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"⚽ Спорт\", callback_data=f\"multi_select_start_btn-sport\"))\n        builder.add(InlineKeyboardButton(text=\"🎵 Музыка\", callback_data=f\"multi_select_start_btn-music\"))\n        builder.add(InlineKeyboardButton(text=\"📚 Книги\", callback_data=f\"multi_select_start_btn-books\"))\n        builder.add(InlineKeyboardButton(text=\"✈️ Путешествия\", callback_data=f\"multi_select_start_btn-travel\"))\n        builder.add(InlineKeyboardButton(text=\"💻 Технологии\", callback_data=f\"multi_select_start_btn-tech\"))\n        builder.add(InlineKeyboardButton(text=\"🍳 Кулинария\", callback_data=f\"multi_select_start_btn-cooking\"))\n        builder.add(InlineKeyboardButton(text=\"🎨 Искусство\", callback_data=f\"multi_select_start_btn-art\"))\n        builder.add(InlineKeyboardButton(text=\"🎮 Игры\", callback_data=f\"multi_select_start_btn-games\"))\n        builder.add(InlineKeyboardButton(text=\"Готово\", callback_data=f\"multi_select_done_start\"))\n        builder.adjust(2)\n        keyboard = builder.as_markup()\n        await message.answer(text, reply_markup=keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n        \n        # Инициализируем состояние множественного выбора\n        user_data[message.from_user.id] = user_data.get(message.from_user.id, {})\n        user_data[message.from_user.id][\"multi_select_start\"] = []\n        user_data[message.from_user.id][\"multi_select_node\"] = \"start\"\n\n# Обработчики inline кнопок\n\n@dp.callback_query(lambda c: c.data == \"final_message\" or c.data.startswith(\"final_message_btn_\"))\nasync def handle_callback_final_message(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"👍 Продолжить\"\n    \n    # Сохраняем кнопку в базу данных\n    timestamp = get_moscow_time()\n    response_data = button_text  # Простое значение\n    await update_user_data_in_db(user_id, button_text, response_data)\n    logging.info(f\"Кнопка сохранена: {button_text} (пользователь {user_id})\")\n    \n    # Отправляем сообщение для узла final_message\n    text = \"\"\"✅ Отлично! Ваши предпочтения сохранены.\n\nТеперь вы будете получать персонализированные рекомендации на основе ваших интересов.\"\"\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Без условных сообщений - используем обычную клавиатуру\n    keyboard = None\n    # Проверяем, есть ли условная клавиатура\n    if keyboard is None:\n        # Создаем inline клавиатуру для целевого узла\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"start_btn_0\"))\n        keyboard = builder.as_markup()\n    # Отправляем сообщение\n    try:\n        if keyboard is not None:\n            await callback_query.message.edit_text(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.edit_text(text)\n    except Exception:\n        if keyboard is not None:\n            await callback_query.message.answer(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.answer(text)\n\n@dp.callback_query(lambda c: c.data == \"start\" or c.data.startswith(\"start_btn_\"))\nasync def handle_callback_start(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"✏️ Изменить выбор\"\n    \n    # Сохраняем кнопку в базу данных\n    timestamp = get_moscow_time()\n    response_data = button_text\n    await update_user_data_in_db(user_id, button_text, response_data)\n    logging.info(f\"Кнопка сохранена: {button_text} (пользователь {user_id})\")\n    \n    # Отправляем сообщение с кнопками интересов\n    text = \"\"\"👋 Добро пожаловать!\\n\\nРасскажите нам о ваших интересах. Выберите все, что вам подходит:\"\"\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Загружаем ранее выбранные интересы из базы данных\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    \n    # Получаем сохраненные интересы из базы данных\n    saved_interests = []\n    if user_vars and \"user_interests\" in user_vars:\n        interests_value = user_vars[\"user_interests\"]\n        if isinstance(interests_value, dict) and \"value\" in interests_value:\n            interests_str = interests_value[\"value\"]\n        elif isinstance(interests_value, str):\n            interests_str = interests_value\n        else:\n            interests_str = str(interests_value) if interests_value else \"\"\n        \n        if interests_str:\n            saved_interests = [interest.strip() for interest in interests_str.split(\",\")]\n    \n    # Инициализируем состояние множественного выбора с сохраненными интересами\n    user_data[user_id][\"multi_select_start\"] = saved_interests.copy()\n    user_data[user_id][\"multi_select_node\"] = \"start\"\n    \n    # Создаем inline клавиатуру с кнопками интересов и галочками для выбранных\n    builder = InlineKeyboardBuilder()\n    selected_mark = \"✅ \" if \"⚽ Спорт\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}⚽ Спорт\", callback_data=\"multi_select_start_btn-sport\"))\n    selected_mark = \"✅ \" if \"🎵 Музыка\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎵 Музыка\", callback_data=\"multi_select_start_btn-music\"))\n    selected_mark = \"✅ \" if \"📚 Книги\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}📚 Книги\", callback_data=\"multi_select_start_btn-books\"))\n    selected_mark = \"✅ \" if \"✈️ Путешествия\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}✈️ Путешествия\", callback_data=\"multi_select_start_btn-travel\"))\n    selected_mark = \"✅ \" if \"💻 Технологии\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}💻 Технологии\", callback_data=\"multi_select_start_btn-tech\"))\n    selected_mark = \"✅ \" if \"🍳 Кулинария\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}🍳 Кулинария\", callback_data=\"multi_select_start_btn-cooking\"))\n    selected_mark = \"✅ \" if \"🎨 Искусство\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎨 Искусство\", callback_data=\"multi_select_start_btn-art\"))\n    selected_mark = \"✅ \" if \"🎮 Игры\" in saved_interests else \"\"\n    builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎮 Игры\", callback_data=\"multi_select_start_btn-games\"))\n    builder.add(InlineKeyboardButton(text=\"Готово\", callback_data=\"multi_select_done_start\"))\n    builder.adjust(2)  # Размещаем кнопки в 2 колонки\n    keyboard = builder.as_markup()\n    \n    # Отправляем сообщение с кнопками интересов\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception:\n        await callback_query.message.answer(text, reply_markup=keyboard)\n    return\n    \n    user_id = callback_query.from_user.id\n    button_text = \"✏️ Изменить выбор\"\n    \n    # Сохраняем кнопку в базу данных\n    timestamp = get_moscow_time()\n    response_data = button_text  # Простое значение\n    await update_user_data_in_db(user_id, button_text, response_data)\n    logging.info(f\"Кнопка сохранена: {button_text} (пользователь {user_id})\")\n    \n    # Обрабатываем узел start: start\n    text = \"\"\"👋 Добро пожаловать!\n\nРасскажите нам о ваших интересах. Выберите все, что вам подходит:\"\"\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Без условных сообщений - используем обычную клавиатуру\n    keyboard = None\n    # Проверяем, есть ли условная клавиатура\n    if keyboard is None:\n        # Создаем inline клавиатуру для start узла\n        builder = InlineKeyboardBuilder()\n        keyboard = builder.as_markup()\n    # Отправляем сообщение start узла\n    try:\n        if keyboard is not None:\n            await callback_query.message.edit_text(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.edit_text(text)\n    except Exception:\n        if keyboard is not None:\n            await callback_query.message.answer(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.answer(text)\n\n@dp.callback_query(lambda c: c.data == \"start\" or c.data.startswith(\"start_btn_\"))\nasync def handle_callback_start(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"🔄 Начать заново\"\n    \n    # Сохраняем кнопку в базу данных\n    timestamp = get_moscow_time()\n    response_data = button_text  # Простое значение\n    await update_user_data_in_db(user_id, button_text, response_data)\n    logging.info(f\"Кнопка сохранена: {button_text} (пользователь {user_id})\")\n    \n    # Обрабатываем узел start: start\n    text = \"\"\"👋 Добро пожаловать!\n\nРасскажите нам о ваших интересах. Выберите все, что вам подходит:\"\"\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Без условных сообщений - используем обычную клавиатуру\n    keyboard = None\n    # Проверяем, есть ли условная клавиатура\n    if keyboard is None:\n        # Создаем inline клавиатуру для start узла\n        builder = InlineKeyboardBuilder()\n        keyboard = builder.as_markup()\n    # Отправляем сообщение start узла\n    try:\n        if keyboard is not None:\n            await callback_query.message.edit_text(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.edit_text(text)\n    except Exception:\n        if keyboard is not None:\n            await callback_query.message.answer(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.answer(text)\n\n@dp.callback_query(lambda c: c.data == \"interests_result\" or c.data.startswith(\"interests_result_btn_\"))\nasync def handle_callback_interests_result(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Handle interests_result node\n    user_id = callback_query.from_user.id\n    text = \"\"\"🎯 Ваши интересы:\n\n{user_interests}\n\nСпасибо за информацию! Теперь мы сможем предложить вам более подходящий контент.\"\"\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    # Create inline keyboard\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"👍 Продолжить\", callback_data=\"final_message_btn_0\"))\n    builder.add(InlineKeyboardButton(text=\"✏️ Изменить выбор\", callback_data=\"start_btn_1\"))\n    keyboard = builder.as_markup()\n    await bot.send_message(user_id, text, reply_markup=keyboard)\n\n\n\n# Универсальный обработчик пользовательского ввода\n@dp.message(F.text)\nasync def handle_user_input(message: types.Message):\n    user_id = message.from_user.id\n    \n    # Проверяем, ожидаем ли мы ввод для условного сообщения\n    if user_id in user_data and \"waiting_for_conditional_input\" in user_data[user_id]:\n        config = user_data[user_id][\"waiting_for_conditional_input\"]\n        user_text = message.text\n        \n        # Сохраняем текстовый ввод для условного сообщения\n        condition_id = config.get(\"condition_id\", \"unknown\")\n        next_node_id = config.get(\"next_node_id\")\n        \n        # Сохраняем ответ пользователя\n        timestamp = get_moscow_time()\n        # Используем переменную из конфигурации или создаем автоматическую\n        input_variable = config.get(\"input_variable\", \"\")\n        if input_variable:\n            variable_name = input_variable\n        else:\n            variable_name = f\"conditional_response_{condition_id}\"\n        \n        # Сохраняем в пользовательские данные\n        user_data[user_id][variable_name] = user_text\n        \n        # Сохраняем в базу данных\n        saved_to_db = await update_user_data_in_db(user_id, variable_name, user_text)\n        if saved_to_db:\n            logging.info(f\"✅ Условный ответ сохранен в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n        else:\n            logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n        \n        # Отправляем подтверждение\n        await message.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n        \n        # Очищаем состояние ожидания\n        del user_data[user_id][\"waiting_for_conditional_input\"]\n        \n        logging.info(f\"Получен ответ на условное сообщение: {variable_name} = {user_text}\")\n        \n        # Переходим к следующему узлу если указан\n        if next_node_id:\n            try:\n                logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n                \n                # Проверяем, является ли это командой\n                if next_node_id == \"profile_command\":\n                    logging.info(\"Переход к команде /profile\")\n                    await profile_handler(message)\n                else:\n                    # Создаем фиктивный callback для навигации к обычному узлу\n                    import types as aiogram_types\n                    fake_callback = aiogram_types.SimpleNamespace(\n                        id=\"conditional_nav\",\n                        from_user=message.from_user,\n                        chat_instance=\"\",\n                        data=next_node_id,\n                        message=message,\n                        answer=lambda text=\"\", show_alert=False: asyncio.sleep(0)\n                    )\n                    \n                    if next_node_id == \"start\":\n                        await handle_callback_start(fake_callback)\n                    elif next_node_id == \"interests_result\":\n                        await handle_callback_interests_result(fake_callback)\n                    elif next_node_id == \"final_message\":\n                        await handle_callback_final_message(fake_callback)\n                    else:\n                        logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n            except Exception as e:\n                logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n        \n        return  # Завершаем обработку для условного сообщения\n    \n    # Проверяем, ожидаем ли мы кнопочный ответ через reply клавиатуру\n    if user_id in user_data and \"button_response_config\" in user_data[user_id]:\n        config = user_data[user_id][\"button_response_config\"]\n        user_text = message.text\n        \n        # Ищем выбранный вариант среди доступных опций\n        selected_option = None\n        for option in config.get(\"options\", []):\n            if option[\"text\"] == user_text:\n                selected_option = option\n                break\n        \n        if selected_option:\n            selected_value = selected_option[\"value\"]\n            selected_text = selected_option[\"text\"]\n            \n            # Сохраняем ответ пользователя\n            variable_name = config.get(\"variable\", \"button_response\")\n            timestamp = get_moscow_time()\n            node_id = config.get(\"node_id\", \"unknown\")\n            \n            # Создаем структурированный ответ\n            response_data = {\n                \"value\": selected_value,\n                \"text\": selected_text,\n                \"type\": \"button_choice\",\n                \"timestamp\": timestamp,\n                \"nodeId\": node_id,\n                \"variable\": variable_name\n            }\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][variable_name] = response_data\n            \n            # Сохраняем в базу данных если включено\n            if config.get(\"save_to_database\"):\n                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n                if saved_to_db:\n                    logging.info(f\"✅ Кнопочный ответ сохранен в БД: {variable_name} = {selected_text} (пользователь {user_id})\")\n                else:\n                    logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            # Отправляем сообщение об успехе\n            success_message = config.get(\"success_message\", \"Спасибо за ваш выбор!\")\n            await message.answer(f\"{success_message}\\n\\n✅ Ваш выбор: {selected_text}\", reply_markup=ReplyKeyboardRemove())\n            \n            # Очищаем состояние\n            del user_data[user_id][\"button_response_config\"]\n            \n            logging.info(f\"Получен кнопочный ответ через reply клавиатуру: {variable_name} = {selected_text}\")\n            \n            # Навигация на основе действия кнопки\n            option_action = selected_option.get(\"action\", \"goto\")\n            option_target = selected_option.get(\"target\", \"\")\n            option_url = selected_option.get(\"url\", \"\")\n            \n            if option_action == \"url\" and option_url:\n                # Открытие ссылки\n                url = option_url\n                keyboard = InlineKeyboardMarkup(inline_keyboard=[\n                    [InlineKeyboardButton(text=\"🔗 Открыть ссылку\", url=url)]\n                ])\n                await message.answer(\"Нажмите кнопку ниже, чтобы открыть ссылку:\", reply_markup=keyboard)\n            elif option_action == \"command\" and option_target:\n                # Выполнение команды\n                command = option_target\n                # Создаем фиктивное сообщение для выполнения команды\n                import types as aiogram_types\n                fake_message = aiogram_types.SimpleNamespace(\n                    from_user=message.from_user,\n                    chat=message.chat,\n                    text=command,\n                    message_id=message.message_id\n                )\n                \n                if command == \"/start\":\n                    try:\n                        await start_handler(fake_message)\n                    except Exception as e:\n                        logging.error(f\"Ошибка выполнения команды /start: {e}\")\n                else:\n                    logging.warning(f\"Неизвестная команда: {command}\")\n            elif option_action == \"goto\" and option_target:\n                # Переход к узлу\n                target_node_id = option_target\n                try:\n                    # Вызываем обработчик для целевого узла\n                    if target_node_id == \"start\":\n                        await handle_callback_start(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"interests_result\":\n                        await handle_callback_interests_result(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"final_message\":\n                        await handle_callback_final_message(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    else:\n                        logging.warning(f\"Неизвестный целевой узел: {target_node_id}\")\n                except Exception as e:\n                    logging.error(f\"Ошибка при переходе к узлу {target_node_id}: {e}\")\n            else:\n                # Fallback к старой системе next_node_id если нет action\n                next_node_id = config.get(\"next_node_id\")\n                if next_node_id:\n                    try:\n                        # Вызываем обработчик для следующего узла\n                        if next_node_id == \"start\":\n                            await handle_callback_start(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"interests_result\":\n                            await handle_callback_interests_result(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"final_message\":\n                            await handle_callback_final_message(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        else:\n                            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n                    except Exception as e:\n                        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n            return\n        else:\n            # Неверный выбор - показываем доступные варианты\n            available_options = [option[\"text\"] for option in config.get(\"options\", [])]\n            options_text = \"\\n\".join([f\"• {opt}\" for opt in available_options])\n            await message.answer(f\"❌ Неверный выбор. Пожалуйста, выберите один из предложенных вариантов:\\n\\n{options_text}\")\n            return\n    \n    # Проверяем, ожидаем ли мы текстовый ввод от пользователя (универсальная система)\n    if user_id in user_data and \"waiting_for_input\" in user_data[user_id]:\n        # Обрабатываем ввод через универсальную систему\n        waiting_config = user_data[user_id][\"waiting_for_input\"]\n        \n        # Проверяем формат конфигурации - новый (словарь) или старый (строка)\n        if isinstance(waiting_config, dict):\n            # Новый формат - извлекаем данные из словаря\n            waiting_node_id = waiting_config.get(\"node_id\")\n            input_type = waiting_config.get(\"type\", \"text\")\n            variable_name = waiting_config.get(\"variable\", \"user_response\")\n            save_to_database = waiting_config.get(\"save_to_database\", False)\n            min_length = waiting_config.get(\"min_length\", 0)\n            max_length = waiting_config.get(\"max_length\", 0)\n            next_node_id = waiting_config.get(\"next_node_id\")\n        else:\n            # Старый формат - waiting_config это строка с node_id\n            waiting_node_id = waiting_config\n            input_type = user_data[user_id].get(\"input_type\", \"text\")\n            variable_name = user_data[user_id].get(\"input_variable\", \"user_response\")\n            save_to_database = user_data[user_id].get(\"save_to_database\", False)\n            min_length = 0\n            max_length = 0\n            next_node_id = user_data[user_id].get(\"input_target_node_id\")\n        \n        user_text = message.text\n        \n        # Валидация для нового формата\n        if isinstance(waiting_config, dict):\n            # Валидация длины\n            if min_length > 0 and len(user_text) < min_length:\n                retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                await message.answer(f\"❌ Слишком короткий ответ (минимум {min_length} символов). {retry_message}\")\n                return\n            \n            if max_length > 0 and len(user_text) > max_length:\n                retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                await message.answer(f\"❌ Слишком длинный ответ (максимум {max_length} символов). {retry_message}\")\n                return\n            \n            # Валидация типа ввода\n            if input_type == \"email\":\n                import re\n                email_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n                if not re.match(email_pattern, user_text):\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Неверный формат email. {retry_message}\")\n                    return\n            elif input_type == \"number\":\n                try:\n                    float(user_text)\n                except ValueError:\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Введите корректное число. {retry_message}\")\n                    return\n            elif input_type == \"phone\":\n                import re\n                phone_pattern = r\"^[+]?[0-9\\s\\-\\(\\)]{10,}$\"\n                if not re.match(phone_pattern, user_text):\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Неверный формат телефона. {retry_message}\")\n                    return\n            \n            # Сохраняем ответ для нового формата\n            timestamp = get_moscow_time()\n            response_data = user_text\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][variable_name] = response_data\n            \n            # Сохраняем в базу данных если включено\n            if save_to_database:\n                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n                if saved_to_db:\n                    logging.info(f\"✅ Данные сохранены в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n                else:\n                    logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            # Отправляем сообщение об успехе\n            success_message = waiting_config.get(\"success_message\", \"Спасибо за ваш ответ!\")\n            await message.answer(success_message)\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: {variable_name} = {user_text}\")\n            \n            # Навигация к следующему узлу для нового формата\n            if next_node_id:\n                try:\n                    logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n                    if next_node_id == \"start\":\n                        logging.info(f\"Переход к узлу start типа start\")\n                    elif next_node_id == \"interests_result\":\n                        text = \"\"\"🎯 Ваши интересы:\n\n{user_interests}\n\nСпасибо за информацию! Теперь мы сможем предложить вам более подходящий контент.\"\"\"\n                        await message.answer(text)\n                    elif next_node_id == \"final_message\":\n                        text = \"\"\"✅ Отлично! Ваши предпочтения сохранены.\n\nТеперь вы будете получать персонализированные рекомендации на основе ваших интересов.\"\"\"\n                        await message.answer(text)\n                    else:\n                        logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n                except Exception as e:\n                    logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n            \n            return  # Завершаем обработку для нового формата\n        \n        # Обработка старого формата (для совместимости)\n        # Находим узел для получения настроек\n        \n        # Если узел не найден\n        logging.warning(f\"Узел для сбора ввода не найден: {waiting_node_id}\")\n        del user_data[user_id][\"waiting_for_input\"]\n        return\n    \n    # НОВАЯ ЛОГИКА: Проверяем, включен ли дополнительный сбор ответов для обычных кнопок\n    if user_id in user_data and user_data[user_id].get(\"input_collection_enabled\"):\n        input_node_id = user_data[user_id].get(\"input_node_id\")\n        input_variable = user_data[user_id].get(\"input_variable\", \"button_response\")\n        user_text = message.text\n        \n        # Сохраняем любой текст как дополнительный ответ\n        timestamp = get_moscow_time()\n        \n        response_data = user_text  # Простое значение\n        \n        # Сохраняем в пользовательские данные\n        user_data[user_id][f\"{input_variable}_additional\"] = response_data\n        \n        # Уведомляем пользователя\n        await message.answer(\"✅ Дополнительный комментарий сохранен!\")\n        \n        logging.info(f\"Дополнительный текстовый ввод: {input_variable}_additional = {user_text} (пользователь {user_id})\")\n        return\n    \n    # Если нет активного ожидания ввода, игнорируем сообщение\n    return\n    # Валидация длины текста\n    min_length = input_config.get(\"min_length\", 0)\n    max_length = input_config.get(\"max_length\", 0)\n    \n    if min_length > 0 and len(user_text) < min_length:\n        retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n        await message.answer(f\"❌ Слишком короткий ответ (минимум {min_length} символов). {retry_message}\")\n        return\n    \n    if max_length > 0 and len(user_text) > max_length:\n        retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n        await message.answer(f\"❌ Слишком длинный ответ (максимум {max_length} символов). {retry_message}\")\n        return\n    \n    # Валидация типа ввода\n    input_type = input_config.get(\"type\", \"text\")\n    \n    if input_type == \"email\":\n        import re\n        email_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n        if not re.match(email_pattern, user_text):\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Неверный формат email. {retry_message}\")\n            return\n    \n    elif input_type == \"number\":\n        try:\n            float(user_text)\n        except ValueError:\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Введите корректное число. {retry_message}\")\n            return\n    \n    elif input_type == \"phone\":\n        import re\n        phone_pattern = r\"^[+]?[0-9\\s\\-\\(\\)]{10,}$\"\n        if not re.match(phone_pattern, user_text):\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Неверный формат телефона. {retry_message}\")\n            return\n    \n    # Сохраняем ответ пользователя простым значением\n    variable_name = input_config.get(\"variable\", \"user_response\")\n    timestamp = get_moscow_time()\n    node_id = input_config.get(\"node_id\", \"unknown\")\n    \n    # Простое значение вместо сложного объекта\n    response_data = user_text\n    \n    # Сохраняем в пользовательские данные\n    user_data[user_id][variable_name] = response_data\n    \n    # Сохраняем в базу данных если включено\n    if input_config.get(\"save_to_database\"):\n        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n        if saved_to_db:\n            logging.info(f\"✅ Данные сохранены в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n        else:\n            logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n    \n    # Отправляем сообщение об успехе\n    success_message = input_config.get(\"success_message\", \"Спасибо за ваш ответ!\")\n    await message.answer(success_message)\n    \n    # Очищаем состояние ожидания ввода\n    del user_data[user_id][\"waiting_for_input\"]\n    \n    logging.info(f\"Получен пользовательский ввод: {variable_name} = {user_text}\")\n    \n    # Автоматическая навигация к следующему узлу после успешного ввода\n    next_node_id = input_config.get(\"next_node_id\")\n    logging.info(f\"🔄 Проверяем навигацию: next_node_id = {next_node_id}\")\n    if next_node_id:\n        try:\n            logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n            \n            # Создаем фейковое сообщение для навигации\n            fake_message = type(\"FakeMessage\", (), {})()\n            fake_message.from_user = message.from_user\n            fake_message.answer = message.answer\n            fake_message.delete = lambda: None\n            \n            # Находим узел по ID и выполняем соответствующее действие\n            if next_node_id == \"start\":\n                logging.info(f\"Переход к узлу start типа start\")\n            elif next_node_id == \"interests_result\":\n                text = \"\"\"🎯 Ваши интересы:\n\n{user_interests}\n\nСпасибо за информацию! Теперь мы сможем предложить вам более подходящий контент.\"\"\"\n                # Используем parse_mode условного сообщения если он установлен\n                if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n                    parse_mode = conditional_parse_mode\n                else:\n                    parse_mode = None\n                builder = InlineKeyboardBuilder()\n                # Функция для определения количества колонок на основе текста кнопок\n                def calculate_keyboard_width(buttons_data):\n                    max_text_length = max([len(btn_text) for btn_text in buttons_data] + [0])\n                    if max_text_length <= 6:  # Короткие тексты\n                        return 3  # 3 колонки\n                    elif max_text_length <= 12:  # Средние тексты\n                        return 2  # 2 колонки\n                    else:  # Длинные тексты\n                        return 1  # 1 колонка\n                \n                button_texts = [\"👍 Продолжить\", \"✏️ Изменить выбор\"]\n                keyboard_width = calculate_keyboard_width(button_texts)\n                \n                builder.add(InlineKeyboardButton(text=\"👍 Продолжить\", callback_data=\"final_message\"))\n                builder.add(InlineKeyboardButton(text=\"✏️ Изменить выбор\", callback_data=\"start\"))\n                builder.adjust(keyboard_width)  # Умное расположение кнопок\n                keyboard = builder.as_markup()\n                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n            elif next_node_id == \"final_message\":\n                text = \"\"\"✅ Отлично! Ваши предпочтения сохранены.\n\nТеперь вы будете получать персонализированные рекомендации на основе ваших интересов.\"\"\"\n                # Используем parse_mode условного сообщения если он установлен\n                if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n                    parse_mode = conditional_parse_mode\n                else:\n                    parse_mode = None\n                builder = InlineKeyboardBuilder()\n                # Функция для определения количества колонок на основе текста кнопок\n                def calculate_keyboard_width(buttons_data):\n                    max_text_length = max([len(btn_text) for btn_text in buttons_data] + [0])\n                    if max_text_length <= 6:  # Короткие тексты\n                        return 3  # 3 колонки\n                    elif max_text_length <= 12:  # Средние тексты\n                        return 2  # 2 колонки\n                    else:  # Длинные тексты\n                        return 1  # 1 колонка\n                \n                button_texts = [\"🔄 Начать заново\"]\n                keyboard_width = calculate_keyboard_width(button_texts)\n                \n                builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"start\"))\n                builder.adjust(keyboard_width)  # Умное расположение кнопок\n                keyboard = builder.as_markup()\n                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n            else:\n                logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n        except Exception as e:\n            logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n\n\n# Обработчик для условных кнопок\n@dp.callback_query(lambda c: c.data.startswith(\"conditional_\"))\nasync def handle_conditional_button(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    \n    # Парсим callback_data: conditional_variableName_value\n    callback_parts = callback_query.data.split(\"_\", 2)\n    if len(callback_parts) >= 3:\n        variable_name = callback_parts[1]\n        variable_value = callback_parts[2]\n        \n        user_id = callback_query.from_user.id\n        \n        # Сохраняем значение в базу данных\n        await update_user_data_in_db(user_id, variable_name, variable_value)\n        \n        # Сохраняем в локальные данные\n        if user_id not in user_data:\n            user_data[user_id] = {}\n        user_data[user_id][variable_name] = variable_value\n        \n        logging.info(f\"Условная кнопка: {variable_name} = {variable_value} (пользователь {user_id})\")\n        \n        # После обновления значения автоматически вызываем профиль\n        await callback_query.answer(f\"✅ {variable_name} обновлено\")\n        \n        # Создаем имитацию сообщения для вызова команды профиль\n        class FakeMessage:\n            def __init__(self, callback_query):\n                self.from_user = callback_query.from_user\n                self.chat = callback_query.message.chat\n                self.date = callback_query.message.date\n                self.message_id = callback_query.message.message_id\n            \n            async def answer(self, text, parse_mode=None, reply_markup=None):\n                if reply_markup:\n                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode, reply_markup=reply_markup)\n                else:\n                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode)\n            \n            async def edit_text(self, text, parse_mode=None, reply_markup=None):\n                try:\n                    await bot.edit_message_text(text, self.chat.id, self.message_id, parse_mode=parse_mode, reply_markup=reply_markup)\n                except Exception:\n                    await self.answer(text, parse_mode, reply_markup)\n        \n        fake_message = FakeMessage(callback_query)\n        \n        # Вызываем обработчик профиля\n        try:\n            await profile_handler(fake_message)\n        except Exception as e:\n            logging.error(f\"Ошибка вызова profile_handler: {e}\")\n            await callback_query.message.answer(f\"✅ Значение {variable_name} обновлено на: {variable_value}\")\n    else:\n        logging.warning(f\"Неверный формат условной кнопки: {callback_query.data}\")\n        await callback_query.answer(\"❌ Ошибка обработки кнопки\", show_alert=True)\n\n\n\n# Обработчик команды профиля с поддержкой variableLabel\n@dp.message(Command(\"profile\"))\nasync def profile_handler(message: types.Message):\n    user_id = message.from_user.id\n    \n    # Получаем данные пользователя из базы данных\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Извлекаем пользовательские данные\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    if not user_vars:\n        await message.answer(\"👤 Профиль недоступен\\n\\nПохоже, вы еще не прошли опрос. Пожалуйста, введите /start чтобы заполнить профиль.\")\n        return\n    \n    # Формируем сообщение профиля с поддержкой variableLabel\n    profile_text = \"👤 Ваш профиль:\\n\\n\"\n    \n    # Отображаем все доступные переменные\n    for var_name, var_data in user_vars.items():\n        if isinstance(var_data, dict) and \"value\" in var_data:\n            value = var_data[\"value\"]\n        else:\n            value = var_data\n        profile_text += f\"{var_name}: {value}\\n\"\n    \n    await message.answer(profile_text)\n    logging.info(f\"Профиль отображен для пользователя {user_id}\")\n\n\n\n# Запуск бота\nasync def main():\n    global db_pool\n    try:\n        # Инициализируем базу данных\n        await init_database()\n        print(\"🤖 Бот запущен и готов к работе!\")\n        await dp.start_polling(bot)\n    except KeyboardInterrupt:\n        print(\"🛑 Получен сигнал остановки, завершаем работу...\")\n    except Exception as e:\n        logging.error(f\"Критическая ошибка: {e}\")\n    finally:\n        # Правильно закрываем все соединения\n        if db_pool:\n            await db_pool.close()\n            print(\"🔌 Соединение с базой данных закрыто\")\n        \n        # Закрываем сессию бота\n        await bot.session.close()\n        print(\"🔌 Сессия бота закрыта\")\n        print(\"✅ Бот корректно завершил работу\")\n\n\n# Обработчики для множественного выбора\n@dp.callback_query(lambda c: c.data.startswith(\"multi_select_\"))\nasync def handle_multi_select_callback(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    callback_data = callback_query.data\n    \n    if callback_data.startswith(\"multi_select_done_\"):\n        # Завершение множественного выбора\n        node_id = callback_data.replace(\"multi_select_done_\", \"\")\n        selected_options = user_data.get(user_id, {}).get(f\"multi_select_{node_id}\", [])\n        \n        # Сохраняем выбранные опции в базу данных\n        if selected_options:\n            selected_text = \", \".join(selected_options)\n            if node_id == \"start\":\n                await save_user_data_to_db(user_id, \"user_interests\", selected_text)\n            # Резервное сохранение если узел не найден\n            if not any(node_id == node for node in [\"start\"]):\n                await save_user_data_to_db(user_id, f\"multi_select_{node_id}\", selected_text)\n        \n        # Очищаем состояние множественного выбора\n        if user_id in user_data:\n            user_data[user_id].pop(f\"multi_select_{node_id}\", None)\n            user_data[user_id].pop(\"multi_select_node\", None)\n        \n        # Переходим к следующему узлу, если указан\n        # Определяем следующий узел для каждого node_id\n        if node_id == \"start\":\n            # Переход к узлу interests_result\n            await handle_callback_interests_result(callback_query)\n        return\n    \n    # Обработка выбора опции\n    parts = callback_data.split(\"_\")\n    if len(parts) >= 4:\n        node_id = parts[2]\n        button_id = \"_\".join(parts[3:])\n        \n        # Инициализируем список выбранных опций\n        if user_id not in user_data:\n            user_data[user_id] = {}\n        if f\"multi_select_{node_id}\" not in user_data[user_id]:\n            user_data[user_id][f\"multi_select_{node_id}\"] = []\n        \n        # Находим текст кнопки по button_id\n        button_text = None\n        if node_id == \"start\":\n            if button_id == \"btn-sport\":\n                button_text = \"⚽ Спорт\"\n            if button_id == \"btn-music\":\n                button_text = \"🎵 Музыка\"\n            if button_id == \"btn-books\":\n                button_text = \"📚 Книги\"\n            if button_id == \"btn-travel\":\n                button_text = \"✈️ Путешествия\"\n            if button_id == \"btn-tech\":\n                button_text = \"💻 Технологии\"\n            if button_id == \"btn-cooking\":\n                button_text = \"🍳 Кулинария\"\n            if button_id == \"btn-art\":\n                button_text = \"🎨 Искусство\"\n            if button_id == \"btn-games\":\n                button_text = \"🎮 Игры\"\n        \n        if button_text:\n            selected_list = user_data[user_id][f\"multi_select_{node_id}\"]\n            if button_text in selected_list:\n                # Убираем из выбранных\n                selected_list.remove(button_text)\n            else:\n                # Добавляем к выбранным\n                selected_list.append(button_text)\n            \n            # Обновляем клавиатуру с галочками\n            builder = InlineKeyboardBuilder()\n            if node_id == \"start\":\n                # Оптимальное количество колонок для кнопок интересов\n                keyboard_width = 2  # Консистентное количество колонок для множественного выбора\n                \n                # Добавляем кнопки выбора с умным расположением\n                selected_mark = \"✅ \" if \"⚽ Спорт\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}⚽ Спорт\", callback_data=f\"multi_select_{node_id}_btn-sport\"))\n                selected_mark = \"✅ \" if \"🎵 Музыка\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎵 Музыка\", callback_data=f\"multi_select_{node_id}_btn-music\"))\n                selected_mark = \"✅ \" if \"📚 Книги\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}📚 Книги\", callback_data=f\"multi_select_{node_id}_btn-books\"))\n                selected_mark = \"✅ \" if \"✈️ Путешествия\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}✈️ Путешествия\", callback_data=f\"multi_select_{node_id}_btn-travel\"))\n                selected_mark = \"✅ \" if \"💻 Технологии\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}💻 Технологии\", callback_data=f\"multi_select_{node_id}_btn-tech\"))\n                selected_mark = \"✅ \" if \"🍳 Кулинария\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}🍳 Кулинария\", callback_data=f\"multi_select_{node_id}_btn-cooking\"))\n                selected_mark = \"✅ \" if \"🎨 Искусство\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎨 Искусство\", callback_data=f\"multi_select_{node_id}_btn-art\"))\n                selected_mark = \"✅ \" if \"🎮 Игры\" in selected_list else \"\"\n                builder.add(InlineKeyboardButton(text=f\"{selected_mark}🎮 Игры\", callback_data=f\"multi_select_{node_id}_btn-games\"))\n                builder.add(InlineKeyboardButton(text=\"Готово\", callback_data=f\"multi_select_done_start\"))\n                builder.adjust(keyboard_width)\n            \n            keyboard = builder.as_markup()\n            await callback_query.message.edit_reply_markup(reply_markup=keyboard)\n\n# Обработчик для reply кнопок множественного выбора\n@dp.message()\nasync def handle_multi_select_reply(message: types.Message):\n    user_id = message.from_user.id\n    user_input = message.text\n    \n    # Проверяем, находится ли пользователь в режиме множественного выбора reply\n    if user_id in user_data and \"multi_select_node\" in user_data[user_id] and user_data[user_id].get(\"multi_select_type\") == \"reply\":\n        node_id = user_data[user_id][\"multi_select_node\"]\n        \n        if node_id == \"start\" and user_input == \"Готово\":\n            # Завершение множественного выбора для узла start\n            selected_options = user_data.get(user_id, {}).get(\"multi_select_{node_id}\", [])\n            if selected_options:\n                selected_text = \", \".join(selected_options)\n                await save_user_data_to_db(user_id, \"user_interests\", selected_text)\n            \n            # Очищаем состояние\n            user_data[user_id].pop(\"multi_select_{node_id}\", None)\n            user_data[user_id].pop(\"multi_select_node\", None)\n            user_data[user_id].pop(\"multi_select_type\", None)\n            \n            # Переход к следующему узлу\n            await handle_callback_interests_result(types.CallbackQuery(id=\"multi_select\", from_user=message.from_user, chat_instance=\"\", data=\"interests_result\", message=message))\n            return\n        \n        # Обработка выбора опции\n        if node_id == \"start\":\n            if user_input == \"⚽ Спорт\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"⚽ Спорт\" in selected_list:\n                    selected_list.remove(\"⚽ Спорт\")\n                    await message.answer(\"❌ Убрано: ⚽ Спорт\")\n                else:\n                    selected_list.append(\"⚽ Спорт\")\n                    await message.answer(\"✅ Выбрано: ⚽ Спорт\")\n                return\n            \n            if user_input == \"🎵 Музыка\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"🎵 Музыка\" in selected_list:\n                    selected_list.remove(\"🎵 Музыка\")\n                    await message.answer(\"❌ Убрано: 🎵 Музыка\")\n                else:\n                    selected_list.append(\"🎵 Музыка\")\n                    await message.answer(\"✅ Выбрано: 🎵 Музыка\")\n                return\n            \n            if user_input == \"📚 Книги\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"📚 Книги\" in selected_list:\n                    selected_list.remove(\"📚 Книги\")\n                    await message.answer(\"❌ Убрано: 📚 Книги\")\n                else:\n                    selected_list.append(\"📚 Книги\")\n                    await message.answer(\"✅ Выбрано: 📚 Книги\")\n                return\n            \n            if user_input == \"✈️ Путешествия\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"✈️ Путешествия\" in selected_list:\n                    selected_list.remove(\"✈️ Путешествия\")\n                    await message.answer(\"❌ Убрано: ✈️ Путешествия\")\n                else:\n                    selected_list.append(\"✈️ Путешествия\")\n                    await message.answer(\"✅ Выбрано: ✈️ Путешествия\")\n                return\n            \n            if user_input == \"💻 Технологии\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"💻 Технологии\" in selected_list:\n                    selected_list.remove(\"💻 Технологии\")\n                    await message.answer(\"❌ Убрано: 💻 Технологии\")\n                else:\n                    selected_list.append(\"💻 Технологии\")\n                    await message.answer(\"✅ Выбрано: 💻 Технологии\")\n                return\n            \n            if user_input == \"🍳 Кулинария\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"🍳 Кулинария\" in selected_list:\n                    selected_list.remove(\"🍳 Кулинария\")\n                    await message.answer(\"❌ Убрано: 🍳 Кулинария\")\n                else:\n                    selected_list.append(\"🍳 Кулинария\")\n                    await message.answer(\"✅ Выбрано: 🍳 Кулинария\")\n                return\n            \n            if user_input == \"🎨 Искусство\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"🎨 Искусство\" in selected_list:\n                    selected_list.remove(\"🎨 Искусство\")\n                    await message.answer(\"❌ Убрано: 🎨 Искусство\")\n                else:\n                    selected_list.append(\"🎨 Искусство\")\n                    await message.answer(\"✅ Выбрано: 🎨 Искусство\")\n                return\n            \n            if user_input == \"🎮 Игры\":\n                if \"multi_select_{node_id}\" not in user_data[user_id]:\n                    user_data[user_id][\"multi_select_{node_id}\"] = []\n                \n                selected_list = user_data[user_id][\"multi_select_{node_id}\"]\n                if \"🎮 Игры\" in selected_list:\n                    selected_list.remove(\"🎮 Игры\")\n                    await message.answer(\"❌ Убрано: 🎮 Игры\")\n                else:\n                    selected_list.append(\"🎮 Игры\")\n                    await message.answer(\"✅ Выбрано: 🎮 Игры\")\n                return\n            \n    \n    # Если не множественный выбор, передаем дальше по цепочке обработчиков\n    pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"}