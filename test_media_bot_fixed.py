"""
ü§ñ –¢–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ - Telegram Bot
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è @BotFather:
start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    return user_id in user_data

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤!

–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞."""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üñºÔ∏è –ú–µ–¥–∏–∞", callback_data="media-msg"))
    builder.add(InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help-msg"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫

@dp.callback_query(lambda c: c.data == "media-msg")
async def handle_callback_btn_media(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç:

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="video-msg"))
    builder.add(InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ", callback_data="audio-msg"))
    builder.add(InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="document-msg"))
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "video-msg")
async def handle_callback_btn_video(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞."""
    video_url = "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–¥–∏–∞", callback_data="media-msg"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_video(callback_query.from_user.id, video_url, caption=caption, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n{caption}")

@dp.callback_query(lambda c: c.data == "audio-msg")
async def handle_callback_btn_audio(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üéµ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
    audio_url = "https://www.soundjay.com/misc/beep-07a.wav"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–¥–∏–∞", callback_data="media-msg"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_audio(callback_query.from_user.id, audio_url, caption=caption, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ\n{caption}")

@dp.callback_query(lambda c: c.data == "document-msg")
async def handle_callback_btn_document(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üìÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    document_url = "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
    document_name = "test-document.pdf"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–¥–∏–∞", callback_data="media-msg"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_document(
            callback_query.from_user.id, 
            URLInputFile(document_url, filename=document_name), 
            caption=caption, 
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n{caption}")

@dp.callback_query(lambda c: c.data == "help-msg")
async def handle_callback_btn_help(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:
‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã
‚Ä¢ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã  
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "start-msg")
async def handle_callback_btn_start(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤!

–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üñºÔ∏è –ú–µ–¥–∏–∞", callback_data="media-msg"))
    builder.add(InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())