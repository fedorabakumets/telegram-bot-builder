"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = "–í–ê–®–ê_–¢–û–ß–ö–ê_–°–Æ–î–ê"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

if not API_TOKEN or API_TOKEN == "–í–ê–®–ê_–¢–û–ß–ö–ê_–°–Æ–î–ê":
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π API_TOKEN")
    exit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
    admin_list = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
    return user_id in admin_list

async def is_private_chat(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º"""
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return True  # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    
    text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!**

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É *markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

‚Ä¢ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
‚Ä¢ *–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*  
‚Ä¢ `–ö–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ`
‚Ä¢ [–°—Å—ã–ª–∫–∞](https://example.com)

```python
# –ë–ª–æ–∫ –∫–æ–¥–∞
print("Hello World!")
```

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç Inline –∫–Ω–æ–ø–æ–∫", callback_data="test_inline"))
    builder.add(InlineKeyboardButton(text="‚å®Ô∏è –¢–µ—Å—Ç Reply –∫–Ω–æ–ø–æ–∫", callback_data="test_reply"))
    builder.add(InlineKeyboardButton(text="üìä –°–ª–æ–∂–Ω—ã–π markdown", callback_data="complex_markdown"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "test_inline")
async def test_inline_callback(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫ —Å markdown"""
    await callback_query.answer()
    
    text = """‚úÖ **Inline –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!**

*–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ* —Å `markdown` —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ **inline callback**.

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    builder.add(InlineKeyboardButton(text="üîó –¢–µ—Å—Ç URL", url="https://telegram.org"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "test_reply")
async def test_reply_callback(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç reply –∫–Ω–æ–ø–æ–∫ —Å markdown"""
    await callback_query.answer()
    
    text = """‚å®Ô∏è **Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ* –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è **markdown** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!"""
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üëç –û—Ç–ª–∏—á–Ω–æ"))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ä—Ç—É"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    
    try:
        await callback_query.message.delete()
    except:
        pass
    
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "complex_markdown")
async def complex_markdown_callback(callback_query: types.CallbackQuery):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ–≥–æ markdown"""
    await callback_query.answer()
    
    text = """üìä **–°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä Markdown**

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è 1
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–≤–Ω—è 2

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –∏ *–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*

‚Ä¢ –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –° **–∂–∏—Ä–Ω—ã–º–∏** —Å–ª–æ–≤–∞–º–∏  
‚Ä¢ –ò *–∫—É—Ä—Å–∏–≤–æ–º*

`–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥` –∏ —Å—Å—ã–ª–∫–∏: [Telegram](https://telegram.org)

```python
def example():
    return "–ë–ª–æ–∫ –∫–æ–¥–∞ Python"
```

> –¶–∏—Ç–∞—Ç–∞ —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

---

*–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!*"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_start"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "back_to_start")
async def back_to_start_callback(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é"""
    await callback_query.answer()
    
    text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!**

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É *markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

‚Ä¢ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
‚Ä¢ *–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*  
‚Ä¢ `–ö–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ`
‚Ä¢ [–°—Å—ã–ª–∫–∞](https://example.com)

```python
# –ë–ª–æ–∫ –∫–æ–¥–∞
print("Hello World!")
```

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç Inline –∫–Ω–æ–ø–æ–∫", callback_data="test_inline"))
    builder.add(InlineKeyboardButton(text="‚å®Ô∏è –¢–µ—Å—Ç Reply –∫–Ω–æ–ø–æ–∫", callback_data="test_reply"))
    builder.add(InlineKeyboardButton(text="üìä –°–ª–æ–∂–Ω—ã–π markdown", callback_data="complex_markdown"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.message(lambda message: message.text == "üëç –û—Ç–ª–∏—á–Ω–æ")
async def excellent_reply_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–û—Ç–ª–∏—á–Ω–æ'"""
    text = """üëç **–û—Ç–ª–∏—á–Ω–æ! Reply –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!**

*Markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å **reply –∫–Ω–æ–ø–∫–∞–º–∏**.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ä—Ç—É"))
    builder.add(KeyboardButton(text="üì± –ö–æ–Ω—Ç–∞–∫—Ç"))
    builder.add(KeyboardButton(text="üìç –õ–æ–∫–∞—Ü–∏—è"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ä—Ç—É")
async def back_to_start_reply_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ä—Ç—É'"""
    text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!**

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É *markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

‚Ä¢ **–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
‚Ä¢ *–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*  
‚Ä¢ `–ö–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ`
‚Ä¢ [–°—Å—ã–ª–∫–∞](https://example.com)

```python
# –ë–ª–æ–∫ –∫–æ–¥–∞
print("Hello World!")
```

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéØ –¢–µ—Å—Ç Inline –∫–Ω–æ–ø–æ–∫", callback_data="test_inline"))
    builder.add(InlineKeyboardButton(text="‚å®Ô∏è –¢–µ—Å—Ç Reply –∫–Ω–æ–ø–æ–∫", callback_data="test_reply"))
    builder.add(InlineKeyboardButton(text="üìä –°–ª–æ–∂–Ω—ã–π markdown", callback_data="complex_markdown"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        print("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π Markdown –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())