#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ë–ï–ó reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""
import asyncio
import aiohttp
import re

async def test_no_reply_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ë–ï–ó reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ë–ï–ó reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    print("\nüîÑ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞")
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get('http://localhost:5000/api/projects/1/bot') as response:
                if response.status == 200:
                    data = await response.json()
                    if data['status'] == 'running':
                        print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
                    else:
                        print(f"‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {data['status']}")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    print("\nüîÑ –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")
    try:
        with open('bots/bot_1.py', 'r', encoding='utf-8') as f:
            bot_code = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç ReplyKeyboardRemove
        if 'ReplyKeyboardRemove' in bot_code:
            print("‚úÖ ReplyKeyboardRemove –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå ReplyKeyboardRemove –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ —Å–æ–∑–¥–∞–Ω–∏—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        if 'ReplyKeyboardBuilder()' not in bot_code:
            print("‚úÖ ReplyKeyboardBuilder –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        else:
            print("‚ùå ReplyKeyboardBuilder –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        if 'InlineKeyboardBuilder()' not in bot_code:
            print("‚úÖ InlineKeyboardBuilder –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        else:
            print("‚ùå InlineKeyboardBuilder –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–¥–µ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ReplyKeyboardRemove –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        handlers = re.findall(r'async def (\w+_handler)', bot_code)
        remove_calls = bot_code.count('ReplyKeyboardRemove()')
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {remove_calls} –≤—ã–∑–æ–≤–æ–≤ ReplyKeyboardRemove()")
        
        if remove_calls >= len(handlers):
            print("‚úÖ ReplyKeyboardRemove() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
        else:
            print("‚ùå ReplyKeyboardRemove() –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ –≤–æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        expected_handlers = [
            'start_handler',
            'help_handler', 
            'message_msg_1_handler'
        ]
        
        for handler in expected_handlers:
            if handler in bot_code:
                print(f"‚úÖ {handler} –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –µ—Å—Ç—å ReplyKeyboardRemove
                handler_start = bot_code.find(f'async def {handler}')
                if handler_start != -1:
                    next_handler = bot_code.find('async def ', handler_start + 1)
                    if next_handler == -1:
                        next_handler = len(bot_code)
                    
                    handler_code = bot_code[handler_start:next_handler]
                    if 'ReplyKeyboardRemove()' in handler_code:
                        print(f"‚úÖ {handler} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ReplyKeyboardRemove()")
                    else:
                        print(f"‚ùå {handler} –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ReplyKeyboardRemove()")
                        return False
            else:
                print(f"‚ùå {handler} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–æ—Ç–∞: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüîÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞")
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get('http://localhost:5000/api/projects/1') as response:
                if response.status == 200:
                    project_data = await response.json()
                    nodes = project_data['data']['nodes']
                    
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {len(nodes)} —É–∑–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç keyboardType: "none"
                    all_none = True
                    for node in nodes:
                        keyboard_type = node['data'].get('keyboardType', 'none')
                        if keyboard_type != 'none':
                            print(f"‚ùå –£–∑–µ–ª {node['id']} –∏–º–µ–µ—Ç keyboardType: {keyboard_type}")
                            all_none = False
                        else:
                            print(f"‚úÖ –£–∑–µ–ª {node['id']} –∏–º–µ–µ—Ç keyboardType: none")
                    
                    if all_none:
                        print("‚úÖ –í—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç keyboardType: none")
                    else:
                        print("‚ùå –ù–µ –≤—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç keyboardType: none")
                        return False
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–∑–ª—ã –ù–ï –∏–º–µ—é—Ç –∫–Ω–æ–ø–æ–∫
                    no_buttons = True
                    for node in nodes:
                        buttons = node['data'].get('buttons', [])
                        if buttons:
                            print(f"‚ùå –£–∑–µ–ª {node['id']} –∏–º–µ–µ—Ç –∫–Ω–æ–ø–∫–∏: {buttons}")
                            no_buttons = False
                        else:
                            print(f"‚úÖ –£–∑–µ–ª {node['id']} –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫")
                    
                    if no_buttons:
                        print("‚úÖ –í—Å–µ —É–∑–ª—ã –Ω–µ –∏–º–µ—é—Ç –∫–Ω–æ–ø–æ–∫")
                    else:
                        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —É–∑–ª—ã –∏–º–µ—é—Ç –∫–Ω–æ–ø–∫–∏")
                        return False
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            return False
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    print("\nüîÑ –¢–µ—Å—Ç 4: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞")
    
    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞
    print("\nüìù –ö–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
    print("=" * 50)
    
    lines = bot_code.split('\n')
    for i, line in enumerate(lines):
        if 'ReplyKeyboardRemove' in line:
            print(f"–°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
    
    print("=" * 50)
    
    print("\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫")
    print("‚úÖ ReplyKeyboardRemove –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    print("‚úÖ –ù–ï–¢ —Å–æ–∑–¥–∞–Ω–∏—è reply –∏–ª–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª—è—é—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    print("‚úÖ –í—Å–µ —É–∑–ª—ã –∏–º–µ—é—Ç keyboardType: none")
    print("‚úÖ –í—Å–µ —É–∑–ª—ã –Ω–µ –∏–º–µ—é—Ç –∫–Ω–æ–ø–æ–∫")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_no_reply_keyboards())