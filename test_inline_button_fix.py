#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
"""

import sys
import os
import re
from pathlib import Path

def test_python_syntax(code_content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ–¥–∞"""
    try:
        compile(code_content, '<string>', 'exec')
        return True, "–ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"

def fix_boolean_values(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç JavaScript boolean values –Ω–∞ Python boolean values"""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ true/false –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    fixed_code = re.sub(r'resize_keyboard=true', 'resize_keyboard=True', code_content)
    fixed_code = re.sub(r'resize_keyboard=false', 'resize_keyboard=False', fixed_code)
    fixed_code = re.sub(r'one_time_keyboard=true', 'one_time_keyboard=True', fixed_code)
    fixed_code = re.sub(r'one_time_keyboard=false', 'one_time_keyboard=False', fixed_code)
    
    return fixed_code

def fix_unclosed_strings(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
    lines = code_content.split('\n')
    fixed_lines = []
    
    for i, line in enumerate(lines):
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        if 'text = "' in line and line.count('"') == 1:
            # –≠—Ç–æ –Ω–∞—á–∞–ª–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            fixed_line = line.replace('text = "', 'text = """')
            fixed_lines.append(fixed_line)
            
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
            j = i + 1
            while j < len(lines) and not lines[j].strip().endswith('"'):
                fixed_lines.append(lines[j])
                j += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            if j < len(lines):
                last_line = lines[j]
                if last_line.strip().endswith('"'):
                    fixed_lines.append(last_line[:-1] + '"""')
                else:
                    fixed_lines.append(last_line + '"""')
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            i = j
        else:
            fixed_lines.append(line)
    
    return '\n'.join(fixed_lines)

def test_file_fixes(filename):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print(f"\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–ê: {filename} ===")
    
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(filename, 'r', encoding='utf-8') as f:
        original_code = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:")
    is_valid, message = test_python_syntax(original_code)
    if is_valid:
        print(f"‚úÖ {message}")
        return True
    else:
        print(f"‚ùå {message}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º boolean –∑–Ω–∞—á–µ–Ω–∏—è
    print("\n2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏–π...")
    fixed_code = fix_boolean_values(original_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    true_count = original_code.count('=true')
    false_count = original_code.count('=false')
    print(f"   –ù–∞–π–¥–µ–Ω–æ true: {true_count}, false: {false_count}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    print("\n3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫...")
    fixed_code = fix_unclosed_strings(fixed_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
    is_valid, message = test_python_syntax(fixed_code)
    if is_valid:
        print(f"‚úÖ {message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        fixed_filename = filename.replace('.py', '_fixed.py')
        with open(fixed_filename, 'w', encoding='utf-8') as f:
            f.write(fixed_code)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {fixed_filename}")
        return True
    else:
        print(f"‚ùå {message}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –î–õ–Ø INLINE –ö–ù–û–ü–û–ö")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
    test_files = [
        'complex_test_bot_3.py',
        'reply_keyboard_test_4.py',
        'simple_mixed_test_bot.py'
    ]
    
    success_count = 0
    for filename in test_files:
        if test_file_fixes(filename):
            success_count += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {success_count}/{len(test_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    if success_count == len(test_files):
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞, —á—Ç–æ–±—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª Python True/False")
        print("2. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
    
    return success_count == len(test_files)

if __name__ == "__main__":
    main()