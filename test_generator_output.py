"""
–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
"""
import json

def create_test_bot_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        "nodes": [
            {
                "id": "start-node",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.",
                    "keyboardType": "inline",
                    "synonyms": ["—Å—Ç–∞—Ä—Ç", "–ø—Ä–∏–≤–µ—Ç"],
                    "buttons": [
                        {
                            "id": "btn-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "help-cmd"
                        },
                        {
                            "id": "btn-menu",
                            "text": "üì± –ú–µ–Ω—é",
                            "action": "goto",
                            "target": "menu-msg"
                        }
                    ]
                }
            },
            {
                "id": "help-cmd",
                "type": "command",
                "position": {"x": 300, "y": 100},
                "data": {
                    "command": "/help",
                    "messageText": "‚ùì –°–ø—Ä–∞–≤–∫–∞:\n\n/start - –ó–∞–ø—É—Å–∫\n/help - –°–ø—Ä–∞–≤–∫–∞",
                    "keyboardType": "inline", 
                    "synonyms": ["–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"],
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-node"
                        }
                    ]
                }
            },
            {
                "id": "menu-msg",
                "type": "message",
                "position": {"x": 100, "y": 300},
                "data": {
                    "messageText": "üì± –ú–µ–Ω—é –±–æ—Ç–∞",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-info",
                            "text": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                            "action": "goto",
                            "target": "start-node"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {"from": "start-node", "to": "help-cmd"},
            {"from": "start-node", "to": "menu-msg"},
            {"from": "help-cmd", "to": "start-node"},
            {"from": "menu-msg", "to": "start-node"}
        ]
    }

def test_current_generator():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    
    bot_data = create_test_bot_data()
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    print(f"üìä –£–∑–ª–æ–≤: {len(bot_data['nodes'])}")
    print(f"üîó –°–≤—è–∑–µ–π: {len(bot_data['connections'])}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    start_node = bot_data['nodes'][0]
    help_node = bot_data['nodes'][1]
    
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥:")
    print(f"Start –∫–æ–º–∞–Ω–¥–∞: {start_node['data']['command']}")
    print(f"  ‚Ä¢ –¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {start_node['data']['keyboardType']}")
    print(f"  ‚Ä¢ –ö–Ω–æ–ø–æ–∫: {len(start_node['data']['buttons'])}")
    print(f"  ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: {start_node['data']['synonyms']}")
    
    print(f"Help –∫–æ–º–∞–Ω–¥–∞: {help_node['data']['command']}")
    print(f"  ‚Ä¢ –¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {help_node['data']['keyboardType']}")
    print(f"  ‚Ä¢ –ö–Ω–æ–ø–æ–∫: {len(help_node['data']['buttons'])}")
    print(f"  ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: {help_node['data']['synonyms']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    with open('test_bot_for_generator.json', 'w', encoding='utf-8') as f:
        json.dump(bot_data, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω test_bot_for_generator.json")
    print(f"\nüß™ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print(f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–æ—Ç–æ–≤")
    print(f"2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ test_bot_for_generator.json")
    print(f"3. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ Python –∫–æ–¥")
    print(f"4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ:")
    print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /start —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /help —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏") 
    print(f"   ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã '—Å—Ç–∞—Ä—Ç', '–ø—Ä–∏–≤–µ—Ç' –≤—ã–∑—ã–≤–∞—é—Ç start_handler")
    print(f"   ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞' –≤—ã–∑—ã–≤–∞—é—Ç help_handler")
    print(f"   ‚Ä¢ –í –∫–æ–¥–µ –Ω–µ—Ç 'true'/'false', —Ç–æ–ª—å–∫–æ 'True'/'False'")
    
    return bot_data

def analyze_code_pattern():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–¥–∞"""
    
    print(f"\nüìù –û–ñ–ò–î–ê–ï–ú–´–ô –ü–ê–¢–¢–ï–†–ù –ö–û–î–ê:")
    print(f"=" * 50)
    
    expected_start = """
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...
    
    text = \"\"\"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.\"\"\"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)
"""
    
    expected_synonym = """
@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await start_handler(message)  # ‚Üê –ö–õ–Æ–ß–ï–í–û–ï: –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
"""
    
    print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –∫–æ–º–∞–Ω–¥–∞ /start:")
    print(expected_start)
    
    print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - —Å–∏–Ω–æ–Ω–∏–º '—Å—Ç–∞—Ä—Ç':")
    print(expected_synonym)
    
    print("\n‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –±—ã–ª–æ –±—ã:")
    print("‚Ä¢ –°–∏–Ω–æ–Ω–∏–º –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç start_handler")
    print("‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –ù–ï —Å–æ–∑–¥–∞–µ—Ç InlineKeyboardBuilder")
    print("‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply_markup=keyboard")
    print("‚Ä¢ –í –∫–æ–¥–µ –µ—Å—Ç—å resize_keyboard=true (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ –° –ö–û–ú–ê–ù–î–ê–ú–ò –ò –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò")
    print("=" * 60)
    
    bot_data = test_current_generator()
    analyze_code_pattern()
    
    print(f"\nüîç –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ:")
    print(f"1. ‚úÖ start_handler —Å–æ–∑–¥–∞–µ—Ç InlineKeyboardBuilder")
    print(f"2. ‚úÖ start_handler –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply_markup=keyboard")
    print(f"3. ‚úÖ help_handler —Å–æ–∑–¥–∞–µ—Ç InlineKeyboardBuilder") 
    print(f"4. ‚úÖ help_handler –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply_markup=keyboard")
    print(f"5. ‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –≤—ã–∑—ã–≤–∞—é—Ç await start_handler(message)")
    print(f"6. ‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –≤—ã–∑—ã–≤–∞—é—Ç await help_handler(message)")
    print(f"7. ‚úÖ –ù–µ—Ç 'true'/'false', —Ç–æ–ª—å–∫–æ 'True'/'False'")
    print(f"8. ‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

if __name__ == "__main__":
    main()