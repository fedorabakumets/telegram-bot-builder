"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä (Reply + Inline)
"""

import re
from typing import Dict, List

def analyze_mixed_keyboards(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–æ–¥–µ"""
    
    # Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_keyboards = re.findall(r'ReplyKeyboardBuilder\(\)', code)
    reply_buttons = re.findall(r'KeyboardButton\(text="([^"]+)"', code)
    reply_special_buttons = re.findall(r'KeyboardButton\(text="[^"]+", request_(contact|location)=True\)', code)
    
    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inline_keyboards = re.findall(r'InlineKeyboardBuilder\(\)', code)
    inline_buttons = re.findall(r'InlineKeyboardButton\(text="([^"]+)"', code)
    inline_url_buttons = re.findall(r'InlineKeyboardButton\(text="[^"]+", url="([^"]+)"\)', code)
    inline_callback_buttons = re.findall(r'InlineKeyboardButton\(text="[^"]+", callback_data="([^"]+)"\)', code)
    
    # –£–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    keyboard_removals = re.findall(r'ReplyKeyboardRemove\(\)', code)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    one_time_keyboards = re.findall(r'one_time_keyboard=True', code)
    resize_keyboards = re.findall(r'resize_keyboard=True', code)
    
    return {
        'reply_keyboards': len(reply_keyboards),
        'reply_buttons': len(reply_buttons),
        'reply_special_buttons': len(reply_special_buttons),
        'inline_keyboards': len(inline_keyboards),
        'inline_buttons': len(inline_buttons),
        'inline_url_buttons': len(inline_url_buttons),
        'inline_callback_buttons': len(inline_callback_buttons),
        'keyboard_removals': len(keyboard_removals),
        'one_time_keyboards': len(one_time_keyboards),
        'resize_keyboards': len(resize_keyboards)
    }

def analyze_keyboard_transitions(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    # –ü–µ—Ä–µ—Ö–æ–¥—ã –∏–∑ Reply –≤ Inline
    reply_to_inline = 0
    inline_to_reply = 0
    reply_to_none = 0
    inline_to_none = 0
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    handlers = re.findall(r'async def (handle_[^(]+)\([^)]+\):\s*(.*?)(?=async def|\Z)', code, re.DOTALL)
    
    transition_patterns = []
    
    for handler_name, handler_body in handlers:
        has_reply = 'ReplyKeyboardBuilder' in handler_body
        has_inline = 'InlineKeyboardBuilder' in handler_body
        has_removal = 'ReplyKeyboardRemove' in handler_body
        
        if has_reply and has_inline:
            transition_patterns.append(f"{handler_name}: Reply + Inline")
        elif has_reply:
            transition_patterns.append(f"{handler_name}: Reply only")
        elif has_inline:
            transition_patterns.append(f"{handler_name}: Inline only")
        elif has_removal:
            transition_patterns.append(f"{handler_name}: Keyboard removal")
    
    return {
        'transition_patterns': transition_patterns,
        'mixed_handlers': len([p for p in transition_patterns if 'Reply + Inline' in p]),
        'reply_only_handlers': len([p for p in transition_patterns if 'Reply only' in p]),
        'inline_only_handlers': len([p for p in transition_patterns if 'Inline only' in p]),
        'removal_handlers': len([p for p in transition_patterns if 'removal' in p])
    }

def analyze_navigation_flow(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    reply_handlers = re.findall(r'@dp\.message\(lambda message: message\.text == "([^"]+)"\)', code)
    callback_handlers = re.findall(r'@dp\.callback_query\(lambda callback_query: callback_query\.data == "([^"]+)"\)', code)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    contact_handlers = re.findall(r'@dp\.message\(F\.contact\)', code)
    location_handlers = re.findall(r'@dp\.message\(F\.location\)', code)
    
    # URL –ø–µ—Ä–µ—Ö–æ–¥—ã
    url_patterns = re.findall(r'url="([^"]+)"', code)
    
    # –ö–æ–º–∞–Ω–¥—ã
    command_handlers = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', code)
    start_handlers = re.findall(r'@dp\.message\(CommandStart\(\)\)', code)
    
    return {
        'reply_handlers': len(reply_handlers),
        'callback_handlers': len(callback_handlers),
        'contact_handlers': len(contact_handlers),
        'location_handlers': len(location_handlers),
        'url_patterns': len(url_patterns),
        'command_handlers': len(command_handlers),
        'start_handlers': len(start_handlers),
        'total_navigation_points': len(reply_handlers) + len(callback_handlers) + len(contact_handlers) + len(location_handlers)
    }

def check_code_quality(code: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    
    # –ò–º–ø–æ—Ä—Ç—ã
    has_F_import = 'from aiogram import Bot, Dispatcher, types, F' in code
    has_keyboard_imports = 'ReplyKeyboardBuilder, InlineKeyboardBuilder' in code
    has_proper_imports = 'from aiogram.types import' in code
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞
    has_main_function = 'async def main():' in code
    has_bot_setup = 'Bot(token=' in code
    has_dispatcher_setup = 'Dispatcher()' in code
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    has_error_handling = 'try:' in code or 'except' in code
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comment_lines = len(re.findall(r'^\s*#', code, re.MULTILINE))
    total_lines = len(code.splitlines())
    comment_ratio = comment_lines / total_lines if total_lines > 0 else 0
    
    return {
        'has_F_import': has_F_import,
        'has_keyboard_imports': has_keyboard_imports,
        'has_proper_imports': has_proper_imports,
        'has_main_function': has_main_function,
        'has_bot_setup': has_bot_setup,
        'has_dispatcher_setup': has_dispatcher_setup,
        'has_error_handling': has_error_handling,
        'comment_ratio': comment_ratio,
        'total_lines': total_lines
    }

def calculate_mixed_keyboards_score(keyboards: Dict, transitions: Dict, navigation: Dict, quality: Dict) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    score = 0
    max_score = 100
    
    # –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (40 –±–∞–ª–ª–æ–≤)
    if keyboards['reply_keyboards'] > 0:
        score += 10
    if keyboards['inline_keyboards'] > 0:
        score += 10
    if keyboards['reply_special_buttons'] > 0:
        score += 10  # –ö–æ–Ω—Ç–∞–∫—Ç/–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    if keyboards['keyboard_removals'] > 0:
        score += 10  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    
    # –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏ (30 –±–∞–ª–ª–æ–≤)
    if transitions['mixed_handlers'] > 0:
        score += 15  # –°–º–µ—à–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if transitions['reply_only_handlers'] > 0:
        score += 5
    if transitions['inline_only_handlers'] > 0:
        score += 5
    if transitions['removal_handlers'] > 0:
        score += 5
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (20 –±–∞–ª–ª–æ–≤)
    nav_points = navigation.get('total_navigation_points', 0)
    if nav_points >= 10:
        score += 20
    elif nav_points >= 5:
        score += 15
    elif nav_points >= 2:
        score += 10
    elif nav_points >= 1:
        score += 5
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (10 –±–∞–ª–ª–æ–≤)
    quality_score = 0
    if quality['has_F_import']:
        quality_score += 3
    if quality['has_keyboard_imports']:
        quality_score += 2
    if quality['has_main_function']:
        quality_score += 2
    if quality['comment_ratio'] > 0.1:
        quality_score += 3
    
    score += quality_score
    
    return min(score, max_score)

def run_mixed_keyboards_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    print("üîÑ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –°–ú–ï–®–ê–ù–ù–´–• –ö–õ–ê–í–ò–ê–¢–£–†")
    print("=" * 45)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥ –±–æ—Ç–∞
    try:
        with open('simple_mixed_test_bot.py', 'r', encoding='utf-8') as f:
            code = f.read()
        print(f"üìÑ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤\n")
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª simple_mixed_test_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    keyboards = analyze_mixed_keyboards(code)
    transitions = analyze_keyboard_transitions(code)
    navigation = analyze_navigation_flow(code)
    quality = check_code_quality(code)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("‚å®Ô∏è –ê–ù–ê–õ–ò–ó –ö–õ–ê–í–ò–ê–¢–£–†:")
    print("-------------------")
    print(f"  ‚Ä¢ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['reply_keyboards']}")
    print(f"  ‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['inline_keyboards']}")
    print(f"  ‚Ä¢ Reply –∫–Ω–æ–ø–æ–∫: {keyboards['reply_buttons']}")
    print(f"  ‚Ä¢ Inline –∫–Ω–æ–ø–æ–∫: {keyboards['inline_buttons']}")
    print(f"  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: {keyboards['reply_special_buttons']}")
    print(f"  ‚Ä¢ URL –∫–Ω–æ–ø–æ–∫: {keyboards['inline_url_buttons']}")
    print(f"  ‚Ä¢ Callback –∫–Ω–æ–ø–æ–∫: {keyboards['inline_callback_buttons']}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['keyboard_removals']}")
    print(f"  ‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['one_time_keyboards']}")
    print(f"  ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['resize_keyboards']}")
    
    print(f"\nüîÑ –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–•–û–î–û–í:")
    print("-------------------")
    print(f"  ‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {transitions['mixed_handlers']}")
    print(f"  ‚Ä¢ Reply-—Ç–æ–ª—å–∫–æ: {transitions['reply_only_handlers']}")
    print(f"  ‚Ä¢ Inline-—Ç–æ–ª—å–∫–æ: {transitions['inline_only_handlers']}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {transitions['removal_handlers']}")
    
    if transitions['transition_patterns']:
        print("  ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:")
        for pattern in transitions['transition_patterns'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"    - {pattern}")
        if len(transitions['transition_patterns']) > 5:
            print(f"    ... –∏ –µ—â—ë {len(transitions['transition_patterns']) - 5}")
    
    print(f"\nüó∫Ô∏è –ê–ù–ê–õ–ò–ó –ù–ê–í–ò–ì–ê–¶–ò–ò:")
    print("-------------------")
    print(f"  ‚Ä¢ Reply –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {navigation['reply_handlers']}")
    print(f"  ‚Ä¢ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {navigation['callback_handlers']}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {navigation['contact_handlers']}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {navigation['location_handlers']}")
    print(f"  ‚Ä¢ URL –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: {navigation['url_patterns']}")
    print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥: {navigation['command_handlers']}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {navigation['total_navigation_points']}")
    
    print(f"\nüèóÔ∏è –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê:")
    print("----------------")
    print(f"  ‚Ä¢ –ò–º–ø–æ—Ä—Ç F: {'‚úÖ' if quality['has_F_import'] else '‚ùå'}")
    print(f"  ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {'‚úÖ' if quality['has_keyboard_imports'] else '‚ùå'}")
    print(f"  ‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {'‚úÖ' if quality['has_main_function'] else '‚ùå'}")
    print(f"  ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {quality['comment_ratio']:.1%}")
    print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {quality['total_lines']}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
    score = calculate_mixed_keyboards_score(keyboards, transitions, navigation, quality)
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("-----------------")
    print(f"üéñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {score}/100 ({score}%)")
    
    if score >= 90:
        print("üèÜ –û–¢–õ–ò–ß–ù–û! –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ")
    elif score >= 75:
        print("üëç –•–û–†–û–®–û! –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif score >= 60:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –ï—Å—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã –≤ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö")
    else:
        print("‚ùå –ü–õ–û–•–û! –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    
    return score

def compare_keyboard_types():
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    print(f"\nüìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
    print("------------------------")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –±–æ—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    bots_data = {}
    
    files_to_compare = [
        ('mixed_keyboards_test_bot.py', '–°–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'),
        ('reply_keyboard_test_4_final.py', 'Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'),
        ('complex_test_bot_3.py', 'Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã')
    ]
    
    for filename, bot_type in files_to_compare:
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                code = f.read()
                keyboards = analyze_mixed_keyboards(code)
                navigation = analyze_navigation_flow(code)
                bots_data[bot_type] = {
                    'reply_keyboards': keyboards['reply_keyboards'],
                    'inline_keyboards': keyboards['inline_keyboards'],
                    'total_buttons': keyboards['reply_buttons'] + keyboards['inline_buttons'],
                    'special_buttons': keyboards['reply_special_buttons'],
                    'navigation_points': navigation['total_navigation_points']
                }
        except FileNotFoundError:
            continue
    
    if bots_data:
        for bot_type, data in bots_data.items():
            print(f"\n{bot_type}:")
            print(f"  ‚Ä¢ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {data['reply_keyboards']}")
            print(f"  ‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {data['inline_keyboards']}")
            print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {data['total_buttons']}")
            print(f"  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: {data['special_buttons']}")
            print(f"  ‚Ä¢ –¢–æ—á–µ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {data['navigation_points']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    score = run_mixed_keyboards_test()
    compare_keyboard_types()
    
    print(f"\n{'=' * 50}")
    print("üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ú–ï–®–ê–ù–ù–´–• –ö–õ–ê–í–ò–ê–¢–£–† –ó–ê–í–ï–†–®–ï–ù–û!")
    
    if score is not None and score >= 75:
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üéØ –í—Å–µ —Ç–∏–ø—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Ç–∏–ø–∞–º–∏")

if __name__ == "__main__":
    main()