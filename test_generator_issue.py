"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
"""
import json
import sys
import os

def create_simple_test_bot():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∏ —Å–∏–Ω–æ–Ω–∏–º—ã"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-node",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.",
                    "keyboardType": "inline",
                    "synonyms": ["—Å—Ç–∞—Ä—Ç", "–ø—Ä–∏–≤–µ—Ç"],
                    "buttons": [
                        {
                            "id": "btn-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "help-msg"
                        }
                    ]
                }
            },
            {
                "id": "help-msg",
                "type": "message",
                "position": {"x": 300, "y": 100},
                "data": {
                    "messageText": "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-node"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {"from": "start-node", "to": "help-msg"},
            {"from": "help-msg", "to": "start-node"}
        ]
    }
    
    return bot_data

def generate_with_real_generator():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
    client_lib_path = os.path.join(os.path.dirname(__file__), 'client', 'src', 'lib')
    if os.path.exists(client_lib_path):
        sys.path.append(client_lib_path)
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ TypeScript)
            pass
        except:
            pass
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ TypeScript, –∏—Å–ø–æ–ª—å–∑—É–µ–º Node.js –¥–ª—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    import subprocess
    
    bot_data = create_simple_test_bot()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª
    with open('temp_bot_data.json', 'w', encoding='utf-8') as f:
        json.dump(bot_data, f, indent=2, ensure_ascii=False)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    node_script = '''
const fs = require('fs');

// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function generatePythonCode(botData, botName = "TestBot") {
  const { nodes } = botData;
  
  let code = '"""\n';
  code += `${botName} - Telegram Bot\n`;
  code += '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n';
  code += '"""\n\n';
  
  code += 'import asyncio\n';
  code += 'import logging\n';
  code += 'from aiogram import Bot, Dispatcher, types, F\n';
  code += 'from aiogram.filters import CommandStart, Command\n';
  code += 'from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton\n';
  code += 'from aiogram.utils.keyboard import InlineKeyboardBuilder\n\n';
  
  code += 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"\n\n';
  code += 'bot = Bot(token=BOT_TOKEN)\n';
  code += 'dp = Dispatcher()\n';
  code += 'user_data = {}\n\n';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
  const startNode = nodes.find(n => n.type === 'start');
  if (startNode) {
    code += '@dp.message(CommandStart())\n';
    code += 'async def start_handler(message: types.Message):\n';
    code += '    user_data[message.from_user.id] = {"registered": True}\n\n';
    
    const messageText = startNode.data.messageText || "–ü—Ä–∏–≤–µ—Ç!";
    if (messageText.includes('\n')) {
      code += `    text = """${messageText}"""\n`;
    } else {
      code += `    text = "${messageText.replace(/"/g, '\\"')}"\n`;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    if (startNode.data.keyboardType === "inline" && startNode.data.buttons && startNode.data.buttons.length > 0) {
      code += '    \n';
      code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n';
      code += '    builder = InlineKeyboardBuilder()\n';
      startNode.data.buttons.forEach(button => {
        code += `    builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${button.target}"))\n`;
      });
      code += '    keyboard = builder.as_markup()\n';
      code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏\n';
      code += '    await message.answer(text, reply_markup=keyboard)\n\n';
    } else {
      code += '    await message.answer(text)\n\n';
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    if (startNode.data.synonyms && startNode.data.synonyms.length > 0) {
      code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥\n';
      startNode.data.synonyms.forEach(synonym => {
        const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
        code += `@dp.message(lambda message: message.text and message.text.lower() == "${synonym.toLowerCase()}")\n`;
        code += `async def start_synonym_${sanitizedSynonym}_handler(message: types.Message):\n`;
        code += '    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start\n';
        code += '    await start_handler(message)\n\n';
      });
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫\n';
  const inlineNodes = nodes.filter(node => 
    node.data.keyboardType === 'inline' && node.data.buttons && node.data.buttons.length > 0
  );
  
  const processedCallbacks = new Set();
  
  inlineNodes.forEach(node => {
    if (node.data.buttons) {
      node.data.buttons.forEach(button => {
        if (button.action === 'goto' && button.target && !processedCallbacks.has(button.target)) {
          processedCallbacks.add(button.target);
          
          const targetNode = nodes.find(n => n.id === button.target);
          if (targetNode) {
            const safeFunctionName = button.target.replace(/[^a-zA-Z0-9]/g, '_');
            code += `@dp.callback_query(lambda c: c.data == "${button.target}")\n`;
            code += `async def handle_callback_${safeFunctionName}(callback_query: types.CallbackQuery):\n`;
            code += '    await callback_query.answer()\n';
            
            const targetText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ";
            if (targetText.includes('\n')) {
              code += `    text = """${targetText}"""\n`;
            } else {
              code += `    text = "${targetText.replace(/"/g, '\\"')}"\n`;
            }
            
            if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
              code += '    builder = InlineKeyboardBuilder()\n';
              targetNode.data.buttons.forEach(btn => {
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btn.target}"))\n`;
              });
              code += '    keyboard = builder.as_markup()\n';
              code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n';
            } else {
              code += '    await callback_query.message.edit_text(text)\n\n';
            }
          }
        }
      });
    }
  });
  
  code += '# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n';
  code += 'async def main():\n';
  code += '    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")\n';
  code += '    await dp.start_polling(bot)\n\n';
  
  code += 'if __name__ == "__main__":\n';
  code += '    asyncio.run(main())\n';
  
  return code;
}

// –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
const botData = JSON.parse(fs.readFileSync('temp_bot_data.json', 'utf8'));

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
const pythonCode = generatePythonCode(botData, "–¢–µ—Å—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫");

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
fs.writeFileSync('generated_test_inline_bot.py', pythonCode, 'utf8');

console.log("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª generated_test_inline_bot.py");
console.log("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:");
console.log("1. –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏");
console.log("2. –°–∏–Ω–æ–Ω–∏–º—ã '—Å—Ç–∞—Ä—Ç' –∏ '–ø—Ä–∏–≤–µ—Ç' —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏");
console.log("3. Callback –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
'''
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
    with open('generate_test.js', 'w', encoding='utf-8') as f:
        f.write(node_script)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º Node.js —Å–∫—Ä–∏–ø—Ç
    try:
        result = subprocess.run(['node', 'generate_test.js'], 
                                capture_output=True, text=True, encoding='utf-8')
        if result.returncode == 0:
            print("‚úÖ Node.js –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ Node.js –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
            print(result.stderr)
            
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for temp_file in ['temp_bot_data.json', 'generate_test.js']:
            if os.path.exists(temp_file):
                os.remove(temp_file)
                
    except FileNotFoundError:
        print("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥.")
        
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏...")
    
    bot_data = create_simple_test_bot()
    
    print(f"üìä –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç:")
    print(f"‚Ä¢ –£–∑–ª–æ–≤: {len(bot_data['nodes'])}")
    print(f"‚Ä¢ –°–≤—è–∑–µ–π: {len(bot_data['connections'])}")
    
    start_node = bot_data['nodes'][0]
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞:")
    print(f"‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: {start_node['data']['command']}")
    print(f"‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: {start_node['data']['synonyms']}")
    print(f"‚Ä¢ –¢–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {start_node['data']['keyboardType']}")
    print(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫: {len(start_node['data']['buttons'])}")
    
    print(f"\nüîç –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ:")
    print(f"‚Ä¢ /start –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print(f"‚Ä¢ '—Å—Ç–∞—Ä—Ç' –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print(f"‚Ä¢ '–ø—Ä–∏–≤–µ—Ç' –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    generate_with_real_generator()

if __name__ == "__main__":
    main()