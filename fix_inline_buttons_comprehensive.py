#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
"""

import os
import re
import sys
import json
import subprocess
from pathlib import Path

def fix_command_syntax_errors(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö"""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Command(")help") -> Command("help")
    fixed_code = re.sub(r'Command\("\)([^"]+)"\)', r'Command("\1")', code_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    fixed_code = re.sub(r'Command\("([^"]*)\)([^"]*)"', r'Command("\1\2")', fixed_code)
    
    return fixed_code

def fix_boolean_values(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç JavaScript boolean values –Ω–∞ Python boolean values"""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ true/false –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    fixed_code = re.sub(r'resize_keyboard=true', 'resize_keyboard=True', code_content)
    fixed_code = re.sub(r'resize_keyboard=false', 'resize_keyboard=False', fixed_code)
    fixed_code = re.sub(r'one_time_keyboard=true', 'one_time_keyboard=True', fixed_code)
    fixed_code = re.sub(r'one_time_keyboard=false', 'one_time_keyboard=False', fixed_code)
    
    return fixed_code

def fix_empty_callback_data(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ callback_data"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ callback_data
    lines = code_content.split('\n')
    fixed_lines = []
    
    for line in lines:
        if 'callback_data=""' in line:
            print(f"‚ö†Ô∏è  –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—É—Å—Ç—ã–º callback_data: {line.strip()}")
            continue
        fixed_lines.append(line)
    
    return '\n'.join(fixed_lines)

def fix_string_interpolation(code_content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π —Å—Ç—Ä–æ–∫"""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    fixed_code = re.sub(r'text = "([^"]*)\n', r'text = """\1\n', code_content)
    
    return fixed_code

def test_python_syntax(code_content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ–¥–∞"""
    try:
        compile(code_content, '<string>', 'exec')
        return True, "–ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
    except SyntaxError as e:
        return False, f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {e.lineno}: {e.msg}"

def apply_all_fixes(code_content):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ –∫–æ–¥—É"""
    print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    print("1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–º–∞–Ω–¥...")
    code_content = fix_command_syntax_errors(code_content)
    
    # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º boolean –∑–Ω–∞—á–µ–Ω–∏—è
    print("2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏–π...")
    code_content = fix_boolean_values(code_content)
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ callback_data
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö callback_data...")
    code_content = fix_empty_callback_data(code_content)
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏
    print("4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–æ–≤...")
    code_content = fix_string_interpolation(code_content)
    
    return code_content

def fix_file(filename):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª"""
    print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê: {filename}")
    
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(filename, 'r', encoding='utf-8') as f:
        original_code = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:")
    is_valid, message = test_python_syntax(original_code)
    if is_valid:
        print(f"‚úÖ {message}")
        return True
    else:
        print(f"‚ùå {message}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    fixed_code = apply_all_fixes(original_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
    is_valid, message = test_python_syntax(fixed_code)
    if is_valid:
        print(f"‚úÖ {message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        fixed_filename = filename.replace('.py', '_FIXED.py')
        with open(fixed_filename, 'w', encoding='utf-8') as f:
            f.write(fixed_code)
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {fixed_filename}")
        return True
    else:
        print(f"‚ùå {message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        debug_filename = filename.replace('.py', '_DEBUG.py')
        with open(debug_filename, 'w', encoding='utf-8') as f:
            f.write(fixed_code)
        print(f"üîç –ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {debug_filename} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return False

def test_new_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–î–ê")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        result = subprocess.run([
            'curl', '-s', '-X', 'POST', 
            'http://localhost:5000/api/projects/907/export',
            '-H', 'Content-Type: application/json'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            try:
                data = json.loads(result.stdout)
                if 'code' in data:
                    code = data['code']
                    print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    issues = []
                    if 'callback_data=""' in code:
                        issues.append("–ü—É—Å—Ç—ã–µ callback_data")
                    if 'resize_keyboard=true' in code or 'resize_keyboard=false' in code:
                        issues.append("JavaScript boolean values")
                    if 'Command(")"' in code:
                        issues.append("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ–º–∞–Ω–¥")
                    
                    if issues:
                        print(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                        with open('generated_api_test.py', 'w', encoding='utf-8') as f:
                            f.write(code)
                        print("üìù –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ generated_api_test.py")
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        fixed_code = apply_all_fixes(code)
                        with open('generated_api_test_FIXED.py', 'w', encoding='utf-8') as f:
                            f.write(fixed_code)
                        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ generated_api_test_FIXED.py")
                        
                        return False
                    else:
                        print("‚úÖ –ö–æ–¥ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
                        return True
                else:
                    print("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'code'")
                    return False
            except json.JSONDecodeError:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                print(f"–û—Ç–≤–µ—Ç: {result.stdout}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç API –∑–∞–ø—Ä–æ—Å–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï INLINE –ö–ù–û–ü–û–ö")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    test_files = [
        'generated_test_fixed.py',
        'complex_test_bot_3.py',
        'simple_mixed_test_bot.py',
        'reply_keyboard_test_4.py'
    ]
    
    success_count = 0
    for filename in test_files:
        if fix_file(filename):
            success_count += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: {success_count}/{len(test_files)} —Ñ–∞–π–ª–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    api_works = test_new_generation()
    
    print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    if success_count == len(test_files) and api_works:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        print("‚úÖ API –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥")
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. Inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("2. –ö–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º")
        print("3. Boolean –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç Python True/False")
        print("4. –ü—É—Å—Ç—ã–µ callback_data –∏—Å–∫–ª—é—á–µ–Ω—ã")
    else:
        print("‚ùå –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è")
        print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {success_count}/{len(test_files)}")
        print(f"   API —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if api_works else '‚ùå'}")
    
    return success_count == len(test_files) and api_works

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)