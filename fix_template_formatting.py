#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
–£–±–∏—Ä–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏ markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""
import requests
import json
import re

def clean_html_tags(text):
    """–£–±–∏—Ä–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ó–∞–º–µ–Ω—è–µ–º HTML —Ç–µ–≥–∏ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = re.sub(r'<b>(.*?)</b>', r'\1', text)
    text = re.sub(r'<i>(.*?)</i>', r'\1', text)
    text = re.sub(r'<u>(.*?)</u>', r'\1', text)
    text = re.sub(r'<code>(.*?)</code>', r'\1', text)
    text = re.sub(r'<pre>(.*?)</pre>', r'\1', text)
    return text

def clean_markdown_syntax(text):
    """–£–±–∏—Ä–∞–µ—Ç markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –ó–∞–º–µ–Ω—è–µ–º markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'\*(.*?)\*', r'\1', text)
    text = re.sub(r'__(.*?)__', r'\1', text)
    text = re.sub(r'_(.*?)_', r'\1', text)
    text = re.sub(r'`(.*?)`', r'\1', text)
    text = re.sub(r'~~(.*?)~~', r'\1', text)
    text = re.sub(r'> (.*)', r'\1', text)
    text = re.sub(r'# (.*)', r'\1', text)
    text = re.sub(r'## (.*)', r'\1', text)
    return text

def fix_template_formatting():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–∞—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        response = requests.get('http://localhost:5000/api/templates')
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return
        
        templates = response.json()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        
        updated_count = 0
        
        for template in templates:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            needs_update = False
            template_data = template.get('data', {})
            nodes = template_data.get('nodes', [])
            
            for node in nodes:
                node_data = node.get('data', {})
                message_text = node_data.get('messageText', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML —Ç–µ–≥–æ–≤ –∏–ª–∏ markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                if ('<b>' in message_text or '<i>' in message_text or 
                    '**' in message_text or '__' in message_text):
                    needs_update = True
                    
                    # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                    cleaned_text = clean_html_tags(message_text)
                    cleaned_text = clean_markdown_syntax(cleaned_text)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    node_data['messageText'] = cleaned_text
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    node_data['formatMode'] = 'none'
                    if 'markdown' in node_data:
                        del node_data['markdown']
                    
                    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —É–∑–µ–ª {node.get('id')} –≤ —à–∞–±–ª–æ–Ω–µ {template.get('name')}")
            
            # –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if needs_update:
                update_response = requests.put(
                    f'http://localhost:5000/api/templates/{template["id"]}',
                    json={
                        'name': template['name'],
                        'description': template['description'],
                        'category': template['category'],
                        'data': template_data
                    }
                )
                
                if update_response.status_code == 200:
                    updated_count += 1
                    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω: {template['name']}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ {template['name']}: {update_response.status_code}")
        
        print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —à–∞–±–ª–æ–Ω–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    fix_template_formatting()