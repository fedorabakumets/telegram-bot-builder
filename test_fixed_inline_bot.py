"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return user_id in user_data


@dp.message(CommandStart())
async def start_handler(message: types.Message):

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç-–±–æ—Ç!

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /start (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /help (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: '—Å—Ç–∞—Ä—Ç', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞' (–¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏)"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data="test-msg"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

@dp.message(Command("help"))
async def help_handler(message: types.Message):

    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏:

üîπ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
üîπ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
üîπ –°–∏–Ω–æ–Ω–∏–º—ã:
   ‚Ä¢ '—Å—Ç–∞—Ä—Ç' = /start
   ‚Ä¢ '–ø–æ–º–æ—â—å' = /help
   ‚Ä¢ '—Å–ø—Ä–∞–≤–∫–∞' = /help

üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
2. –°–∏–Ω–æ–Ω–∏–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
3. –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥
@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await start_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "–ø–æ–º–æ—â—å")
async def help_synonym_–ø–æ–º–æ—â—å_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
    await help_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")
async def help_synonym_—Å–ø—Ä–∞–≤–∫–∞_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
    await help_handler(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "help-cmd")
async def handle_callback_help_cmd(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏:

üîπ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
üîπ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
üîπ –°–∏–Ω–æ–Ω–∏–º—ã:
   ‚Ä¢ '—Å—Ç–∞—Ä—Ç' = /start
   ‚Ä¢ '–ø–æ–º–æ—â—å' = /help
   ‚Ä¢ '—Å–ø—Ä–∞–≤–∫–∞' = /help

üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
2. –°–∏–Ω–æ–Ω–∏–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
3. –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "menu-msg")
async def handle_callback_menu_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üì± –ú–µ–Ω—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:

üß™ –ö–æ–º–∞–Ω–¥—ã - —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥ /start –∏ /help
üéØ –°–∏–Ω–æ–Ω–∏–º—ã - —Ç–µ—Å—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤ '—Å—Ç–∞—Ä—Ç', '–ø–æ–º–æ—â—å'
üìã –ö–Ω–æ–ø–∫–∏ - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üß™ –ö–æ–º–∞–Ω–¥—ã", callback_data="test-commands"))
    builder.add(InlineKeyboardButton(text="üéØ –°–∏–Ω–æ–Ω–∏–º—ã", callback_data="test-synonyms"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "test-msg")
async def handle_callback_test_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:

‚úÖ –ß–¢–û –î–û–õ–ñ–ù–û –†–ê–ë–û–¢–ê–¢–¨:
1. –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
2. –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
3. –°–∏–Ω–æ–Ω–∏–º '—Å—Ç–∞—Ä—Ç' –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
4. –°–∏–Ω–æ–Ω–∏–º '–ø–æ–º–æ—â—å' –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
5. –°–∏–Ω–æ–Ω–∏–º '—Å–ø—Ä–∞–≤–∫–∞' –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
6. –í—Å–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç

üéØ –ö–ê–ö –¢–ï–°–¢–ò–†–û–í–ê–¢–¨:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /help –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–∞—Ä—Ç' –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instructions"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "start-node")
async def handle_callback_start_node(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç-–±–æ—Ç!

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /start (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
‚Ä¢ –ö–æ–º–∞–Ω–¥—É /help (–¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: '—Å—Ç–∞—Ä—Ç', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞' (–¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏)"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data="test-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "commands-msg")
async def handle_callback_commands_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:

üî∏ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏)
üî∏ /help - –°–ø—Ä–∞–≤–∫–∞ (—Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏)

üî∏ –°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥:
   ‚Ä¢ '—Å—Ç–∞—Ä—Ç' ‚Üí /start
   ‚Ä¢ '–ø–æ–º–æ—â—å' ‚Üí /help  
   ‚Ä¢ '—Å–ø—Ä–∞–≤–∫–∞' ‚Üí /help

üí° –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏!"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "test-commands")
async def handle_callback_test_commands(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥:

–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏:

1Ô∏è‚É£ /start
2Ô∏è‚É£ /help

–ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "test-synonyms")
async def handle_callback_test_synonyms(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üéØ –¢–µ—Å—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤:

–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:

1Ô∏è‚É£ —Å—Ç–∞—Ä—Ç
2Ô∏è‚É£ –ø–æ–º–æ—â—å
3Ô∏è‚É£ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∂–¥—ã–π —Å–∏–Ω–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "instructions")
async def handle_callback_instructions(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

üîß –ù–ê–°–¢–†–û–ô–ö–ê:
1. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞

üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏  
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å—Ç–∞—Ä—Ç' - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ –∏ —É /start
4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø–æ–º–æ—â—å' - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ –∏ —É /help
5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ '—Å–ø—Ä–∞–≤–∫–∞' - –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ –∏ —É /help
6. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª—é–±—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥

‚úÖ –£–°–ü–ï–•: –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!
‚ùå –û–®–ò–ë–ö–ê: –ï—Å–ª–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç–∞–º", callback_data="test-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏:")
    print("   ‚Ä¢ /start –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ /help –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ '—Å—Ç–∞—Ä—Ç' –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ '–ø–æ–º–æ—â—å' –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏")
    print("   ‚Ä¢ '—Å–ø—Ä–∞–≤–∫–∞' –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())