"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, URLInputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π
BOT_TOKEN = "YOUR_TOKEN_HERE"

if BOT_TOKEN == "YOUR_TOKEN_HERE":
    print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def is_local_file(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    return url.startswith("/uploads/") or url.startswith("uploads/")

def get_local_file_path(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL"""
    if url.startswith("/"):
        return url[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
    return url

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    text = "ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="pdf_doc"))
    builder.add(InlineKeyboardButton(text="üìã –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="txt_doc"))
    builder.add(InlineKeyboardButton(text="üìä Excel —Ñ–∞–π–ª", callback_data="xlsx_doc"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "pdf_doc")
async def send_pdf_document(callback_query: types.CallbackQuery):
    await callback_query.answer()
    logger.info(f"–ó–∞–ø—Ä–æ—Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    
    try:
        document_url = "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
        document_name = "test-document.pdf"
        caption = "üìÑ –¢–µ—Å—Ç–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF —Ñ–∞–π–ª–∞."
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {document_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if is_local_file(document_url):
            logger.info("–≠—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
            file_path = get_local_file_path(document_url)
            if os.path.exists(file_path):
                document_file = FSInputFile(file_path, filename=document_name)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
            else:
                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        else:
            logger.info("–≠—Ç–æ –≤–Ω–µ—à–Ω–∏–π URL —Ñ–∞–π–ª")
            document_file = URLInputFile(document_url, filename=document_name)
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URLInputFile –¥–ª—è URL: {document_url}")
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        
        await callback_query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        result = await bot.send_document(
            chat_id=callback_query.from_user.id,
            document=document_file,
            caption=caption,
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! Message ID: {result.message_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –¥–æ–∫—É–º–µ–Ω—Ç\n\n–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )

@dp.callback_query(lambda c: c.data == "txt_doc")
async def send_txt_document(callback_query: types.CallbackQuery):
    await callback_query.answer()
    logger.info(f"–ó–∞–ø—Ä–æ—Å TXT –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        file_content = """–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.

–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:
- –°—Ç—Ä–æ–∫–∞ 1
- –°—Ç—Ä–æ–∫–∞ 2
- –°—Ç—Ä–æ–∫–∞ 3

–§–∞–π–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Telegram –±–æ—Ç–µ.
"""
        
        file_path = "temp_test.txt"
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(file_content)
        
        caption = "üìã –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ TXT —Ñ–∞–π–ª–∞."
        
        document_file = FSInputFile(file_path, filename="test-file.txt")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        
        await callback_query.message.delete()
        
        result = await bot.send_document(
            chat_id=callback_query.from_user.id,
            document=document_file,
            caption=caption,
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ TXT –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! Message ID: {result.message_id}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TXT –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TXT –¥–æ–∫—É–º–µ–Ω—Ç\n\n–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )

@dp.callback_query(lambda c: c.data == "xlsx_doc")
async def send_xlsx_document(callback_query: types.CallbackQuery):
    await callback_query.answer()
    logger.info(f"–ó–∞–ø—Ä–æ—Å XLSX –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    
    try:
        # URL —Ä–µ–∞–ª—å–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞
        document_url = "https://file-examples.com/storage/fe68c0a3c44ad8d98b29c39/2017/10/file_example_XLS_10.xls"
        document_name = "test-spreadsheet.xls"
        caption = "üìä –¢–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ XLS —Ñ–∞–π–ª–∞."
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel: {document_url}")
        
        document_file = URLInputFile(document_url, filename=document_name)
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        
        await callback_query.message.delete()
        
        result = await bot.send_document(
            chat_id=callback_query.from_user.id,
            document=document_file,
            caption=caption,
            reply_markup=keyboard
        )
        
        logger.info(f"‚úÖ Excel –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! Message ID: {result.message_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Excel –¥–æ–∫—É–º–µ–Ω—Ç\n\n–û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]])
        )

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    text = "ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="pdf_doc"))
    builder.add(InlineKeyboardButton(text="üìã –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="txt_doc"))
    builder.add(InlineKeyboardButton(text="üìä Excel —Ñ–∞–π–ª", callback_data="xlsx_doc"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")