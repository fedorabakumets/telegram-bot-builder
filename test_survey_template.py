#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import requests
import json
import sys

def test_survey_template():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '–û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'...")
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        response = requests.get('http://localhost:5000/api/templates')
        if response.status_code == 200:
            templates = response.json()
            survey_template = None
            
            for template in templates:
                if template['name'] == '–û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                    survey_template = template
                    break
            
            if not survey_template:
                print("‚ùå –®–∞–±–ª–æ–Ω '–û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω (ID: {survey_template['id']})")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {survey_template['description']}")
            print(f"üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {survey_template['category']}")
            print(f"üîß –°–ª–æ–∂–Ω–æ—Å—Ç—å: {survey_template['difficulty']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            bot_data = survey_template['data']
            nodes = bot_data.get('nodes', [])
            connections = bot_data.get('connections', [])
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
            print(f"‚Ä¢ –£–∑–ª–æ–≤: {len(nodes)}")
            print(f"‚Ä¢ –°–≤—è–∑–µ–π: {len(connections)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∑–ª—ã
            node_types = {}
            for node in nodes:
                node_type = node.get('type', 'unknown')
                node_types[node_type] = node_types.get(node_type, 0) + 1
            
            print(f"\nüìã –¢–∏–ø—ã —É–∑–ª–æ–≤:")
            for node_type, count in node_types.items():
                print(f"‚Ä¢ {node_type}: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–∑–ª–∞ user-input
            user_input_node = None
            for node in nodes:
                if node.get('type') == 'user-input':
                    user_input_node = node
                    break
            
            if user_input_node:
                print(f"\n‚úÖ –£–∑–µ–ª —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω (ID: {user_input_node['id']})")
                input_data = user_input_node.get('data', {})
                print(f"‚Ä¢ –¢–∏–ø –≤–≤–æ–¥–∞: {input_data.get('inputType', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {input_data.get('inputVariable', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
                print(f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: {input_data.get('saveToDatabase', False)}")
                print(f"‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {input_data.get('minLength', 0)}")
                print(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {input_data.get('maxLength', 0)}")
                print(f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: {input_data.get('inputTimeout', 0)} —Å–µ–∫")
            else:
                print("‚ùå –£–∑–µ–ª —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
            project_data = {
                "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –æ–ø—Ä–æ—Å–∞",
                "description": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "data": bot_data
            }
            
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            create_response = requests.post('http://localhost:5000/api/projects', json=project_data)
            if create_response.status_code == 201:
                project = create_response.json()
                project_id = project['id']
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω (ID: {project_id})")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
                if export_response.status_code == 200:
                    code_data = export_response.json()
                    python_code = code_data.get('code', '')
                    
                    print(f"‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ({len(python_code)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–¥–µ
                    required_elements = [
                        'async def start_handler',
                        'async def handle_user_input',
                        'waiting_for_input',
                        'discovery_source',
                        'save_to_database',
                        'min_length',
                        'max_length',
                        'handle_callback_',
                        'InlineKeyboardMarkup',
                        'InlineKeyboardButton'
                    ]
                    
                    missing_elements = []
                    for element in required_elements:
                        if element not in python_code:
                            missing_elements.append(element)
                    
                    if missing_elements:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–¥–µ: {', '.join(missing_elements)}")
                    else:
                        print(f"‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–¥–µ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python
                    try:
                        compile(python_code, '<string>', 'exec')
                        print(f"‚úÖ –ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    except SyntaxError as e:
                        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ: {e}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    with open('generated_survey_bot.py', 'w', encoding='utf-8') as f:
                        f.write(python_code)
                    print(f"üìÅ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: generated_survey_bot.py")
                    
                    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
                    requests.delete(f'http://localhost:5000/api/projects/{project_id}')
                    print(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω")
                    
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: HTTP {export_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: HTTP {create_response.status_code}")
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: HTTP {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def analyze_generated_code():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
    
    try:
        with open('generated_survey_bot.py', 'r', encoding='utf-8') as f:
            code = f.read()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        lines = code.split('\n')
        
        handlers = [line for line in lines if 'async def' in line and 'handler' in line]
        callbacks = [line for line in lines if 'handle_callback_' in line and 'async def' in line]
        user_input_handlers = [line for line in lines if 'handle_user_input' in line and 'async def' in line]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞:")
        print(f"‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(lines)}")
        print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handlers)}")
        print(f"‚Ä¢ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(callbacks)}")
        print(f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞: {len(user_input_handlers)}")
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
        for handler in handlers:
            print(f"‚Ä¢ {handler.strip()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞
        if 'discovery_source' in code:
            print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è discovery_source –Ω–∞–π–¥–µ–Ω–∞")
        if 'waiting_for_input' in code:
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–∞")
        if 'save_to_database' in code:
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –Ω–∞–π–¥–µ–Ω–æ")
        if 'min_length' in code and 'max_length' in code:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –Ω–∞–π–¥–µ–Ω–∞")
        if 'handle_user_input' in code:
            print(f"‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω")
        if 'email_pattern' in code:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–∞–π–¥–µ–Ω–∞")
        if 'phone_pattern' in code:
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞")
        
        return True
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª generated_survey_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –æ–ø—Ä–æ—Å–∞...")
    
    success = test_survey_template()
    if success:
        analyze_generated_code()
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)