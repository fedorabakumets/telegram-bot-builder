#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É–∑–ª–∞–º–∏
"""

import re
import json
from typing import Dict, List, Set

def load_bot_code(filename: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–¥ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    with open(filename, 'r', encoding='utf-8') as f:
        return f.read()

def analyze_commands(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –∫–æ–¥–µ"""
    results = {
        'total_commands': 0,
        'command_handlers': [],
        'start_handler': False,
        'callback_handlers': 0,
        'synonym_handlers': 0
    }
    
    # –ò—â–µ–º command handlers
    command_patterns = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', code)
    results['command_handlers'] = command_patterns
    results['total_commands'] = len(command_patterns)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º start handler
    start_pattern = re.search(r'@dp\.message\(CommandStart\(\)\)', code)
    results['start_handler'] = bool(start_pattern)
    
    # –ò—â–µ–º callback handlers
    callback_patterns = re.findall(r'@dp\.callback_query\(', code)
    results['callback_handlers'] = len(callback_patterns)
    
    # –ò—â–µ–º synonym handlers
    synonym_patterns = re.findall(r'_synonym_', code)
    results['synonym_handlers'] = len(synonym_patterns)
    
    return results

def analyze_keyboards(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–æ–¥–µ"""
    results = {
        'inline_keyboards': 0,
        'reply_keyboards': 0,
        'inline_buttons': 0,
        'reply_buttons': 0,
        'url_buttons': 0,
        'callback_buttons': 0,
        'proper_inline_attachment': 0,
        'proper_reply_attachment': 0
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    inline_keyboard_pattern = r'builder = InlineKeyboardBuilder\(\)(.*?)keyboard = builder\.as_markup\(\)(.*?)await message\.answer\([^,]+, reply_markup=keyboard\)'
    inline_matches = re.findall(inline_keyboard_pattern, code, re.DOTALL)
    results['inline_keyboards'] = len(inline_matches)
    results['proper_inline_attachment'] = len(inline_matches)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_keyboard_pattern = r'builder = ReplyKeyboardBuilder\(\)(.*?)keyboard = builder\.as_markup\([^)]*\)(.*?)await message\.answer\([^,]+, reply_markup=keyboard\)'
    reply_matches = re.findall(reply_keyboard_pattern, code, re.DOTALL)
    results['reply_keyboards'] = len(reply_matches)
    results['proper_reply_attachment'] = len(reply_matches)
    
    # –°—á–∏—Ç–∞–µ–º –∫–Ω–æ–ø–∫–∏
    inline_button_patterns = re.findall(r'InlineKeyboardButton\(', code)
    results['inline_buttons'] = len(inline_button_patterns)
    
    reply_button_patterns = re.findall(r'KeyboardButton\(', code)
    results['reply_buttons'] = len(reply_button_patterns)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã inline –∫–Ω–æ–ø–æ–∫
    url_button_patterns = re.findall(r'InlineKeyboardButton\([^)]*url=', code)
    results['url_buttons'] = len(url_button_patterns)
    
    callback_button_patterns = re.findall(r'InlineKeyboardButton\([^)]*callback_data=', code)
    results['callback_buttons'] = len(callback_button_patterns)
    
    return results

def analyze_message_handlers(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    results = {
        'total_handlers': 0,
        'command_handlers': 0,
        'callback_handlers': 0,
        'message_answer_calls': 0,
        'duplicate_handlers': [],
        'security_checks': 0
    }
    
    # –°—á–∏—Ç–∞–µ–º –≤—Å–µ async def —Ñ—É–Ω–∫—Ü–∏–∏
    handler_patterns = re.findall(r'async def (\w+)\(', code)
    results['total_handlers'] = len(handler_patterns)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    handler_counts = {}
    for handler in handler_patterns:
        handler_counts[handler] = handler_counts.get(handler, 0) + 1
    
    results['duplicate_handlers'] = [name for name, count in handler_counts.items() if count > 1]
    
    # –°—á–∏—Ç–∞–µ–º message.answer() –≤—ã–∑–æ–≤—ã
    answer_patterns = re.findall(r'await message\.answer\(', code)
    results['message_answer_calls'] = len(answer_patterns)
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_patterns = re.findall(r'(is_admin|is_private_chat|check_auth)', code)
    results['security_checks'] = len(security_patterns)
    
    return results

def analyze_media_support(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–µ–¥–∏–∞"""
    results = {
        'photo_handlers': 0,
        'video_handlers': 0,
        'audio_handlers': 0,
        'document_handlers': 0,
        'media_send_calls': 0
    }
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ–¥–∏–∞
    photo_patterns = re.findall(r'(photo|image)', code.lower())
    results['photo_handlers'] = len(photo_patterns)
    
    video_patterns = re.findall(r'video', code.lower())
    results['video_handlers'] = len(video_patterns)
    
    audio_patterns = re.findall(r'audio', code.lower())
    results['audio_handlers'] = len(audio_patterns)
    
    # –ò—â–µ–º –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    media_send_patterns = re.findall(r'send_(photo|video|audio|document)', code)
    results['media_send_calls'] = len(media_send_patterns)
    
    return results

def analyze_input_handling(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    results = {
        'input_handlers': 0,
        'validation_checks': 0,
        'user_data_usage': 0,
        'form_handlers': 0
    }
    
    # –ò—â–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user_data_patterns = re.findall(r'user_data\[', code)
    results['user_data_usage'] = len(user_data_patterns)
    
    # –ò—â–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    validation_patterns = re.findall(r'(validation|validate|required|min:|max:)', code)
    results['validation_checks'] = len(validation_patterns)
    
    return results

def check_code_quality(code: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞"""
    results = {
        'imports_present': False,
        'bot_token_placeholder': False,
        'main_function': False,
        'error_handling': 0,
        'comments_count': 0,
        'docstrings_count': 0,
        'code_length': len(code),
        'functions_count': 0
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    results['imports_present'] = 'from aiogram import' in code
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    results['bot_token_placeholder'] = 'YOUR_BOT_TOKEN_HERE' in code
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º main —Ñ—É–Ω–∫—Ü–∏—é
    results['main_function'] = 'async def main():' in code
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
    error_patterns = re.findall(r'(try:|except|finally:|raise)', code)
    results['error_handling'] = len(error_patterns)
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    comment_patterns = re.findall(r'#[^\n]*', code)
    results['comments_count'] = len(comment_patterns)
    
    # –°—á–∏—Ç–∞–µ–º docstrings
    docstring_patterns = re.findall(r'"""[^"]*"""', code, re.DOTALL)
    results['docstrings_count'] = len(docstring_patterns)
    
    # –°—á–∏—Ç–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    function_patterns = re.findall(r'def \w+\(', code)
    results['functions_count'] = len(function_patterns)
    
    return results

def run_comprehensive_test(filename: str) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –°–õ–û–ñ–ù–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥
    try:
        code = load_bot_code(filename)
        print(f"‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    print("\nüìã –ê–ù–ê–õ–ò–ó –ö–û–ú–ê–ù–î:")
    print("-" * 20)
    commands = analyze_commands(code)
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {commands['total_commands']}")
    print(f"  ‚Ä¢ Start handler: {'‚úÖ' if commands['start_handler'] else '‚ùå'}")
    print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: {', '.join(commands['command_handlers'])}")
    print(f"  ‚Ä¢ Callback handlers: {commands['callback_handlers']}")
    print(f"  ‚Ä¢ Synonym handlers: {commands['synonym_handlers']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    print("\n‚å®Ô∏è –ê–ù–ê–õ–ò–ó –ö–õ–ê–í–ò–ê–¢–£–†:")
    print("-" * 20)
    keyboards = analyze_keyboards(code)
    print(f"  ‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboards['inline_keyboards']}")
    print(f"  ‚Ä¢ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboards['reply_keyboards']}")
    print(f"  ‚Ä¢ Inline –∫–Ω–æ–ø–∫–∏: {keyboards['inline_buttons']}")
    print(f"  ‚Ä¢ Reply –∫–Ω–æ–ø–∫–∏: {keyboards['reply_buttons']}")
    print(f"  ‚Ä¢ URL –∫–Ω–æ–ø–∫–∏: {keyboards['url_buttons']}")
    print(f"  ‚Ä¢ Callback –∫–Ω–æ–ø–∫–∏: {keyboards['callback_buttons']}")
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ inline: {keyboards['proper_inline_attachment']}")
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ reply: {keyboards['proper_reply_attachment']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("\nüîß –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    print("-" * 20)
    handlers = analyze_message_handlers(code)
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {handlers['total_handlers']}")
    print(f"  ‚Ä¢ –í—ã–∑–æ–≤–æ–≤ message.answer(): {handlers['message_answer_calls']}")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {handlers['security_checks']}")
    if handlers['duplicate_handlers']:
        print(f"  ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {', '.join(handlers['duplicate_handlers'])}")
    else:
        print(f"  ‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ—Ç")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞
    print("\nüñºÔ∏è –ê–ù–ê–õ–ò–ó –ú–ï–î–ò–ê:")
    print("-" * 20)
    media = analyze_media_support(code)
    print(f"  ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ç–æ: {media['photo_handlers']}")
    print(f"  ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∏–¥–µ–æ: {media['video_handlers']}")
    print(f"  ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞—É–¥–∏–æ: {media['audio_handlers']}")
    print(f"  ‚Ä¢ –ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞: {media['media_send_calls']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥
    print("\n‚úçÔ∏è –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –í–í–û–î–ê:")
    print("-" * 20)
    input_data = analyze_input_handling(code)
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ user_data: {input_data['user_data_usage']}")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {input_data['validation_checks']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
    print("\n‚≠ê –ö–ê–ß–ï–°–¢–í–û –ö–û–î–ê:")
    print("-" * 20)
    quality = check_code_quality(code)
    print(f"  ‚Ä¢ –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {'‚úÖ' if quality['imports_present'] else '‚ùå'}")
    print(f"  ‚Ä¢ Placeholder –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {'‚úÖ' if quality['bot_token_placeholder'] else '‚ùå'}")
    print(f"  ‚Ä¢ Main —Ñ—É–Ω–∫—Ü–∏—è: {'‚úÖ' if quality['main_function'] else '‚ùå'}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {quality['error_handling']}")
    print(f"  ‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {quality['comments_count']}")
    print(f"  ‚Ä¢ Docstrings: {quality['docstrings_count']}")
    print(f"  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: {quality['functions_count']}")
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–¥–∞: {quality['code_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    print("\nüîé –ü–†–û–í–ï–†–ö–ê –ü–†–û–ë–õ–ï–ú:")
    print("-" * 20)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º inline –∫–Ω–æ–ø–∫–∏
    inline_issue = False
    for cmd in commands['command_handlers']:
        cmd_pattern = f'@dp\\.message\\(Command\\("{cmd}"\\)\\)(.*?)(?=@|\\Z)'
        cmd_match = re.search(cmd_pattern, code, re.DOTALL)
        if cmd_match:
            cmd_code = cmd_match.group(1)
            answer_count = cmd_code.count('message.answer')
            if answer_count > 1:
                print(f"  ‚ùå –ö–æ–º–∞–Ω–¥–∞ /{cmd}: {answer_count} –≤—ã–∑–æ–≤–æ–≤ message.answer()")
                inline_issue = True
    
    if not inline_issue:
        print("  ‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    separate_handlers = re.findall(r'async def handle_[^(]+\(message: types\.Message\)', code)
    if separate_handlers:
        print(f"  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(separate_handlers)}")
        for handler in separate_handlers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"    - {handler}")
    else:
        print("  ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("-" * 20)
    
    score = 0
    max_score = 100
    
    # –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (40 –±–∞–ª–ª–æ–≤)
    if commands['start_handler']: score += 5
    score += min(commands['total_commands'] * 3, 15)  # –î–æ 15 –∑–∞ –∫–æ–º–∞–Ω–¥—ã
    score += min(commands['callback_handlers'] * 2, 20)  # –î–æ 20 –∑–∞ callback
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (30 –±–∞–ª–ª–æ–≤)
    score += min(keyboards['inline_keyboards'] * 3, 15)  # –î–æ 15 –∑–∞ inline
    score += min(keyboards['reply_keyboards'] * 3, 10)   # –î–æ 10 –∑–∞ reply
    score += 5 if keyboards['proper_inline_attachment'] > 0 else 0  # 5 –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ (30 –±–∞–ª–ª–æ–≤)
    if quality['imports_present']: score += 5
    if quality['main_function']: score += 5
    if not handlers['duplicate_handlers']: score += 10
    if not inline_issue: score += 10
    
    print(f"  üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {score}/{max_score} ({score/max_score*100:.1f}%)")
    
    if score >= 80:
        print("  üåü –û–¢–õ–ò–ß–ù–û! –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    elif score >= 60:
        print("  üëç –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    elif score >= 40:
        print("  ‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("  ‚ùå –ü–õ–û–•–û! –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    filename = "complex_test_bot_3.py"
    
    try:
        run_comprehensive_test(filename)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")

if __name__ == "__main__":
    main()