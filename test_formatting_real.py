#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
"""

import json
import requests

def create_formatting_test():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*\n`–ö–æ–¥`\n__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-html",
                            "text": "HTML —Ç–µ—Å—Ç",
                            "action": "goto",
                            "target": "html-test"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "html-test",
                "type": "message",
                "data": {
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>\n<code>–ö–æ–¥</code>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>",
                    "keyboardType": "inline",
                    "formatMode": "html",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "–ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 100}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "html-test"},
            {"id": "conn2", "from": "html-test", "to": "start-1"}
        ]
    }
    
    return bot_data

def test_real_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("üß™ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    bot_data = create_formatting_test()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('real_formatting_test.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'real_formatting_test.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º start_handler
                analyze_start_handler(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def analyze_start_handler(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º start_handler –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ"""
    print("\nüîç –ê–ù–ê–õ–ò–ó START_HANDLER:")
    print("-" * 30)
    
    lines = code.split('\n')
    in_start_handler = False
    start_handler_lines = []
    
    for line in lines:
        if 'async def start_handler' in line:
            in_start_handler = True
            start_handler_lines.append(line)
        elif in_start_handler and line.startswith('async def '):
            break
        elif in_start_handler:
            start_handler_lines.append(line)
    
    print("üìù START HANDLER –ö–û–î:")
    for i, line in enumerate(start_handler_lines):
        print(f"  {i+1:2d}: {line}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ parse_mode
    handler_code = '\n'.join(start_handler_lines)
    if 'parse_mode=ParseMode.MARKDOWN' in handler_code:
        print("\n‚úÖ parse_mode=ParseMode.MARKDOWN –Ω–∞–π–¥–µ–Ω –≤ start_handler")
    else:
        print("\n‚ùå parse_mode=ParseMode.MARKDOWN –ù–ï –Ω–∞–π–¥–µ–Ω –≤ start_handler")
    
    if 'parse_mode=ParseMode.HTML' in handler_code:
        print("‚úÖ parse_mode=ParseMode.HTML –Ω–∞–π–¥–µ–Ω –≤ start_handler")
    else:
        print("‚ùå parse_mode=ParseMode.HTML –ù–ï –Ω–∞–π–¥–µ–Ω –≤ start_handler")

if __name__ == "__main__":
    test_real_formatting()