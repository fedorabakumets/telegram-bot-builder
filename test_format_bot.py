"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –¢–µ—Å—Ç —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    text = """ü§ñ **–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂–∏—Ä–Ω—ã–º
*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–∫–ª–æ–Ω–Ω—ã–º  
`–ö–æ–¥` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º
__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º
~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–º

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫

> –¶–∏—Ç–∞—Ç–∞

–°–ø–∏—Å–æ–∫:
‚Ä¢ –ü—É–Ω–∫—Ç 1
‚Ä¢ **–ü—É–Ω–∫—Ç 2 –∂–∏—Ä–Ω—ã–π**
‚Ä¢ *–ü—É–Ω–∫—Ç 3 –∫—É—Ä—Å–∏–≤*

[–°—Å—ã–ª–∫–∞](https://telegram.org)"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="test_html"))
    builder.add(InlineKeyboardButton(text="üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="test_plain"))
    keyboard = builder.as_markup()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "test_html")
async def test_html_callback(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await callback_query.answer()
    
    text = """üåü <b>HTML –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –≤ HTML
<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i> –≤ HTML
<code>–ö–æ–¥</code> –≤ HTML  
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> –≤ HTML
<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> –≤ HTML

<pre>–ë–ª–æ–∫ –∫–æ–¥–∞
  —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏</pre>

<a href="https://telegram.org">–°—Å—ã–ª–∫–∞ –≤ HTML</a>"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ Markdown", callback_data="test_markdown"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query(lambda c: c.data == "test_markdown")
async def test_markdown_callback(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ Markdown"""
    await callback_query.answer()
    
    text = """ü§ñ **–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ Markdown**

**–ñ–∏—Ä–Ω—ã–π** –∏ *–∫—É—Ä—Å–∏–≤–Ω—ã–π* —Ç–µ–∫—Å—Ç
`–ö–æ–¥ –≤ —Å—Ç—Ä–æ–∫–µ`

```python
def hello():
    print("Hello World!")
```

**–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!**"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üåü HTML —Å–Ω–æ–≤–∞", callback_data="test_html"))
    builder.add(InlineKeyboardButton(text="üì± –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="test_plain"))
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "test_plain")
async def test_plain_callback(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback_query.answer()
    
    text = """–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å**
*–≠—Ç–æ —Ç–æ–∂–µ*
<b>–ò —ç—Ç–æ</b>

–ù–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è."""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º", callback_data="test_markdown"))
    keyboard = builder.as_markup()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode
    await callback_query.message.edit_text(text, reply_markup=keyboard)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())