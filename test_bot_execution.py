#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã inline –∫–Ω–æ–ø–æ–∫
"""

import requests
import json
import time

def test_bot_execution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    print("üöÄ –¢–ï–°–¢ –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê –° INLINE –ö–ù–û–ü–ö–ê–ú–ò")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–æ—Å—Ç–æ–π inline –∫–Ω–æ–ø–∫–æ–π
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üéâ –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-test",
                            "text": "üî• –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", 
                            "action": "goto",
                            "target": "XyZ987Test654Random"
                        }
                    ]
                }
            },
            {
                "id": "XyZ987Test654Random",
                "type": "message",
                "position": {"x": 300, "y": 100},
                "data": {
                    "messageText": "‚úÖ –û—Ç–ª–∏—á–Ω–æ! Inline –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    "keyboardType": "none",
                    "buttons": []
                }
            }
        ],
        "connections": []
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    print("1. üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...")
    project_response = requests.post('http://localhost:5000/api/projects', 
                                   json={
                                       "name": "–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫",
                                       "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã inline –∫–Ω–æ–ø–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ",
                                       "data": bot_data
                                   })
    
    if project_response.status_code != 201:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {project_response.status_code}")
        return False
    
    project_id = project_response.json()['id']
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    print("2. üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –±–æ—Ç–∞...")
    export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
    if export_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
        return False
    
    code = export_response.json()['code']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    with open('test_inline_bot.py', 'w', encoding='utf-8') as f:
        f.write(code)
    print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_inline_bot.py")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    print("3. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–∞...")
    checks = {
        "inline_button_created": 'InlineKeyboardButton(text="üî• –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="XyZ987Test654Random")' in code,
        "callback_handler_exists": '@dp.callback_query(lambda c: c.data == "XyZ987Test654Random")' in code,
        "message_sent_with_keyboard": 'await message.answer(text, reply_markup=keyboard)' in code,
        "callback_answered": 'await callback_query.answer()' in code,
        "syntax_valid": check_syntax(code)
    }
    
    for check, result in checks.items():
        print(f"  - {check}: {'‚úÖ' if result else '‚ùå'}")
    
    if all(checks.values()):
        print("\n‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò! –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —É @BotFather")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –≤ —Ñ–∞–π–ª–µ test_inline_bot.py")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python test_inline_bot.py")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram")
        print("5. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üî• –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞'")
        print("6. –î–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '‚úÖ –û—Ç–ª–∏—á–Ω–æ! Inline –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!'")
        
        return True
    else:
        print("\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–î–ï!")
        failed_checks = [k for k, v in checks.items() if not v]
        for check in failed_checks:
            print(f"  - {check}")
        return False

def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python"""
    try:
        compile(code, '<string>', 'exec')
        return True
    except SyntaxError as e:
        print(f"    –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def show_detailed_analysis():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã"""
    print("\nüî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
    print("-" * 30)
    
    print("–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Ç–µ—Å—Ç–∞—Ö:")
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ Inline –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data") 
    print("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´ –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    print("1. üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã–π)")
    print("2. üîí –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –≤ —á–∞—Ç–µ")
    print("3. üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º Telegram")
    print("4. üì± –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram")
    print("5. ‚ö° –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è –∏ –ø–æ—Ç–µ—Ä—è–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    print("6. üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –±–µ–∑ –ø—Ä–∞–≤")
    
    print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–°–¢–†–ê–ù–ï–ù–ò–Ø:")
    print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ")
    print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    print("4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    print("5. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_bot_execution()
    
    if success:
        print(f"\nüéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –≤ –∫–æ–¥–µ, –∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
    
    show_detailed_analysis()

if __name__ == "__main__":
    main()