"""
–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ #3 - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
import asyncpg
from datetime import datetime
import json

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8082906513:AAEkTEm-HYvpRkI8ZuPuWmx3f25zi5tm1OE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/bot_db")

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
db_pool = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ë–î)
user_data = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with db_pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registered_at TIMESTAMP DEFAULT NOW(),
                    last_interaction TIMESTAMP DEFAULT NOW(),
                    interaction_count INTEGER DEFAULT 0,
                    user_data JSONB DEFAULT '{}',
                    is_active BOOLEAN DEFAULT TRUE
                );
            """)
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
        db_pool = None

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bot_users (user_id, username, first_name, last_name)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    last_interaction = NOW(),
                    interaction_count = bot_users.interaction_count + 1
            """, user_id, username, first_name, last_name)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        return False

async def get_user_from_db(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return None
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM bot_users WHERE user_id = $1", user_id)
            if row:
                return dict(row)
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
        return None

async def update_user_data_in_db(user_id: int, data_key: str, data_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                UPDATE bot_users 
                SET user_data = user_data || $2::jsonb,
                    last_interaction = NOW()
                WHERE user_id = $1
            """, user_id, json.dumps({data_key: data_value}))
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if db_pool:
        user = await get_user_from_db(user_id)
        return user is not None
    return user_id in user_data

def is_local_file(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    return url.startswith("/uploads/") or url.startswith("uploads/")

def get_local_file_path(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL"""
    if url.startswith("/"):
        return url[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
    return url

def extract_coordinates_from_yandex(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ll=longitude,latitude
    match = re.search(r"ll=([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /longitude,latitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    return None, None

def extract_coordinates_from_google(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ Google Maps"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @latitude,longitude
    match = re.search(r"@([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(1)), float(match.group(2))  # lat, lon
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /latitude,longitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(1)), float(match.group(2))  # lat, lon
    return None, None

def extract_coordinates_from_2gis(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ 2–ì–ò–°"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö 2–ì–ò–°
    # –§–æ—Ä–º–∞—Ç: center/longitude,latitude
    match = re.search(r"center/([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    # –§–æ—Ä–º–∞—Ç: /longitude,latitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    return None, None

def generate_map_urls(latitude: float, longitude: float, title: str = "") -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""
    import urllib.parse
    
    encoded_title = urllib.parse.quote(title) if title else ""
    
    return {
        "yandex": f"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15&l=map&pt={longitude},{latitude}",
        "google": f"https://maps.google.com/?q={latitude},{longitude}",
        "2gis": f"https://2gis.ru/geo/{longitude},{latitude}",
        "openstreetmap": f"https://www.openstreetmap.org/?mlat={latitude}&mlon={longitude}&zoom=15"
    }


@dp.message(CommandStart())
async def start_handler(message: types.Message):

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if not saved_to_db:
        user_data[user_id] = {
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "registered_at": message.date
        }
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    text = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏!

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é - —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="question-1"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫

@dp.callback_query(lambda c: c.data == "question-1")
async def handle_callback_question_1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.delete()
    
    text = "üéØ –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üå± –ù–æ–≤–∏—á–æ–∫", callback_data="response_question-1_0"))
    builder.add(InlineKeyboardButton(text="‚ö° –°—Ä–µ–¥–Ω–∏–π", callback_data="response_question-1_1"))
    builder.add(InlineKeyboardButton(text="üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="response_question-1_2"))
    builder.add(InlineKeyboardButton(text="üéì –≠–∫—Å–ø–µ—Ä—Ç", callback_data="response_question-1_3"))
    keyboard = builder.as_markup()
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if callback_query.from_user.id not in user_data:
        user_data[callback_query.from_user.id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    user_data[callback_query.from_user.id]["button_response_config"] = {
        "node_id": "question-1",
        "variable": "programming_level",
        "save_to_database": True,
        "success_message": "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω.",
        "allow_multiple": False,
        "options": [
            {"index": 0, "text": "üå± –ù–æ–≤–∏—á–æ–∫", "value": "beginner"},
            {"index": 1, "text": "‚ö° –°—Ä–µ–¥–Ω–∏–π", "value": "intermediate"},
            {"index": 2, "text": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "value": "advanced"},
            {"index": 3, "text": "üéì –≠–∫—Å–ø–µ—Ä—Ç", "value": "expert"},
        ],
        "selected": []
    }

@dp.callback_query(lambda c: c.data == "start-1")
async def handle_callback_start_1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏!

–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é - —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="question-1"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞

@dp.callback_query(F.data == "response_question-1_0")
async def handle_response_question-1_0(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "beginner"
    selected_text = "üå± –ù–æ–≤–∏—á–æ–∫"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-1_1")
async def handle_response_question-1_1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "intermediate"
    selected_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-1_2")
async def handle_response_question-1_2(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "advanced"
    selected_text = "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-1_3")
async def handle_response_question-1_3(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "expert"
    selected_text = "üéì –≠–∫—Å–ø–µ—Ä—Ç"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_0")
async def handle_response_question-2_0(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "python"
    selected_text = "üêç Python"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_1")
async def handle_response_question-2_1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "javascript"
    selected_text = "‚ö° JavaScript"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_2")
async def handle_response_question-2_2(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "java"
    selected_text = "‚òï Java"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_3")
async def handle_response_question-2_3(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "typescript"
    selected_text = "üî∑ TypeScript"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_4")
async def handle_response_question-2_4(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "rust"
    selected_text = "ü¶Ä Rust"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "response_question-2_5")
async def handle_response_question-2_5(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    selected_value = "cpp"
    selected_text = "‚öôÔ∏è C++"
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if config.get("allow_multiple"):
        if selected_value not in config["selected"]:
            config["selected"].append({"text": selected_text, "value": selected_value})
            await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")
        else:
            config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]
            await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    variable_name = config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": selected_value,
        "text": selected_text,
        "type": "button_choice",
        "timestamp": timestamp,
        "nodeId": node_id,
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
    await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")

@dp.callback_query(F.data == "skip_question-2")
async def handle_skip_question-2(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    await callback_query.message.edit_text("‚è≠Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
    del user_data[user_id]["button_response_config"]
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç")


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(F.text)
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data or "waiting_for_input" not in user_data[user_id]:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥
    
    input_config = user_data[user_id]["waiting_for_input"]
    user_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–ø—É—Å–∫–∞
    if input_config.get("allow_skip") and user_text == "/skip":
        await message.answer("‚è≠Ô∏è –í–≤–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω")
        del user_data[user_id]["waiting_for_input"]
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    min_length = input_config.get("min_length", 0)
    max_length = input_config.get("max_length", 0)
    
    if min_length > 0 and len(user_text) < min_length:
        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")
        return
    
    if max_length > 0 and len(user_text) > max_length:
        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    input_type = input_config.get("type", "text")
    
    if input_type == "email":
        import re
        email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        if not re.match(email_pattern, user_text):
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. {retry_message}")
            return
    
    elif input_type == "number":
        try:
            float(user_text)
        except ValueError:
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. {retry_message}")
            return
    
    elif input_type == "phone":
        import re
        phone_pattern = r"^[+]?[0-9\s\-\(\)]{10,}$"
        if not re.match(phone_pattern, user_text):
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. {retry_message}")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    variable_name = input_config.get("variable", "user_response")
    import datetime
    timestamp = datetime.datetime.now().isoformat()
    node_id = input_config.get("node_id", "unknown")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    response_data = {
        "value": user_text,
        "type": input_type,
        "timestamp": timestamp,
        "nodeId": node_id,
        "prompt": input_config.get("prompt", ""),
        "variable": variable_name
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    user_data[user_id][variable_name] = response_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if input_config.get("save_to_database"):
        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
        if saved_to_db:
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {variable_name} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = input_config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")
    await message.answer(success_message)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    del user_data[user_id]["waiting_for_input"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {variable_name} = {user_text}")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global db_pool
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if db_pool:
            await db_pool.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        print("üîå –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())
