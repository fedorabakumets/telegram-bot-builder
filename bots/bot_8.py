"""
–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö ID - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "7552080497:AAEJFmsxmY8PnDzgoUpM5NDg5E1ehNYAHYU"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return user_id in user_data


@dp.message(CommandStart())
async def start_handler(message: types.Message):

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç!

–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å:
‚Ä¢ /start - —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è
‚Ä¢ —Å—Ç–∞—Ä—Ç - —ç—Ç–æ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    builder.add(KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))
    builder.add(KeyboardButton(text="–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥

@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await start_handler(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ reply –∫–Ω–æ–ø–æ–∫

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def handle_reply_btn_info(message: types.Message):
    text = "üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç-–ø—Ä–∏–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:\n‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–º–∞–Ω–¥—ã\n‚Ä¢ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ë–∞–∑–æ–≤—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ!"
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)

@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_reply_btn_help(message: types.Message):
    text = "‚ùì **–°–ø—Ä–∞–≤–∫–∞:**\n\nüî§ **–ö–æ–º–∞–Ω–¥—ã:**\n‚Ä¢ /start –∏–ª–∏ —Å—Ç–∞—Ä—Ç - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\nüéØ **–°–æ–≤–µ—Ç—ã:**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã –¥–µ–ª–∞—é—Ç –±–æ—Ç–∞ —É–¥–æ–±–Ω–µ–µ\n‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!"
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)

@dp.message(lambda message: message.text == "–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞")
async def handle_reply_iSdZyZGM1AmuKCtToecMD(message: types.Message):
    text = "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@dp.message(lambda message: message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_reply_btn_back_info(message: types.Message):
    text = "üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç!\n\n–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å:\n‚Ä¢ /start - —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è\n‚Ä¢ —Å—Ç–∞—Ä—Ç - —ç—Ç–æ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
    builder.add(KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"))
    builder.add(KeyboardButton(text="–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
