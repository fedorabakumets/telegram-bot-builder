"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8082906513:AAEkTEm-HYvpRkI8ZuPuWmx3f25zi5tm1OE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    return user_id in user_data

def is_local_file(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    return url.startswith("/uploads/") or url.startswith("uploads/")

def get_local_file_path(url: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL"""
    if url.startswith("/"):
        return url[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à
    return url

def extract_coordinates_from_yandex(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ll=longitude,latitude
    match = re.search(r"ll=([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /longitude,latitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    return None, None

def extract_coordinates_from_google(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ Google Maps"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @latitude,longitude
    match = re.search(r"@([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(1)), float(match.group(2))  # lat, lon
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /latitude,longitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(1)), float(match.group(2))  # lat, lon
    return None, None

def extract_coordinates_from_2gis(url: str) -> tuple:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ 2–ì–ò–°"""
    import re
    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö 2–ì–ò–°
    # –§–æ—Ä–º–∞—Ç: center/longitude,latitude
    match = re.search(r"center/([\d.-]+),([\d.-]+)", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    # –§–æ—Ä–º–∞—Ç: /longitude,latitude/
    match = re.search(r"/([\d.-]+),([\d.-]+)/", url)
    if match:
        return float(match.group(2)), float(match.group(1))  # lat, lon
    return None, None

def generate_map_urls(latitude: float, longitude: float, title: str = "") -> dict:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""
    import urllib.parse
    
    encoded_title = urllib.parse.quote(title) if title else ""
    
    return {
        "yandex": f"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15&l=map&pt={longitude},{latitude}",
        "google": f"https://maps.google.com/?q={latitude},{longitude}",
        "2gis": f"https://2gis.ru/geo/{longitude},{latitude}",
        "openstreetmap": f"https://www.openstreetmap.org/?mlat={latitude}&mlon={longitude}&zoom=15"
    }


@dp.message(CommandStart())
async def start_handler(message: types.Message):

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """üèõÔ∏è **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –£–õ–¨–¢–†–ê-–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–û–õ–ò–¢–ò–ö–û-–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –û–ü–†–û–°!**

üìö –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ üó≥Ô∏è **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üìú **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–Ω–∏–µ** (25+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ ü§î **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–∑–∑—Ä–µ–Ω–∏—è** (15+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üåç **–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** 45-60 –º–∏–Ω—É—Ç
üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –≤–∑–≥–ª—è–¥–æ–≤

**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?**"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="political-intro"))
    builder.add(InlineKeyboardButton(text="üìã –û–±–∑–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤", callback_data="sections-overview"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="survey-instructions"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫

@dp.callback_query(lambda c: c.data == "political-intro")
async def handle_callback_political_intro(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üó≥Ô∏è **–ë–õ–û–ö –ê: –ü–û–õ–ò–¢–û–õ–û–ì–ò–Ø**

**–ò—Å—Å–ª–µ–¥—É–µ–º –≤–∞—à–∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è**

–í —ç—Ç–æ–º –±–ª–æ–∫–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ:
‚Ä¢ –†–æ–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–∞–≤–∞—Ö –∏ —Å–≤–æ–±–æ–¥–∞—Ö
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö

**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑?**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üó≥Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–ª–∏—Ç–±–ª–æ–∫", callback_data="pol-q1"))
    builder.add(InlineKeyboardButton(text="üìú –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "sections-overview")
async def handle_callback_sections_overview(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìã **–†–ê–ó–î–ï–õ–´ –û–ü–†–û–°–ê:**

üó≥Ô∏è **–ë–õ–û–ö –ê: –ü–û–õ–ò–¢–û–õ–û–ì–ò–Ø** (20 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –≤–ª–∞—Å—Ç–∏ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞

üìú **–ë–õ–û–ö –ë: –ò–°–¢–û–†–ò–Ø** (25 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –ó–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è

ü§î **–ë–õ–û–ö –í: –§–ò–õ–û–°–û–§–ò–Ø** (15 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–∑–∑—Ä–µ–Ω–∏—è
‚Ä¢ –ú–µ—Ç–∞—Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è
‚Ä¢ –°–º—ã—Å–ª –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏

üåç **–ë–õ–û–ö –ì: –°–û–¶–ò–û–õ–û–ì–ò–Ø** (20 –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ú–µ–∂–≥—Ä—É–ø–ø–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞
‚Ä¢ –ë—É–¥—É—â–µ–µ –æ–±—â–µ—Å—Ç–≤–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="start-poll"))
    builder.add(InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="political-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "survey-instructions")
async def handle_callback_survey_instructions(callback_query: types.CallbackQuery):
    await callback_query.answer()
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –≤–µ–¥–µ—Ç
    await callback_query.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)

@dp.callback_query(lambda c: c.data == "start-poll")
async def handle_callback_start_poll(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üèõÔ∏è **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –£–õ–¨–¢–†–ê-–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–û–õ–ò–¢–ò–ö–û-–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –û–ü–†–û–°!**

üìö –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ üó≥Ô∏è **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üìú **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–Ω–∏–µ** (25+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ ü§î **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–∑–∑—Ä–µ–Ω–∏—è** (15+ –≤–æ–ø—Ä–æ—Å–æ–≤)
‚Ä¢ üåç **–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** 45-60 –º–∏–Ω—É—Ç
üéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –≤–∑–≥–ª—è–¥–æ–≤

**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", callback_data="political-intro"))
    builder.add(InlineKeyboardButton(text="üìã –û–±–∑–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤", callback_data="sections-overview"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="survey-instructions"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "pol-q1")
async def handle_callback_pol_q1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üó≥Ô∏è **–í–û–ü–†–û–° 1/20** (–ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è)

**–ö–∞–∫—É—é —Ä–æ–ª—å –¥–æ–ª–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –≤ —ç–∫–æ–Ω–æ–º–∏–∫–µ?**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–∫–∏–π –≤–∞–º –≤–∞—Ä–∏–∞–Ω—Ç:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="A) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å - —Å–≤–æ–±–æ–¥–Ω—ã–π...", callback_data="pol-q1-result"))
    builder.add(InlineKeyboardButton(text="B) –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...", callback_data="pol-q1-result"))
    builder.add(InlineKeyboardButton(text="C) –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ...", callback_data="pol-q1-result"))
    builder.add(InlineKeyboardButton(text="D) –ü–æ–ª–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π...", callback_data="pol-q1-result"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "history-intro")
async def handle_callback_history_intro(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìú **–ë–õ–û–ö –ë: –ò–°–¢–û–†–ò–Ø**

**–ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏**

–í —ç—Ç–æ–º –±–ª–æ–∫–µ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ:
‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ –í–µ–ª–∏–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞—Ö –∏ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö —Å–æ–±—ã—Ç–∏–π
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö —Ä–∞–∑–≤–∏—Ç–∏—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—è—Ö

**–ì–æ—Ç–æ–≤—ã –æ–∫—É–Ω—É—Ç—å—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é?**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìú –ù–∞—á–∞—Ç—å –∏—Å—Ç–±–ª–æ–∫", callback_data="hist-q1"))
    builder.add(InlineKeyboardButton(text="ü§î –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏", callback_data="philosophy-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "pol-q1-result")
async def handle_callback_pol_q1_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚úÖ **–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω!**

**–ü–æ–ª–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:**

A) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å - —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä—ã–Ω–æ–∫

B) –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π

C) –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

D) –ü–æ–ª–Ω—ã–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 1/20 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª–∏—Ç–±–ª–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data="history-intro"))
    builder.add(InlineKeyboardButton(text="üìú –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="history-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "hist-q1")
async def handle_callback_hist_q1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìú **–í–û–ü–†–û–° 1/25** (–ò—Å—Ç–æ—Ä–∏—è)

**–ß—Ç–æ —Å—Ç–∞–ª–æ –≥–ª–∞–≤–Ω–æ–π –ø—Ä–∏—á–∏–Ω–æ–π –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã?**

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="A) –£–±–∏–π—Å—Ç–≤–æ —ç—Ä—Ü–≥–µ—Ä—Ü–æ–≥–∞...", callback_data="hist-q1-result"))
    builder.add(InlineKeyboardButton(text="B) –ò–º–ø–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è...", callback_data="hist-q1-result"))
    builder.add(InlineKeyboardButton(text="C) –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è...", callback_data="hist-q1-result"))
    builder.add(InlineKeyboardButton(text="D) –ì–æ–Ω–∫–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π...", callback_data="hist-q1-result"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "philosophy-intro")
async def handle_callback_philosophy_intro(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """ü§î **–ë–õ–û–ö –í: –§–ò–õ–û–°–û–§–ò–Ø**

**–ò—Å—Å–ª–µ–¥—É–µ–º –≤–∞—à–∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω—á–µ—Å–∫–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏**

–í —ç—Ç–æ–º –±–ª–æ–∫–µ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ:
‚Ä¢ –≠—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∏ –º–æ—Ä–∞–ª–∏
‚Ä¢ –ú–µ—Ç–∞—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –≤–∑–≥–ª—è–¥–∞—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ –°–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏
‚Ä¢ –≠–ø–∏—Å—Ç–µ–º–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–∑–Ω–∞–Ω–∏–∏

**–ì–æ—Ç–æ–≤—ã –∫ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É?**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="ü§î –ù–∞—á–∞—Ç—å —Ñ–∏–ª–±–ª–æ–∫", callback_data="phil-q1"))
    builder.add(InlineKeyboardButton(text="üåç –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Ü–∏–æ–ª–æ–≥–∏–∏", callback_data="sociology-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "hist-q1-result")
async def handle_callback_hist_q1_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚úÖ **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω!**

**–ü–æ–ª–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**

A) –£–±–∏–π—Å—Ç–≤–æ —ç—Ä—Ü–≥–µ—Ä—Ü–æ–≥–∞ –§—Ä–∞–Ω—Ü–∞ –§–µ—Ä–¥–∏–Ω–∞–Ω–¥–∞

B) –ò–º–ø–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ—Ä–∂–∞–≤

C) –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ –ë–∞–ª–∫–∞–Ω–∞—Ö

D) –ì–æ–Ω–∫–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π –∏ –º–∏–ª–∏—Ç–∞—Ä–∏–∑–º

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 1/25 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–±–ª–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="ü§î –ö –±–ª–æ–∫—É –§–∏–ª–æ—Å–æ—Ñ–∏—è", callback_data="philosophy-intro"))
    builder.add(InlineKeyboardButton(text="ü§î –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏", callback_data="philosophy-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "phil-q1")
async def handle_callback_phil_q1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """ü§î **–í–û–ü–†–û–° 1/15** (–§–∏–ª–æ—Å–æ—Ñ–∏—è)

**–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –º–æ—Ä–∞–ª—å–Ω—ã—Ö —Å—É–∂–¥–µ–Ω–∏–π?**

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–∑–≥–ª—è–¥:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="A) –í—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –º–æ—Ä–∞–ª—å–Ω—ã–µ...", callback_data="phil-q1-result"))
    builder.add(InlineKeyboardButton(text="B) –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π...", callback_data="phil-q1-result"))
    builder.add(InlineKeyboardButton(text="C) –î–æ–ª–≥ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ...", callback_data="phil-q1-result"))
    builder.add(InlineKeyboardButton(text="D) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è...", callback_data="phil-q1-result"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "sociology-intro")
async def handle_callback_sociology_intro(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üåç **–ë–õ–û–ö –ì: –°–û–¶–ò–û–õ–û–ì–ò–Ø**

**–ò–∑—É—á–∞–µ–º –≤–∞—à–∏ –≤–∑–≥–ª—è–¥—ã –Ω–∞ –æ–±—â–µ—Å—Ç–≤–æ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã**

–í —ç—Ç–æ–º –±–ª–æ–∫–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ:
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–º –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–µ –∏ —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚Ä¢ –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
‚Ä¢ –ú–µ–∂–≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –±—É–¥—É—â–µ–º –æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏

**–ì–æ—Ç–æ–≤—ã –∫ —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É?**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üåç –ù–∞—á–∞—Ç—å —Å–æ—Ü–∏–æ–±–ª–æ–∫", callback_data="soc-q1"))
    builder.add(InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="final-results"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "phil-q1-result")
async def handle_callback_phil_q1_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚úÖ **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è —É—á—Ç–µ–Ω–∞!**

**–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**

A) –í—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ –º–æ—Ä–∞–ª—å–Ω—ã–µ –∏–Ω—Ç—É–∏—Ü–∏–∏

B) –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π (—É—Ç–∏–ª–∏—Ç–∞—Ä–∏–∑–º)

C) –î–æ–ª–≥ –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

D) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 1/15 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ñ–∏–ª–±–ª–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üåç –ö –±–ª–æ–∫—É –°–æ—Ü–∏–æ–ª–æ–≥–∏—è", callback_data="sociology-intro"))
    builder.add(InlineKeyboardButton(text="üåç –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ—Ü–∏–æ–ª–æ–≥–∏–∏", callback_data="sociology-intro"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "soc-q1")
async def handle_callback_soc_q1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üåç **–í–û–ü–†–û–° 1/20** (–°–æ—Ü–∏–æ–ª–æ–≥–∏—è)

**–ì–ª–∞–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞:**

–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–∑–≥–ª—è–¥:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="A) –†–∞–∑–ª–∏—á–∏—è –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö...", callback_data="soc-q1-result"))
    builder.add(InlineKeyboardButton(text="B) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏...", callback_data="soc-q1-result"))
    builder.add(InlineKeyboardButton(text="C) –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ...", callback_data="soc-q1-result"))
    builder.add(InlineKeyboardButton(text="D) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã...", callback_data="soc-q1-result"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "final-results")
async def handle_callback_final_results(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –° –ó–ê–í–ï–†–®–ï–ù–ò–ï–ú –£–õ–¨–¢–†–ê-–ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –û–ü–†–û–°–ê!**

üìä **–í–ê–®–ò –†–ï–ó–£–õ–¨–¢–ê–¢–´:**

üó≥Ô∏è **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:** –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...
üìú **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å:** –û—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è...
ü§î **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã:** –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...
üåç **–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∑–∏—Ü–∏–∏:** –°–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç—Å—è...

‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** –í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å!
üéØ **–ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤:** 80+ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ

**–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è...**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="detailed-analysis"))
    builder.add(InlineKeyboardButton(text="üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations"))
    builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start-poll"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "soc-q1-result")
async def handle_callback_soc_q1_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚úÖ **–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!**

**–í–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:**

A) –†–∞–∑–ª–∏—á–∏—è –≤ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è—Ö –∏ —Ç–∞–ª–∞–Ω—Ç–µ

B) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã

C) –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è

D) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –Ω–∞—Å–ª–µ–¥–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ

üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** 1/20 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ—Ü–∏–æ–±–ª–æ–∫–∞"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéâ –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!", callback_data="final-results"))
    builder.add(InlineKeyboardButton(text="üìä –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="final-results"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "detailed-analysis")
async def handle_callback_detailed_analysis(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìä **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í**

üó≥Ô∏è **–ü–û–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö:**
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã: –°–º–µ—à–∞–Ω–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞: –£–º–µ—Ä–µ–Ω–Ω–æ-–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è
‚Ä¢ –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞: –ú–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–æ—Å—Ç—å
‚Ä¢ –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–∏–∑–º vs –õ–∏–±–µ—Ä–∞–ª–∏–∑–º: –õ–∏–±–µ—Ä–∞–ª—å–Ω–æ-–¥–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∏–π

üìú **–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö:**
‚Ä¢ –ó–Ω–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤: –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: –°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ
‚Ä¢ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π: –ú–Ω–æ–≥–æ—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏: –†–∞–∑–≤–∏—Ç–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

ü§î **–§–ò–õ–û–°–û–§–°–ö–ò–ô –ë–õ–û–ö:**
‚Ä¢ –≠—Ç–∏–∫–∞: –î–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ-—É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π —Å–∏–Ω—Ç–µ–∑
‚Ä¢ –ú–µ—Ç–∞—Ñ–∏–∑–∏–∫–∞: –ú–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∞–ª–∏–∑–º
‚Ä¢ –≠–ø–∏—Å—Ç–µ–º–æ–ª–æ–≥–∏—è: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–º
‚Ä¢ –°–º—ã—Å–ª –∂–∏–∑–Ω–∏: –°–∞–º–æ–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–ª—É–∂–µ–Ω–∏–µ

üåç **–°–û–¶–ò–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ë–õ–û–ö:**
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–æ
‚Ä¢ –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è: –°–ª–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–ª—é—Å–∞–º–∏ –∏ –º–∏–Ω—É—Å–∞–º–∏
‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é—Ç –æ–±—â–µ—Å—Ç–≤–æ
‚Ä¢ –ë—É–¥—É—â–µ–µ: –û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–º"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="final-results"))
    builder.add(InlineKeyboardButton(text="üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏", callback_data="profile-comparison"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "recommendations")
async def handle_callback_recommendations(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìö **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø**

üìñ **–ö–Ω–∏–≥–∏ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π:**
‚Ä¢ "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è" - –†–æ–±–µ—Ä—Ç –ü–æ–ª –í–æ–ª—å—Ñ
‚Ä¢ "–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–π" - –°—ç–º—é—ç–ª –•–∞–Ω—Ç–∏–Ω–≥—Ç–æ–Ω
‚Ä¢ "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å" - –ú–∞–π–∫–ª –°—ç–Ω–¥–µ–ª
‚Ä¢ "–ü–æ—Å—Ç–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±—â–µ—Å—Ç–≤–æ" - –î—ç–Ω–∏–µ–ª –ë–µ–ª–ª

üéì **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è
‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ–∏—è –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è
‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏—è

üí≠ **–¢–µ–º—ã –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**
‚Ä¢ –ö–∞–∫ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –∏ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –±–ª–∞–≥–æ?
‚Ä¢ –ö–∞–∫–∏–µ —É—Ä–æ–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏?
‚Ä¢ –ö–∞–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑–º–µ–Ω—è—Ç –ø—Ä–∏—Ä–æ–¥—É –¥–µ–º–æ–∫—Ä–∞—Ç–∏–∏?
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ?

üåü **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∏—Å–∫—É—Å—Å–∏—è—Ö
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º
‚Ä¢ –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="final-results"))
    builder.add(InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å", callback_data="start-poll"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(lambda c: c.data == "profile-comparison")
async def handle_callback_profile_comparison(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üë• **–°–†–ê–í–ù–ï–ù–ò–ï –° –¢–ò–ü–ò–ß–ù–´–ú–ò –ü–†–û–§–ò–õ–Ø–ú–ò**

üéØ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–∏–±–æ–ª–µ–µ –±–ª–∏–∑–æ–∫ –∫:**

**"–ü—Ä–æ—Å–≤–µ—â–µ–Ω–Ω—ã–π –¶–µ–Ω—Ç—Ä–∏—Å—Ç"** - 87% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
‚Ä¢ –†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª–∏—Ç–∏–∫–µ
‚Ä¢ –ì–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –æ –æ–±—â–µ—Å—Ç–≤–µ

üìä **–î—Ä—É–≥–∏–µ –±–ª–∏–∑–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏:**
‚Ä¢ –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª - 78%
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ü—Ä–∞–≥–º–∞—Ç–∏–∫ - 74%
‚Ä¢ –°–æ—Ü–∏–∞–ª-–¥–µ–º–æ–∫—Ä–∞—Ç - 71%

üîç **–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:**
‚Ä¢ –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö –≤–∑–≥–ª—è–¥–æ–≤
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ —Å –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å—é
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–∂–¥–µ–Ω–∏—è—Ö
‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –≥–ª—É–±–∏–Ω–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ

**–í—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ —Ä–µ–¥–∫–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ —á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç–∏!**"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –∞–Ω–∞–ª–∏–∑—É", callback_data="detailed-analysis"))
    builder.add(InlineKeyboardButton(text="üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(F.text)
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data or "waiting_for_input" not in user_data[user_id]:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥
    
    input_config = user_data[user_id]["waiting_for_input"]
    user_text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–ø—É—Å–∫–∞
    if input_config.get("allow_skip") and user_text == "/skip":
        await message.answer("‚è≠Ô∏è –í–≤–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω")
        del user_data[user_id]["waiting_for_input"]
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    min_length = input_config.get("min_length", 0)
    max_length = input_config.get("max_length", 0)
    
    if min_length > 0 and len(user_text) < min_length:
        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")
        return
    
    if max_length > 0 and len(user_text) > max_length:
        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    input_type = input_config.get("type", "text")
    
    if input_type == "email":
        import re
        email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        if not re.match(email_pattern, user_text):
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. {retry_message}")
            return
    
    elif input_type == "number":
        try:
            float(user_text)
        except ValueError:
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. {retry_message}")
            return
    
    elif input_type == "phone":
        import re
        phone_pattern = r"^[+]?[0-9\s\-\(\)]{10,}$"
        if not re.match(phone_pattern, user_text):
            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. {retry_message}")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    variable_name = input_config.get("variable", "user_response")
    user_data[user_id][variable_name] = user_text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if input_config.get("save_to_database"):
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î: {variable_name} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    success_message = input_config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")
    await message.answer(success_message)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    del user_data[user_id]["waiting_for_input"]
    
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {variable_name} = {user_text}")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
