#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import asyncpg
import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN', '7552080497:AAGVlzwUJHNO8vfF2vU4-2wXpUzxU5Nz88c')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
db_pool = None

# –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL', 'postgresql://replit:replit@localhost:5432/replit')

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL)
        logging.info("Database connection established and tables created")
        return True
    except Exception as e:
        logging.error(f"Database connection failed: {e}")
        db_pool = None
        return False

async def save_user_to_db(user_id: int, username: str, first_name: str, last_name: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bot_users (user_id, username, first_name, last_name, registered_at)
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name
            """, user_id, username, first_name, last_name, datetime.now())
        return True
    except Exception as e:
        logging.error(f"Failed to save user to database: {e}")
        return False

async def get_user_from_db(user_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return None
    
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM bot_users WHERE user_id = $1", user_id)
            if row:
                user_data_json = row['user_data'] if row['user_data'] else '{}'
                user_data_dict = json.loads(user_data_json) if isinstance(user_data_json, str) else user_data_json
                return {
                    'user_id': row['user_id'],
                    'username': row['username'],
                    'first_name': row['first_name'],
                    'last_name': row['last_name'],
                    'registered_at': row['registered_at'],
                    'user_data': user_data_dict
                }
    except Exception as e:
        logging.error(f"Failed to get user from database: {e}")
    return None

async def update_user_data_in_db(user_id: int, key: str, value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    
    try:
        async with db_pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            row = await conn.fetchrow("SELECT user_data FROM bot_users WHERE user_id = $1", user_id)
            current_data = {}
            if row and row['user_data']:
                current_data = json.loads(row['user_data']) if isinstance(row['user_data'], str) else row['user_data']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            current_data[key] = value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            await conn.execute("""
                UPDATE bot_users SET user_data = $1 WHERE user_id = $2
            """, json.dumps(current_data), user_id)
        return True
    except Exception as e:
        logging.error(f"Failed to update user data in database: {e}")
        return False

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if not saved_to_db:
        user_data[user_id] = {
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "registered_at": message.date
        }
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
    user_record = await get_user_from_db(user_id)
    if not user_record:
        user_record = user_data.get(user_id, {})
    
    user_data_dict = user_record.get("user_data", {}) if isinstance(user_record, dict) and "user_data" in user_record else {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ: user_data_exists
    if "–∏—Å—Ç–æ—á–Ω–∏–∫" in user_data_dict and user_data_dict.get("–∏—Å—Ç–æ—á–Ω–∏–∫") is not None:
        text = """–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã
–í—ã –ø—Ä–∏—à–ª–∏ –∫ –Ω–∞–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {–∏—Å—Ç–æ—á–Ω–∏–∫}

–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!"""
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        source_value = user_data_dict.get("–∏—Å—Ç–æ—á–Ω–∏–∫", "")
        if isinstance(source_value, dict):
            source_value = source_value.get("value", source_value.get("text", str(source_value)))
        text = text.replace("{–∏—Å—Ç–æ—á–Ω–∏–∫}", str(source_value))
        logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        text = """–ü—Ä–∏–≤–µ—Ç! üåü
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!
–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?"""
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞")
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", callback_data="source_search"))
    builder.add(InlineKeyboardButton(text="üë• –î—Ä—É–∑—å—è", callback_data="source_friends"))
    builder.add(InlineKeyboardButton(text="üì± –†–µ–∫–ª–∞–º–∞", callback_data="source_ads"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["input_collection_enabled"] = True
    user_data[message.from_user.id]["input_node_id"] = "start_node"
    user_data[message.from_user.id]["input_variable"] = "–∏—Å—Ç–æ—á–Ω–∏–∫"

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
    user_record = await get_user_from_db(user_id)
    if not user_record:
        user_record = user_data.get(user_id, {})
    
    user_data_dict = user_record.get("user_data", {}) if isinstance(user_record, dict) and "user_data" in user_record else {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ: user_data_exists
    if "–∏—Å—Ç–æ—á–Ω–∏–∫" in user_data_dict and user_data_dict.get("–∏—Å—Ç–æ—á–Ω–∏–∫") is not None:
        text = """üìñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–í—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã —Å –±–æ—Ç–æ–º! –í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

üîÑ /start - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
üìä /stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        text = """üìñ –ë–∞–∑–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:

1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º /start –≤—ã —É–≤–∏–¥–∏—Ç–µ –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫
3. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º /start - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ö–æ–º–∞–Ω–¥—ã:
üîÑ /start - –∑–∞–ø—É—Å–∫
‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@dp.message(Command("stats"))
async def stats_handler(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
    user_record = await get_user_from_db(user_id)
    if not user_record:
        user_record = user_data.get(user_id, {})
    
    user_data_dict = user_record.get("user_data", {}) if isinstance(user_record, dict) and "user_data" in user_record else {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ: user_data_exists
    if "–∏—Å—Ç–æ—á–Ω–∏–∫" in user_data_dict and user_data_dict.get("–∏—Å—Ç–æ—á–Ω–∏–∫") is not None:
        source_value = user_data_dict.get("–∏—Å—Ç–æ—á–Ω–∏–∫", "")
        if isinstance(source_value, dict):
            source_value = source_value.get("value", source_value.get("text", str(source_value)))
        text = f"""üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {source_value}
üë§ –°—Ç–∞—Ç—É—Å: –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞"""
        logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        text = """üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë§ –°—Ç–∞—Ç—É—Å: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
üîç –ò—Å—Ç–æ—á–Ω–∏–∫: –ù–µ —É–∫–∞–∑–∞–Ω
üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –û—Ç–∫–ª—é—á–µ–Ω–∞

–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ /start –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏!"""
        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "source_search")
async def handle_callback_source_search(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    button_text = "üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id in user_data and user_data[user_id].get("input_variable"):
        variable_name = user_data[user_id]["input_variable"]
        await update_user_data_in_db(user_id, variable_name, button_text)
        logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {button_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    text = """–û—Ç–ª–∏—á–Ω–æ! üéØ
–¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –≤—ã –Ω–∞—à–ª–∏ –Ω–∞—Å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–ø–∏—Å–∞—Ç—å /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!"""
    try:
        await callback_query.message.edit_text(text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text)

@dp.callback_query(lambda c: c.data == "source_friends")
async def handle_callback_source_friends(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    button_text = "üë• –î—Ä—É–∑—å—è"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id in user_data and user_data[user_id].get("input_variable"):
        variable_name = user_data[user_id]["input_variable"]
        await update_user_data_in_db(user_id, variable_name, button_text)
        logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {button_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    text = """–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! üë•
–ó–Ω–∞—á–∏—Ç, –≤–∞—Å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –¥—Ä—É–∑—å—è!

–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑ - —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!"""
    try:
        await callback_query.message.edit_text(text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text)

@dp.callback_query(lambda c: c.data == "source_ads")
async def handle_callback_source_ads(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    button_text = "üì± –†–µ–∫–ª–∞–º–∞"
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id in user_data and user_data[user_id].get("input_variable"):
        variable_name = user_data[user_id]["input_variable"]
        await update_user_data_in_db(user_id, variable_name, button_text)
        logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {button_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
    
    text = """–ü–æ–Ω—è—Ç–Ω–æ! üì±
–í—ã –ø—Ä–∏—à–ª–∏ –∏–∑ —Ä–µ–∫–ª–∞–º—ã.

–í–≤–µ–¥–∏—Ç–µ /start —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"""
    try:
        await callback_query.message.edit_text(text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global db_pool
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if db_pool:
            await db_pool.close()
            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        print("üîå –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())