"""
–ú–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
from typing import Optional
import asyncpg
from datetime import datetime, timezone, timedelta
import json

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
    return datetime.now(moscow_tz).isoformat()

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8082906513:AAEkTEm-HYvpRkI8ZuPuWmx3f25zi5tm1OE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
db_pool = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ë–î)
user_data = {}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with db_pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registered_at TIMESTAMP DEFAULT NOW(),
                    last_interaction TIMESTAMP DEFAULT NOW(),
                    interaction_count INTEGER DEFAULT 0,
                    user_data JSONB DEFAULT '{}',
                    is_active BOOLEAN DEFAULT TRUE
                );
            """)
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
        db_pool = None

async def save_user_to_db(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return
    
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bot_users (user_id, username, first_name, last_name)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    last_interaction = NOW(),
                    interaction_count = bot_users.interaction_count + 1
            """, user_id, username, first_name, last_name)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def update_user_data(user_id: int, data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ"""
    if not db_pool:
        return
    
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                UPDATE bot_users 
                SET user_data = user_data || $2,
                    last_interaction = NOW()
                WHERE user_id = $1
            """, user_id, json.dumps(data))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def get_user_data_from_db(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
    if not db_pool:
        return {}
    
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT user_data FROM bot_users WHERE user_id = $1", user_id)
            if row and row['user_data']:
                return row['user_data']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    return {}

def check_user_variable(variable_name: str, user_data_dict: dict) -> (bool, str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    value = user_data_dict.get(variable_name)
    if value is not None and value != "":
        return True, str(value)
    return False, ""

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await save_user_to_db(user_id, username, first_name, last_name)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if user_id not in user_data:
        user_data[user_id] = await get_user_data_from_db(user_id)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    text = """–ü—Ä–∏–≤–µ—Ç! üåü
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!
–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    user_data[user_id]["waiting_for_input"] = {
        "node_id": "start_node",
        "next_node_id": "--2N9FeeykMHVVlsVnSQW",
        "input_variable": "–∏—Å—Ç–æ—á–Ω–∏–∫"
    }
    
    await message.answer(text)

@dp.message(Command("profile"))
async def profile_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = await get_user_data_from_db(user_id)
    
    user_data_dict = user_data[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    conditions = [
        {
            "id": "profile_with_all_data",
            "priority": 50,
            "variables": ["–∂–µ–ª–∞–Ω–∏–µ", "–∏–º—è", "–∏—Å—Ç–æ—á–Ω–∏–∫", "–ø–æ–ª"],
            "operator": "AND",
            "text": """üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {–∏—Å—Ç–æ—á–Ω–∏–∫}
üí≠ –ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {–∂–µ–ª–∞–Ω–∏–µ}
‚ößÔ∏è –ü–æ–ª: {–ø–æ–ª}
üëã –ò–º—è: {–∏–º—è}

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω! ‚úÖ"""
        },
        {
            "id": "profile_basic_info",
            "priority": 40,
            "variables": ["–∏–º—è"],
            "operator": "AND",
            "text": """üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

üëã –ò–º—è: {–∏–º—è}

–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å?"""
        },
        {
            "id": "profile_partial",
            "priority": 30,
            "variables": ["–∏—Å—Ç–æ—á–Ω–∏–∫"],
            "operator": "OR",
            "text": """üë§ –ß–∞—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:

üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {–∏—Å—Ç–æ—á–Ω–∏–∫}

–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω —á–∞—Å—Ç–∏—á–Ω–æ. –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        },
        {
            "id": "profile_any_data",
            "priority": 10,
            "variables": ["–∂–µ–ª–∞–Ω–∏–µ", "–∏–º—è", "–∏—Å—Ç–æ—á–Ω–∏–∫", "–ø–æ–ª"],
            "operator": "OR",
            "text": """üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:

–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å. –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é.

–ò–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ:
üîç –ò—Å—Ç–æ—á–Ω–∏–∫: {–∏—Å—Ç–æ—á–Ω–∏–∫}
üí≠ –ñ–µ–ª–∞–Ω–∏–µ: {–∂–µ–ª–∞–Ω–∏–µ}
‚ößÔ∏è –ü–æ–ª: {–ø–æ–ª}
üëã –ò–º—è: {–∏–º—è}"""
        }
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    selected_condition = None
    for condition in sorted(conditions, key=lambda x: x["priority"], reverse=True):
        if condition["operator"] == "AND":
            # –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            if all(check_user_variable(var, user_data_dict)[0] for var in condition["variables"]):
                selected_condition = condition
                break
        else:  # OR
            # –•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            if any(check_user_variable(var, user_data_dict)[0] for var in condition["variables"]):
                selected_condition = condition
                break
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if selected_condition:
        text = selected_condition["text"]
        # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        for var in ["–∂–µ–ª–∞–Ω–∏–µ", "–∏–º—è", "–∏—Å—Ç–æ—á–Ω–∏–∫", "–ø–æ–ª"]:
            placeholder = "{" + var + "}"
            if placeholder in text:
                exists, value = check_user_variable(var, user_data_dict)
                if exists:
                    text = text.replace(placeholder, value)
                else:
                    text = text.replace(placeholder, "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    else:
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = """üë§ –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å."""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data="/start"))
    builder.add(InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è", callback_data="H7Sfc4w0d6izui3NABl6m"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "--2N9FeeykMHVVlsVnSQW")
async def handle_keyboard_2N9FeeykMHVVlsVnSQW(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã --2N9FeeykMHVVlsVnSQW"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    text = "–¢—ã —Ö–æ—á–µ—à—å—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —Å —á–∞—Ç–æ–º?"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–î–∞", callback_data="nr3wIiTfBYYmpkkXMNH7n"))
    builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="1BHSLWPMao9qQvSAzuzRl"))
    keyboard = builder.as_markup()
    
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(F.data == "nr3wIiTfBYYmpkkXMNH7n")
async def handle_keyboard_nr3wIiTfBYYmpkkXMNH7n(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã nr3wIiTfBYYmpkkXMNH7n"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["–∂–µ–ª–∞–Ω–∏–µ"] = "–î–∞"
    await update_user_data(user_id, {"–∂–µ–ª–∞–Ω–∏–µ": "–î–∞"})
    
    text = "–ö–∞–∫–æ–π —Ç–≤–æ–π –ø–æ–ª?"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="H7Sfc4w0d6izui3NABl6m"))
    builder.add(InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="H7Sfc4w0d6izui3NABl6m"))
    keyboard = builder.as_markup()
    
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(F.data == "1BHSLWPMao9qQvSAzuzRl")
async def handle_message_1BHSLWPMao9qQvSAzuzRl(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è 1BHSLWPMao9qQvSAzuzRl"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]["–∂–µ–ª–∞–Ω–∏–µ"] = "–ù–µ—Ç"
    await update_user_data(user_id, {"–∂–µ–ª–∞–Ω–∏–µ": "–ù–µ—Ç"})
    
    text = "–ü–µ—á–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —á—Ç–æ –Ω–∞–ø–∏—à–∏ /start –∏–ª–∏ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="/start"))
    builder.add(InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="/profile"))
    keyboard = builder.as_markup()
    
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(F.data == "H7Sfc4w0d6izui3NABl6m")
async def handle_message_H7Sfc4w0d6izui3NABl6m(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è H7Sfc4w0d6izui3NABl6m"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data_dict = user_data[user_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    if callback_query.message.text and "–ø–æ–ª" in callback_query.message.text.lower():
        button_text = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        if "–ñ–µ–Ω—â–∏–Ω–∞" in str(callback_query.message.reply_markup):
            button_text = "–ñ–µ–Ω—â–∏–Ω–∞"
        elif "–ú—É–∂—á–∏–Ω–∞" in str(callback_query.message.reply_markup):
            button_text = "–ú—É–∂—á–∏–Ω–∞"
        
        if button_text:
            user_data[user_id]["–ø–æ–ª"] = button_text
            await update_user_data(user_id, {"–ø–æ–ª": button_text})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    has_name, name_value = check_user_variable("–∏–º—è", user_data_dict)
    if has_name:
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è"
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
        user_data[user_id]["waiting_for_input"] = {
            "node_id": "H7Sfc4w0d6izui3NABl6m",
            "next_node_id": "profile_command",
            "input_variable": "–∏–º—è"
        }
    else:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        user_data[user_id]["waiting_for_input"] = {
            "node_id": "H7Sfc4w0d6izui3NABl6m",
            "next_node_id": "final-message-node",
            "input_variable": "–∏–º—è"
        }
    
    await callback_query.message.answer(text)
    await callback_query.answer()

@dp.callback_query(F.data == "final-message-node")
async def handle_message_final_message_node(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = """–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üéâ

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="/profile"))
    builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="/start"))
    keyboard = builder.as_markup()
    
    await callback_query.message.answer(text, reply_markup=keyboard)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ callback
@dp.callback_query(F.data.in_(["/start", "/profile"]))
async def handle_command_callbacks(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫–∏"""
    if callback_query.data == "/start":
        await start_handler(callback_query.message)
    elif callback_query.data == "/profile":
        await profile_handler(callback_query.message)
    
    await callback_query.answer()

@dp.message()
async def handle_text_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id
    user_text = message.text
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = await get_user_data_from_db(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
    if "waiting_for_input" in user_data[user_id]:
        input_config = user_data[user_id]["waiting_for_input"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_variable = input_config["input_variable"]
        user_data[user_id][input_variable] = user_text
        await update_user_data(user_id, {input_variable: user_text})
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        del user_data[user_id]["waiting_for_input"]
        
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–≤–æ–¥: {input_variable} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
        next_node_id = input_config.get("next_node_id")
        if next_node_id == "final-message-node":
            text = """–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üéâ

–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."""
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="üë§ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="/profile"))
            builder.add(InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="/start"))
            keyboard = builder.as_markup()
            
            await message.answer(text, reply_markup=keyboard)
        elif next_node_id == "profile_command":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø—Ä–æ—Ñ–∏–ª—è
            await profile_handler(message)
        elif next_node_id == "--2N9FeeykMHVVlsVnSQW":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            text = "–¢—ã —Ö–æ—á–µ—à—å—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —Å —á–∞—Ç–æ–º?"
            
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="–î–∞", callback_data="nr3wIiTfBYYmpkkXMNH7n"))
            builder.add(InlineKeyboardButton(text="–ù–µ—Ç", callback_data="1BHSLWPMao9qQvSAzuzRl"))
            keyboard = builder.as_markup()
            
            await message.answer(text, reply_markup=keyboard)
        
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∏–ª–∏ /profile —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)