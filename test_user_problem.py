#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import json
import requests

def create_user_problem_test():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    print("üß™ –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 45)
    
    # –¢–æ—á–Ω–æ —Ç–∞–∫–∏–µ –∂–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º —à–∞–±–ª–æ–Ω–µ
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "üèõÔ∏è **–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –£–õ–¨–¢–†–ê-–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–û–õ–ò–¢–ò–ö–û-–ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –û–ü–†–û–°!**\n\nüìö –≠—Ç–æ—Ç –æ–ø—Ä–æ—Å –≤–∫–ª—é—á–∞–µ—Ç:\n‚Ä¢ üó≥Ô∏è **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∑–≥–ª—è–¥—ã** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)\n‚Ä¢ üìú **–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞–Ω–∏–µ** (25+ –≤–æ–ø—Ä–æ—Å–æ–≤)\n‚Ä¢ ü§î **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–∑–∑—Ä–µ–Ω–∏—è** (15+ –≤–æ–ø—Ä–æ—Å–æ–≤)\n‚Ä¢ üåç **–°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑** (20+ –≤–æ–ø—Ä–æ—Å–æ–≤)\n\n‚è±Ô∏è **–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:** 45-60 –º–∏–Ω—É—Ç\nüéØ **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –≤–∑–≥–ª—è–¥–æ–≤\n\n**–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ?**",
                    "keyboardType": "inline",
                    "markdown": True,  # –ö–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ
                    # formatMode –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–∞–∫ –≤ —à–∞–±–ª–æ–Ω–µ
                    "buttons": [
                        {
                            "id": "btn-start",
                            "text": "üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
                            "action": "goto",
                            "target": "question-1"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "question-1",
                "type": "message",
                "data": {
                    "messageText": "**–í–æ–ø—Ä–æ—Å 1:** –ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è?",
                    "keyboardType": "inline",
                    "markdown": True,
                    "buttons": [
                        {
                            "id": "btn-left",
                            "text": "–õ–µ–≤—ã–µ –≤–∑–≥–ª—è–¥—ã",
                            "action": "goto",
                            "target": "start-1"
                        },
                        {
                            "id": "btn-right",
                            "text": "–ü—Ä–∞–≤—ã–µ –≤–∑–≥–ª—è–¥—ã",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 400, "y": 100}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "question-1"},
            {"id": "conn2", "from": "question-1", "to": "start-1"}
        ]
    }
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–ü—Ä–æ–±–ª–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "description": "–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('test_user_problem_result.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_user_problem_result.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                analyze_user_problem(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_user_problem():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    create_user_problem_test()

def analyze_user_problem(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–¥–µ"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:")
    print("-" * 40)
    
    lines = code.split('\n')
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—É –≤ start_handler
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            print(f"üìç –ù–∞–π–¥–µ–Ω start_handler –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 30 —Å—Ç—Ä–æ–∫
            for j in range(i, min(i + 30, len(lines))):
                if 'text = ' in lines[j] and '**' in lines[j]:
                    print(f"üìù –ù–∞–π–¥–µ–Ω markdown —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ {j+1}:")
                    print(f"   {lines[j].strip()}")
                    
                    # –ò—â–µ–º parse_mode –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                    for k in range(j, min(j + 10, len(lines))):
                        if 'parse_mode=' in lines[k]:
                            print(f"üìä Parse mode –Ω–∞ —Å—Ç—Ä–æ–∫–µ {k+1}: {lines[k].strip()}")
                            
                            if 'ParseMode.MARKDOWN' in lines[k]:
                                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å ParseMode.MARKDOWN")
                            elif 'ParseMode.HTML' in lines[k]:
                                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å ParseMode.HTML")
                            else:
                                print("‚ùì –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π parse mode")
                            break
                    break
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É formatMode
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –õ–û–ì–ò–ö–ò FORMATMODE:")
    if 'formatMode' in code:
        print("‚úÖ formatMode –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–¥–µ")
    else:
        print("‚ùå formatMode –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–¥–µ")
    
    if 'markdown: true' in code or 'markdown: True' in code:
        print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω markdown: true")
    else:
        print("‚ùå markdown: true –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º parse modes
    html_modes = code.count('ParseMode.HTML')
    markdown_modes = code.count('ParseMode.MARKDOWN')
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê PARSE MODES:")
    print(f"   ParseMode.HTML: {html_modes}")
    print(f"   ParseMode.MARKDOWN: {markdown_modes}")
    
    if markdown_modes > 0:
        print("‚úÖ Markdown parse mode –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
    else:
        print("‚ùå Markdown parse mode –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

if __name__ == "__main__":
    test_user_problem()