#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ "üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –∏ –ø—Ä–µ–≤—å—é
"""
import requests
import json
from datetime import datetime

def test_complex_data_collection_template():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ API
    try:
        response = requests.get('http://localhost:5000/api/templates')
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return
            
        templates = response.json()
        complex_template = None
        
        for template in templates:
            if template.get('name') == 'üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö':
                complex_template = template
                break
        
        if not complex_template:
            print("‚ùå –®–∞–±–ª–æ–Ω 'üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {complex_template['name']}")
        print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {complex_template['description']}")
        print(f"üîß –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complex_template['difficulty']}")
        print(f"‚è±Ô∏è –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {complex_template['estimatedTime']} –º–∏–Ω—É—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º
        project_data = {
            "name": f"–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö - {datetime.now().strftime('%H:%M:%S')}",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
            "data": complex_template['data']
        }
        
        create_response = requests.post('http://localhost:5000/api/projects', json=project_data)
        if create_response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            return
            
        project = create_response.json()
        project_id = project['id']
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å ID: {project_id}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞
        analyze_template_structure(complex_template['data'])
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥ –±–æ—Ç–∞
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        if export_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–¥–∞: {export_response.status_code}")
            return
            
        export_data = export_response.json()
        python_code = export_data['code']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        with open('complex_data_collection_bot.py', 'w', encoding='utf-8') as f:
            f.write(python_code)
            
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ complex_data_collection_bot.py")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        analyze_generated_code(python_code)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
        test_bot_instance_creation(project_id)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def analyze_template_structure(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —à–∞–±–ª–æ–Ω–∞"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –®–ê–ë–õ–û–ù–ê:")
    
    nodes = data.get('nodes', [])
    connections = data.get('connections', [])
    
    print(f"üîó –£–∑–ª—ã: {len(nodes)}")
    print(f"üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {len(connections)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã —É–∑–ª–æ–≤
    node_types = {}
    user_input_nodes = []
    
    for node in nodes:
        node_type = node.get('type', 'unknown')
        node_types[node_type] = node_types.get(node_type, 0) + 1
        
        if node_type == 'user-input':
            user_input_nodes.append(node)
    
    print("\nüìã –¢–∏–ø—ã —É–∑–ª–æ–≤:")
    for node_type, count in node_types.items():
        print(f"   {node_type}: {count}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    if user_input_nodes:
        print(f"\nüìù –£–∑–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ({len(user_input_nodes)}):")
        for node in user_input_nodes:
            node_data = node.get('data', {})
            response_type = node_data.get('responseType', 'text')
            input_variable = node_data.get('inputVariable', 'unknown')
            is_required = node_data.get('isRequired', False)
            save_to_db = node_data.get('saveToDatabase', False)
            
            print(f"   üîπ {node['id']}: {response_type} ‚Üí {input_variable} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: {is_required}, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î: {save_to_db})")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–æ—á–Ω—ã–π –≤–≤–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏
            if response_type == 'buttons':
                options = node_data.get('responseOptions', [])
                print(f"      –û–ø—Ü–∏–∏: {len(options)}")
                for opt in options:
                    print(f"         ‚Ä¢ {opt.get('text', 'No text')} = {opt.get('value', 'No value')}")

def analyze_generated_code(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
    
    lines = code.split('\n')
    total_lines = len(lines)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    imports = [line for line in lines if line.startswith('import') or line.startswith('from')]
    functions = [line for line in lines if line.strip().startswith('async def') or line.strip().startswith('def')]
    handlers = [line for line in lines if '@dp.' in line]
    
    print(f"üìú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_lines}")
    print(f"üì¶ –ò–º–ø–æ—Ä—Ç—ã: {len(imports)}")
    print(f"üîß –§—É–Ω–∫—Ü–∏–∏: {len(functions)}")
    print(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {len(handlers)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    has_database_support = 'asyncpg' in code and 'bot_users' in code
    has_user_input_handling = 'user_input' in code or 'waiting_for_input' in code
    has_validation = 'validation' in code.lower()
    has_callback_handlers = '@dp.callback_query' in code
    
    print(f"\n‚úÖ –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print(f"   üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ë–î: {has_database_support}")
    print(f"   üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞: {has_user_input_handling}")
    print(f"   ‚úîÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è: {has_validation}")
    print(f"   üîò Callback –∫–Ω–æ–ø–∫–∏: {has_callback_handlers}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
    user_input_functions = [line.strip() for line in lines if 'user_input' in line.lower() and 'def' in line]
    if user_input_functions:
        print(f"\nüìù –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:")
        for func in user_input_functions:
            print(f"   ‚Ä¢ {func}")

def test_bot_instance_creation(project_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    print(f"\nü§ñ –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –≠–ö–ó–ï–ú–ü–õ–Ø–†–ê –ë–û–¢–ê:")
    
    # –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ API, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_response = requests.get(f'http://localhost:5000/api/projects/{project_id}')
        if project_response.status_code == 200:
            project = project_response.json()
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: {project['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è)
            users_response = requests.get(f'http://localhost:5000/api/projects/{project_id}/users')
            if users_response.status_code == 200:
                users = users_response.json()
                print(f"‚úÖ API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_response = requests.get(f'http://localhost:5000/api/projects/{project_id}/users/stats')
            if stats_response.status_code == 200:
                stats = stats_response.json()
                print(f"‚úÖ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats}")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats_response.status_code}")
        else:
            print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê '–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –°–ë–û–† –î–ê–ù–ù–´–•'")
    print("=" * 60)
    
    test_complex_data_collection_template()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª complex_data_collection_bot.py –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞")

if __name__ == "__main__":
    main()