"""
–¢–ï–°–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò –í –ö–ù–û–ü–û–ß–ù–´–• –û–¢–í–ï–¢–ê–• - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder

–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö:
- Inline –∫–Ω–æ–ø–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ goto, command, url
- Reply –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∏ –∂–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
- –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é navigation actions –¥–ª—è user-input —É–∑–ª–æ–≤.
"""

import asyncio
import logging
import os
import sys
import datetime
import json
from typing import Dict, Any, Optional

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data: Dict[int, Dict[str, Any]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
database_available = False

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global database_available
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import asyncpg
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            conn = await asyncpg.connect(database_url)
            await conn.execute('''
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    user_data JSONB DEFAULT '{}'::jsonb
                )
            ''')
            await conn.close()
            database_available = True
            logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ: {e}")
        database_available = False

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not database_available:
        return False
    
    try:
        import asyncpg
        database_url = os.getenv('DATABASE_URL')
        conn = await asyncpg.connect(database_url)
        
        await conn.execute('''
            INSERT INTO bot_users (user_id, username, first_name, last_name)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                last_activity = CURRENT_TIMESTAMP
        ''', user_id, username, first_name, last_name)
        
        await conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        return False

async def update_user_data_in_db(user_id: int, data_key: str, data_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not database_available:
        return False
    
    try:
        import asyncpg
        database_url = os.getenv('DATABASE_URL')
        conn = await asyncpg.connect(database_url)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = await conn.fetchval(
            'SELECT user_data FROM bot_users WHERE user_id = $1',
            user_id
        )
        
        if current_data is None:
            current_data = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        current_data[data_key] = data_value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        await conn.execute(
            'UPDATE bot_users SET user_data = $1, last_activity = CURRENT_TIMESTAMP WHERE user_id = $2',
            json.dumps(current_data), user_id
        )
        
        await conn.close()
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î: {e}")
        return False

async def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
    return user_id in admin_ids

async def is_private_chat(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º"""
    return message.chat.type == 'private'

async def check_auth(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return True  # –ó–∞–≥–ª—É—à–∫–∞ - –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_to_db(user_id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    text = """üéØ <b>–¢–ï–°–¢ –ù–ê–í–ò–ì–ê–¶–ò–ò –í –ö–ù–û–ü–û–ß–ù–´–• –û–¢–í–ï–¢–ê–•</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏!

–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:
‚úÖ Inline –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π (goto, command, url)
‚úÖ Reply –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π  
‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì± Inline –∫–Ω–æ–ø–∫–∏", callback_data="test_inline"))
    builder.add(InlineKeyboardButton(text="‚å®Ô∏è Reply –∫–Ω–æ–ø–∫–∏", callback_data="test_reply"))
    builder.add(InlineKeyboardButton(text="üî¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä", callback_data="test_multiple"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = """‚ùì <b>–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /menu - –ë—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é

<b>–¢–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ <i>Inline –∫–Ω–æ–ø–∫–∏</i> - –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
‚Ä¢ <i>Reply –∫–Ω–æ–ø–∫–∏</i> - –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ–º–∏ –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
‚Ä¢ <i>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä</i> - –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

<b>–î–µ–π—Å—Ç–≤–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:</b>
‚Ä¢ goto - –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥—Ä—É–≥–æ–º—É —ç–∫—Ä–∞–Ω—É
‚Ä¢ command - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ url - –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏"""
    
    await message.answer(text)

@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    text = "üè† <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_testing"))
    builder.add(InlineKeyboardButton(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="show_help"))
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard)

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query(F.data == "test_inline")
async def handle_test_inline(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    await callback_query.message.edit_text(
        """üì± <b>–¢–ï–°–¢ INLINE –ö–ù–û–ü–û–ö</b>

–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–π —Ç–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
‚Ä¢ –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É
‚Ä¢ –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã  
‚Ä¢ –¢—Ä–µ—Ç—å—è –∫–Ω–æ–ø–∫–∞ ‚Üí –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–º–æ—â–∏", callback_data="goto_help")],
            [InlineKeyboardButton(text="üè† –í—ã–ø–æ–ª–Ω–∏—Ç—å /menu", callback_data="cmd_menu")],
            [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å GitHub", callback_data="url_github")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
    )

@dp.callback_query(F.data == "test_reply")
async def handle_test_reply(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç reply –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.delete()
    
    text = """‚å®Ô∏è <b>–¢–ï–°–¢ REPLY –ö–ù–û–ü–û–ö</b>

–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
–ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–π —Ç–∏–ø –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:"""
    
    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéØ Goto: –ü–æ–º–æ—â—å"))
    builder.add(KeyboardButton(text="üè† Command: Menu"))
    builder.add(KeyboardButton(text="üîó URL: GitHub"))
    builder.add(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    
    await callback_query.message.answer(text, reply_markup=keyboard)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if callback_query.from_user.id not in user_data:
        user_data[callback_query.from_user.id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    user_data[callback_query.from_user.id]["button_response_config"] = {
        "node_id": "test_reply_node",
        "variable": "reply_choice",
        "save_to_database": True,
        "success_message": "–í—ã–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
        "allow_multiple": False,
        "next_node_id": "",
        "options": [
            {"index": 0, "text": "üéØ Goto: –ü–æ–º–æ—â—å", "value": "goto_help", "action": "goto", "target": "help_screen", "url": ""},
            {"index": 1, "text": "üè† Command: Menu", "value": "cmd_menu", "action": "command", "target": "/menu", "url": ""},
            {"index": 2, "text": "üîó URL: GitHub", "value": "url_github", "action": "url", "target": "", "url": "https://github.com/"},
            {"index": 3, "text": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "value": "back_start", "action": "command", "target": "/start", "url": ""},
        ],
        "selected": []
    }

@dp.callback_query(F.data == "test_multiple")
async def handle_test_multiple(callback_query: types.CallbackQuery):
    """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    await callback_query.message.edit_text(
        """üî¢ <b>–¢–ï–°–¢ –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –í–´–ë–û–†–ê</b>

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üêç Python", callback_data="response_multiple_0")],
            [InlineKeyboardButton(text="‚öõÔ∏è React", callback_data="response_multiple_1")],  
            [InlineKeyboardButton(text="üü¢ Node.js", callback_data="response_multiple_2")],
            [InlineKeyboardButton(text="üóÑÔ∏è PostgreSQL", callback_data="response_multiple_3")],
            [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="response_multiple_done")]
        ])
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if callback_query.from_user.id not in user_data:
        user_data[callback_query.from_user.id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    user_data[callback_query.from_user.id]["button_response_config"] = {
        "node_id": "multiple_choice_node",
        "variable": "selected_technologies",
        "save_to_database": True,
        "success_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π!",
        "allow_multiple": True,
        "next_node_id": "",
        "options": [
            {"index": 0, "text": "üêç Python", "value": "python", "action": "goto", "target": "", "url": ""},
            {"index": 1, "text": "‚öõÔ∏è React", "value": "react", "action": "goto", "target": "", "url": ""},
            {"index": 2, "text": "üü¢ Node.js", "value": "nodejs", "action": "goto", "target": "", "url": ""},
            {"index": 3, "text": "üóÑÔ∏è PostgreSQL", "value": "postgresql", "action": "goto", "target": "", "url": ""},
        ],
        "selected": []
    }

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query(F.data == "goto_help")
async def handle_goto_help(callback_query: types.CallbackQuery):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è goto –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    await callback_query.message.edit_text(
        """‚ùì <b>–≠–ö–†–ê–ù –ü–û–ú–û–©–ò</b>

–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ <b>goto</b> –Ω–∞–≤–∏–≥–∞—Ü–∏—é!

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã –±–æ—Ç–∞.""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="back_to_start")]
        ])
    )

@dp.callback_query(F.data == "cmd_menu")
async def handle_cmd_menu(callback_query: types.CallbackQuery):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è command –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    import types as aiogram_types
    fake_message = aiogram_types.SimpleNamespace(
        from_user=callback_query.from_user,
        chat=callback_query.message.chat,
        text="/menu",
        message_id=callback_query.message.message_id,
        answer=callback_query.message.answer
    )
    
    await menu_handler(fake_message)
    await callback_query.answer("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /menu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")

@dp.callback_query(F.data == "url_github") 
async def handle_url_github(callback_query: types.CallbackQuery):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è URL –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    url = "https://github.com/"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å GitHub", url=url)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç–∞–º", callback_data="back_to_start")]
    ])
    await callback_query.message.edit_text(
        "üîó <b>–û–¢–ö–†–´–¢–ò–ï –°–°–´–õ–ö–ò</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "back_to_start")
async def handle_back_to_start(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É"""
    fake_message = types.Message(
        message_id=callback_query.message.message_id,
        from_user=callback_query.from_user,
        date=callback_query.message.date,
        chat=callback_query.message.chat,
        content_type="text",
        options={}
    )
    fake_message.answer = callback_query.message.edit_text
    await start_handler(fake_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
@dp.callback_query(F.data == "response_multiple_0")
async def handle_response_multiple_0(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä Python"""
    await handle_multiple_choice_response(callback_query, 0, "python", "üêç Python")

@dp.callback_query(F.data == "response_multiple_1")
async def handle_response_multiple_1(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä React"""
    await handle_multiple_choice_response(callback_query, 1, "react", "‚öõÔ∏è React")

@dp.callback_query(F.data == "response_multiple_2") 
async def handle_response_multiple_2(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä Node.js"""
    await handle_multiple_choice_response(callback_query, 2, "nodejs", "üü¢ Node.js")

@dp.callback_query(F.data == "response_multiple_3")
async def handle_response_multiple_3(callback_query: types.CallbackQuery):
    """–í—ã–±–æ—Ä PostgreSQL"""
    await handle_multiple_choice_response(callback_query, 3, "postgresql", "üóÑÔ∏è PostgreSQL")

@dp.callback_query(F.data == "response_multiple_done")
async def handle_response_multiple_done(callback_query: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    
    if len(config["selected"]) > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        variable_name = config.get("variable", "user_response")
        timestamp = datetime.datetime.now().isoformat()
        node_id = config.get("node_id", "unknown")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        response_data = {
            "value": [item["value"] for item in config["selected"]],
            "text": [item["text"] for item in config["selected"]],
            "type": "multiple_choice",
            "timestamp": timestamp,
            "nodeId": node_id,
            "variable": variable_name
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id][variable_name] = response_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if config.get("save_to_database"):
            saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
            if saved_to_db:
                logging.info(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {response_data['text']} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
        selected_items = ", ".join([item["text"] for item in config["selected"]])
        await callback_query.message.edit_text(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_items}")
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {variable_name} = {[item['text'] for item in config['selected']]}")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del user_data[user_id]["button_response_config"]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        await asyncio.sleep(2)
        fake_message = types.Message(
            message_id=callback_query.message.message_id,
            from_user=callback_query.from_user,
            date=callback_query.message.date,
            chat=callback_query.message.chat,
            content_type="text",
            options={}
        )
        fake_message.answer = callback_query.message.edit_text
        await start_handler(fake_message)
        
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        await callback_query.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º", show_alert=True)

async def handle_multiple_choice_response(callback_query: types.CallbackQuery, index: int, value: str, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ"""
    user_id = callback_query.from_user.id
    
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)
        return
    
    config = user_data[user_id]["button_response_config"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
    already_selected = any(item["value"] == value for item in config["selected"])
    
    if already_selected:
        # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
        config["selected"] = [item for item in config["selected"] if item["value"] != value]
        await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {text}")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        config["selected"].append({"text": text, "value": value})
        await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {text}")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
@dp.message(F.text)
async def handle_user_input(message: types.Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if user_id in user_data and "button_response_config" in user_data[user_id]:
        config = user_data[user_id]["button_response_config"]
        user_text = message.text
        
        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π
        selected_option = None
        for option in config.get("options", []):
            if option["text"] == user_text:
                selected_option = option
                break
        
        if selected_option:
            selected_value = selected_option["value"]
            selected_text = selected_option["text"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            variable_name = config.get("variable", "button_response")
            timestamp = datetime.datetime.now().isoformat()
            node_id = config.get("node_id", "unknown")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            response_data = {
                "value": selected_value,
                "text": selected_text,
                "type": "button_choice",
                "timestamp": timestamp,
                "nodeId": node_id,
                "variable": variable_name
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            user_data[user_id][variable_name] = response_data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if config.get("save_to_database"):
                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)
                if saved_to_db:
                    logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")
            await message.answer(f"{success_message}\n\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}", reply_markup=ReplyKeyboardRemove())
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del user_data[user_id]["button_response_config"]
            
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {variable_name} = {selected_text}")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏
            option_action = selected_option.get("action", "goto")
            option_target = selected_option.get("target", "")
            option_url = selected_option.get("url", "")
            
            if option_action == "url" and option_url:
                # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏
                url = option_url
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=url)]
                ])
                await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)
            elif option_action == "command" and option_target:
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                command = option_target
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                import types as aiogram_types
                fake_message = aiogram_types.SimpleNamespace(
                    from_user=message.from_user,
                    chat=message.chat,
                    text=command,
                    message_id=message.message_id,
                    answer=message.answer
                )
                
                if command == "/start":
                    try:
                        await start_handler(fake_message)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start: {e}")
                elif command == "/menu":
                    try:
                        await menu_handler(fake_message)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /menu: {e}")
                elif command == "/help":
                    try:
                        await help_handler(fake_message)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /help: {e}")
                else:
                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            elif option_action == "goto" and option_target:
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É
                target_node_id = option_target
                if target_node_id == "help_screen":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏
                    await message.answer(
                        """‚ùì <b>–≠–ö–†–ê–ù –ü–û–ú–û–©–ò</b>

–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ <b>goto</b> –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ reply –∫–Ω–æ–ø–∫–∏!

–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ reply –∫–Ω–æ–ø–∫–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–∏–µ —ç–∫—Ä–∞–Ω—ã –±–æ—Ç–∞."""
                    )
                else:
                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª: {target_node_id}")
            
            return
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            available_options = [option["text"] for option in config.get("options", [])]
            options_text = "\n".join([f"‚Ä¢ {opt}" for opt in available_options])
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\n\n{options_text}")
            return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logging.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())