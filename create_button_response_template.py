"""
–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
"""
import requests
import json
from nanoid import generate

def create_button_response_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ user-input —É–∑–ª–∞—Ö"""
    
    # –°–æ–∑–¥–∞–µ–º —É–∑–ª—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    nodes = []
    connections = []
    
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
    start_node = {
        "id": "start-1",
        "type": "start",
        "position": {"x": 100, "y": 100},
        "data": {
            "messageText": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏!\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é - —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.",
            "keyboardType": "inline",
            "buttons": [
                {
                    "id": generate(),
                    "text": "üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
                    "action": "goto",
                    "target": "question-1"
                }
            ],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    question1_node = {
        "id": "question-1", 
        "type": "user-input",
        "position": {"x": 100, "y": 300},
        "data": {
            "inputPrompt": "üéØ –ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
            "responseType": "buttons",
            "responseOptions": [
                {"id": "exp1", "text": "üå± –ù–æ–≤–∏—á–æ–∫", "value": "beginner"},
                {"id": "exp2", "text": "‚ö° –°—Ä–µ–¥–Ω–∏–π", "value": "intermediate"},
                {"id": "exp3", "text": "üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "value": "advanced"},
                {"id": "exp4", "text": "üéì –≠–∫—Å–ø–µ—Ä—Ç", "value": "expert"}
            ],
            "allowMultipleSelection": False,
            "inputVariable": "programming_level",
            "saveToDatabase": True,
            "inputSuccessMessage": "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å–∞–Ω.",
            "inputType": "text",
            "keyboardType": "none",
            "buttons": [],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    question2_node = {
        "id": "question-2",
        "type": "user-input", 
        "position": {"x": 100, "y": 500},
        "data": {
            "inputPrompt": "üíª –ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?\n\n(–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)",
            "responseType": "buttons",
            "responseOptions": [
                {"id": "lang1", "text": "üêç Python", "value": "python"},
                {"id": "lang2", "text": "‚ö° JavaScript", "value": "javascript"},
                {"id": "lang3", "text": "‚òï Java", "value": "java"},
                {"id": "lang4", "text": "üî∑ TypeScript", "value": "typescript"},
                {"id": "lang5", "text": "ü¶Ä Rust", "value": "rust"},
                {"id": "lang6", "text": "‚öôÔ∏è C++", "value": "cpp"}
            ],
            "allowMultipleSelection": True,
            "inputVariable": "preferred_languages",
            "saveToDatabase": True,
            "allowSkip": True,
            "inputSuccessMessage": "–°—É–ø–µ—Ä! –í–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            "inputType": "text",
            "keyboardType": "none",
            "buttons": [],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    question3_node = {
        "id": "question-3",
        "type": "user-input",
        "position": {"x": 100, "y": 700},
        "data": {
            "inputPrompt": "üìù –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥):",
            "responseType": "text",
            "inputType": "text",
            "inputVariable": "about_user",
            "minLength": 10,
            "maxLength": 200,
            "saveToDatabase": True,
            "allowSkip": True,
            "inputSuccessMessage": "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞—Å—Å–∫–∞–∑ –æ —Å–µ–±–µ!",
            "keyboardType": "none",
            "buttons": [],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none",
            "responseOptions": []
        }
    }
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
    final_node = {
        "id": "final-1",
        "type": "message",
        "position": {"x": 100, "y": 900},
        "data": {
            "messageText": "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!\n\n‚úÖ –í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\nüîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            "keyboardType": "inline",
            "buttons": [
                {
                    "id": generate(),
                    "text": "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                    "action": "goto", 
                    "target": "start-1"
                }
            ],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    nodes = [start_node, question1_node, question2_node, question3_node, final_node]
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connections = [
        {"id": "conn1", "source": "start-1", "target": "question-1"},
        {"id": "conn2", "source": "question-1", "target": "question-2"},
        {"id": "conn3", "source": "question-2", "target": "question-3"},
        {"id": "conn4", "source": "question-3", "target": "final-1"}
    ]
    
    bot_data = {
        "nodes": nodes,
        "connections": connections
    }
    
    template = {
        "name": "üîò –û–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏",
        "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ - —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞",
        "data": json.dumps(bot_data),
        "category": "business",
        "difficulty": "easy",
        "language": "ru",
        "tags": ["–æ–ø—Ä–æ—Å", "–∫–Ω–æ–ø–∫–∏", "–∞–Ω–∫–µ—Ç–∞", "—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä"],
        "estimatedTime": 3,
        "complexity": 2,
        "authorName": "TelegramBot Builder",
        "version": "1.0"
    }
    
    return template

def save_template_to_api():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ API"""
    template = create_button_response_template()
    
    try:
        response = requests.post(
            "http://localhost:5000/api/templates",
            json=template,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"‚úÖ –®–∞–±–ª–æ–Ω '{template['name']}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å ID: {result.get('id')}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

if __name__ == "__main__":
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...")
    result = save_template_to_api()
    if result:
        print("üéâ –®–∞–±–ª–æ–Ω –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")