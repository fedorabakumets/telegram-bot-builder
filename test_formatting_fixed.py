"""
–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ü–û–°–õ–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
"""

import requests

def create_formatting_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n–≠—Ç–æ **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n–≠—Ç–æ *–∫—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*\n–≠—Ç–æ `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π –∫–æ–¥`\n\n__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__\n~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~~\n\n> –¶–∏—Ç–∞—Ç–∞ —Ç–µ–∫—Å—Ç–∞\n\n# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
                    "formatMode": "markdown",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-html",
                            "text": "üîÑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            "action": "goto",
                            "target": "html-node"
                        },
                        {
                            "id": "btn-plain",
                            "text": "üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", 
                            "action": "goto",
                            "target": "plain-node"
                        }
                    ]
                }
            },
            {
                "id": "html-node",
                "type": "message",
                "data": {
                    "messageText": "üåü <b>HTML –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –≤ HTML\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i> –≤ HTML\n<code>–ö–æ–¥</code> –≤ HTML\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> –≤ HTML\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> –≤ HTML\n\n<pre>–ë–ª–æ–∫ –∫–æ–¥–∞\n  —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏</pre>\n\n<a href=\"https://telegram.org\">–°—Å—ã–ª–∫–∞ –≤ HTML</a>",
                    "formatMode": "html",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "üîô –ù–∞–∑–∞–¥ –∫ Markdown",
                            "action": "goto", 
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "plain-node", 
                "type": "message",
                "data": {
                    "messageText": "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n**–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –µ—Å—Ç—å**\n*–≠—Ç–æ —Ç–æ–∂–µ*\n<b>–ò —ç—Ç–æ</b>\n\n–ù–∏–∫–∞–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.",
                    "formatMode": "none",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-start",
                            "text": "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º",
                            "action": "goto",
                            "target": "start-1" 
                        }
                    ]
                }
            }
        ],
        "connections": [
            {
                "id": "conn1",
                "from": "start-1",
                "to": "html-node"
            },
            {
                "id": "conn2", 
                "from": "start-1",
                "to": "plain-node"
            },
            {
                "id": "conn3",
                "from": "html-node",
                "to": "start-1"
            },
            {
                "id": "conn4",
                "from": "plain-node", 
                "to": "start-1"
            }
        ]
    }
    
    return bot_data

def test_formatting_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot_data = create_formatting_test_bot()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        project_data = {
            "name": "–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–°–ü–†–ê–í–õ–ï–ù",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "data": bot_data
        }
        
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        if create_response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            return
            
        project_id = create_response.json()['id']
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        if export_response.status_code == 200:
            generated_code = export_response.json()['code']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            with open('formatting_test_FIXED.py', 'w', encoding='utf-8') as f:
                f.write(generated_code)
            
            print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'formatting_test_FIXED.py'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("\nüìä –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º parse_mode –≤ –∫–æ–¥–µ
            markdown_count = generated_code.count('parse_mode=ParseMode.MARKDOWN')
            html_count = generated_code.count('parse_mode=ParseMode.HTML')
            no_parse_count = generated_code.count('await message.answer(text,') - markdown_count - html_count
            
            print(f"üìù Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {markdown_count} —Ä–∞–∑")
            print(f"üåê HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {html_count} —Ä–∞–∑")
            print(f"üìÑ –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {no_parse_count} —Ä–∞–∑")
            
            if markdown_count > 0:
                print("‚úÖ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
            else:
                print("‚ùå Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
                
            if html_count > 0:
                print("‚úÖ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
            else:
                print("‚ùå HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–¥–µ")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
            if 'node.data.markdown === true' in generated_code:
                print("‚ùå –ù–ê–ô–î–ï–ù–ê –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: node.data.markdown === true")
            else:
                print("‚úÖ –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫–∞
            if 'formatMode' in generated_code:
                print("‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ formatMode –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ formatMode –ù–ï –Ω–∞–π–¥–µ–Ω–∞")
            
            print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            if markdown_count > 0 and html_count > 0:
                print("‚úÖ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–û –£–°–ü–ï–®–ù–û!")
                print("   –ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï–ú –û–°–¢–ê–õ–ò–°–¨")
                print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    test_formatting_generation()