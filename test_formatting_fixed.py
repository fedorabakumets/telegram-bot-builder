#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import requests

def create_fixed_formatting_test():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    # –ü–†–ê–í–ò–õ–¨–ù–û: markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-html",
                            "text": "HTML —Ç–µ—Å—Ç",
                            "action": "goto",
                            "target": "html-test"
                        },
                        {
                            "id": "btn-markdown",
                            "text": "Markdown —Ç–µ—Å—Ç",
                            "action": "goto",
                            "target": "markdown-test"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "html-test",
                "type": "message",
                "data": {
                    # –ü–†–ê–í–ò–õ–¨–ù–û: HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    "messageText": "–≠—Ç–æ HTML —É–∑–µ–ª —Å <b>–∂–∏—Ä–Ω—ã–º</b> —Ç–µ–∫—Å—Ç–æ–º –∏ <i>–∫—É—Ä—Å–∏–≤–æ–º</i>",
                    "keyboardType": "inline",
                    "formatMode": "html",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "–ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 100}
            },
            {
                "id": "markdown-test",
                "type": "message",
                "data": {
                    # –ü–†–ê–í–ò–õ–¨–ù–û: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    "messageText": "–≠—Ç–æ Markdown —É–∑–µ–ª —Å **–∂–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º –∏ *–∫—É—Ä—Å–∏–≤–æ–º*",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-back-md",
                            "text": "–ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 200}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "html-test"},
            {"id": "conn2", "from": "start-1", "to": "markdown-test"},
            {"id": "conn3", "from": "html-test", "to": "start-1"},
            {"id": "conn4", "from": "markdown-test", "to": "start-1"}
        ]
    }
    
    return bot_data

def test_fixed_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–æ—Ç
    bot_data = create_fixed_formatting_test()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('test_fixed_formatting_result.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_fixed_formatting_result.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                analyze_fixed_formatting(generated_code)
                
                print("\nüéØ –†–ï–ó–Æ–ú–ï:")
                print("=" * 30)
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
                print("   ‚Ä¢ Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (**—Ç–µ–∫—Å—Ç**) —Å formatMode: 'markdown'")
                print("   ‚Ä¢ HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (<b>—Ç–µ–∫—Å—Ç</b>) —Å formatMode: 'html'")
                print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
                print("   ‚Ä¢ HTML —Ç–µ–≥–∏ (<b>—Ç–µ–∫—Å—Ç</b>) —Å formatMode: 'markdown'")
                print("   ‚Ä¢ Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (**—Ç–µ–∫—Å—Ç**) —Å formatMode: 'html'")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def analyze_fixed_formatting(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º parse_mode
    markdown_count = code.count('parse_mode=ParseMode.MARKDOWN')
    html_count = code.count('parse_mode=ParseMode.HTML')
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ parse_mode=ParseMode.MARKDOWN: {markdown_count}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ parse_mode=ParseMode.HTML: {html_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ parse_mode
    lines = code.split('\n')
    
    # –ü–æ–∏—Å–∫ start_handler
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç
            for j in range(i, min(i + 20, len(lines))):
                if 'text = "' in lines[j] and '**' in lines[j]:
                    print(f"‚úÖ Start handler: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {j+1}")
                    break
            # –ò—â–µ–º parse_mode
            for j in range(i, min(i + 30, len(lines))):
                if 'parse_mode=ParseMode.MARKDOWN' in lines[j]:
                    print(f"‚úÖ Start handler: ParseMode.MARKDOWN –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {j+1}")
                    break
            break
    
    # –ü–æ–∏—Å–∫ HTML callback
    for i, line in enumerate(lines):
        if 'async def handle_callback_html_test' in line:
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç
            for j in range(i, min(i + 20, len(lines))):
                if 'text = "' in lines[j] and '<b>' in lines[j]:
                    print(f"‚úÖ HTML callback: HTML —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {j+1}")
                    break
            # –ò—â–µ–º parse_mode
            for j in range(i, min(i + 30, len(lines))):
                if 'parse_mode=ParseMode.HTML' in lines[j]:
                    print(f"‚úÖ HTML callback: ParseMode.HTML –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ {j+1}")
                    break
            break

if __name__ == "__main__":
    test_fixed_formatting()