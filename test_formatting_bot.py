"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder
"""

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode
import asyncpg
from datetime import datetime
import json

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:password@localhost:5432/bot_db")

# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
db_pool = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ë–î)
user_data = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        async with db_pool.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id BIGINT PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    registered_at TIMESTAMP DEFAULT NOW(),
                    last_interaction TIMESTAMP DEFAULT NOW(),
                    interaction_count INTEGER DEFAULT 0,
                    user_data JSONB DEFAULT '{}',
                    is_active BOOLEAN DEFAULT TRUE
                );
            """)
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
        db_pool = None

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO bot_users (user_id, username, first_name, last_name)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    last_interaction = NOW(),
                    interaction_count = bot_users.interaction_count + 1
            """, user_id, username, first_name, last_name)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        return False

async def get_user_from_db(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return None
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow("SELECT * FROM bot_users WHERE user_id = $1", user_id)
            if row:
                return dict(row)
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")
        return None

async def update_user_data_in_db(user_id: int, data_key: str, data_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return False
    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                UPDATE bot_users 
                SET user_data = user_data || $2::jsonb,
                    last_interaction = NOW()
                WHERE user_id = $1
            """, user_id, json.dumps({data_key: data_value}))
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if db_pool:
        user = await get_user_from_db(user_id)
        return user is not None
    return user_id in user_data

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    if not saved_to_db:
        user_data[user_id] = {
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "registered_at": message.date
        }
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    else:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    text = """üîß –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>
<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>
<code>–ö–æ–¥</code>
<pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre>

<blockquote>–¶–∏—Ç–∞—Ç–∞</blockquote>
<blockquote expandable>–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Ü–∏—Ç–∞—Ç–∞</blockquote>

<tg-spoiler>–°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>

<a href="https://example.com">–°—Å—ã–ª–∫–∞</a>"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üî§ Markdown —Ç–µ—Å—Ç", callback_data="markdown_test"))
    builder.add(InlineKeyboardButton(text="üé® HTML —Ç–µ—Å—Ç", callback_data="html_test"))
    builder.add(InlineKeyboardButton(text="üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="plain_test"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "markdown_test")
async def handle_callback_markdown_test(callback_query: types.CallbackQuery):
    text = """üîß –¢–µ—Å—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*
__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__
~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~~
`–ö–æ–¥`
```
–ë–ª–æ–∫ –∫–æ–¥–∞
```

> –¶–∏—Ç–∞—Ç–∞
>> –í–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞

||–°–ø–æ–π–ª–µ—Ä||

[–°—Å—ã–ª–∫–∞](https://example.com)"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    keyboard = builder.as_markup()
    
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN)

@dp.callback_query(F.data == "html_test")
async def handle_callback_html_test(callback_query: types.CallbackQuery):
    text = """üîß –¢–µ—Å—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>
<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>
<code>–ö–æ–¥</code>
<pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre>

<blockquote>–¶–∏—Ç–∞—Ç–∞</blockquote>
<blockquote expandable>–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Ü–∏—Ç–∞—Ç–∞</blockquote>

<tg-spoiler>–°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>

<a href="https://example.com">–°—Å—ã–ª–∫–∞</a>"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    keyboard = builder.as_markup()
    
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "plain_test")
async def handle_callback_plain_test(callback_query: types.CallbackQuery):
    text = """üîß –¢–µ—Å—Ç –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç* - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__ - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
<b>HTML —Ç–µ–≥–∏</b> - –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
<i>–ö—É—Ä—Å–∏–≤ HTML</i> - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å."""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start"))
    keyboard = builder.as_markup()
    
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "back_to_start")
async def handle_callback_back_to_start(callback_query: types.CallbackQuery):
    text = """üîß –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>
<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>
<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>
<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>
<code>–ö–æ–¥</code>
<pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre>

<blockquote>–¶–∏—Ç–∞—Ç–∞</blockquote>
<blockquote expandable>–†–∞—Å–∫—Ä—ã–≤–∞—é—â–∞—è—Å—è —Ü–∏—Ç–∞—Ç–∞</blockquote>

<tg-spoiler>–°–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç</tg-spoiler>

<a href="https://example.com">–°—Å—ã–ª–∫–∞</a>"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üî§ Markdown —Ç–µ—Å—Ç", callback_data="markdown_test"))
    builder.add(InlineKeyboardButton(text="üé® HTML —Ç–µ—Å—Ç", callback_data="html_test"))
    builder.add(InlineKeyboardButton(text="üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="plain_test"))
    keyboard = builder.as_markup()
    
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

async def main():
    await init_database()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)
    
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())