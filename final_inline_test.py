#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import re
import json

def test_inline_buttons_comprehensive():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ INLINE –ö–ù–û–ü–û–ö")
    print("=" * 40)
    
    # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –±–æ—Ç–∞
    with open('complex_test_bot_3.py', 'r', encoding='utf-8') as f:
        code = f.read()
    
    print(f"üìÑ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –æ—Ç–¥–µ–ª—å–Ω–æ
    commands = ['menu', 'games', 'settings', 'help', 'about']
    
    total_issues = 0
    total_commands = 0
    
    for cmd in commands:
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É /{cmd}:")
        
        # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        cmd_pattern = f'@dp\\.message\\(Command\\("{cmd}"\\)\\)(.*?)(?=@dp\\.|\\Z)'
        cmd_match = re.search(cmd_pattern, code, re.DOTALL)
        
        if cmd_match:
            total_commands += 1
            cmd_code = cmd_match.group(1)
            
            # –°—á–∏—Ç–∞–µ–º –≤—ã–∑–æ–≤—ã message.answer()
            answer_calls = re.findall(r'await message\.answer\(', cmd_code)
            answer_count = len(answer_calls)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ inline –∫–Ω–æ–ø–∫–∏
            has_inline = 'InlineKeyboardBuilder()' in cmd_code
            
            print(f"  ‚Ä¢ Inline –∫–Ω–æ–ø–∫–∏: {'‚úÖ' if has_inline else '‚ùå'}")
            print(f"  ‚Ä¢ –í—ã–∑–æ–≤–æ–≤ message.answer(): {answer_count}")
            
            if has_inline and answer_count == 1:
                print(f"  ‚úÖ –û–¢–õ–ò–ß–ù–û: Inline –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            elif has_inline and answer_count > 1:
                print(f"  ‚ùå –ü–†–û–ë–õ–ï–ú–ê: {answer_count} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ")
                total_issues += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
                lines = cmd_code.split('\n')
                answer_lines = []
                for i, line in enumerate(lines):
                    if 'await message.answer(' in line:
                        answer_lines.append(f"    –°—Ç—Ä–æ–∫–∞ {i+1}: {line.strip()}")
                
                print(f"  üîß –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã:")
                for line in answer_lines[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(line)
            elif not has_inline:
                print(f"  ‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ inline –∫–Ω–æ–ø–æ–∫")
            else:
                print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"  ‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ callback handlers
    print(f"\nüîó –ü—Ä–æ–≤–µ—Ä—è–µ–º callback handlers:")
    callback_handlers = re.findall(r'@dp\.callback_query\([^)]+\)', code)
    print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ callback handlers: {len(callback_handlers)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å callback handlers
    callback_pattern = r'@dp\.callback_query\([^)]+\)(.*?)(?=@dp\.|\\Z)'
    callback_matches = re.findall(callback_pattern, code, re.DOTALL)
    
    edit_text_count = 0
    answer_count = 0
    
    for callback_code in callback_matches:
        if 'callback_query.message.edit_text' in callback_code:
            edit_text_count += 1
        if 'await message.answer(' in callback_code:
            answer_count += 1
    
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç edit_text(): {edit_text_count}")
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é—Ç message.answer(): {answer_count}")
    
    if edit_text_count > answer_count:
        print(f"  ‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ callback –∏—Å–ø–æ–ª—å–∑—É—é—Ç edit_text() (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ callback –∏—Å–ø–æ–ª—å–∑—É—é—Ç message.answer() –≤–º–µ—Å—Ç–æ edit_text()")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö message handlers
    print(f"\nüìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ message handlers:")
    separate_handlers = re.findall(r'async def handle_[^(]+\(message: types\.Message\)', code)
    
    if separate_handlers:
        print(f"  ‚ùå –ù–∞–π–¥–µ–Ω–æ {len(separate_handlers)} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö handlers:")
        for handler in separate_handlers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"    ‚Ä¢ {handler}")
        print(f"  üîß –≠—Ç–∏ handlers —Å–æ–∑–¥–∞—é—Ç –ª–∏—à–Ω–∏–µ message.answer() –≤—ã–∑–æ–≤—ã")
    else:
        print(f"  ‚úÖ –û—Ç–¥–µ–ª—å–Ω—ã—Ö message handlers –Ω–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã inline –∫–Ω–æ–ø–æ–∫
    print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É inline –∫–Ω–æ–ø–æ–∫:")
    
    # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: builder -> buttons -> markup -> answer
    correct_pattern = r'builder = InlineKeyboardBuilder\(\)\s*\n(?:\s*builder\.add\([^)]+\)\s*\n)+\s*keyboard = builder\.as_markup\(\)\s*\n[^#]*await message\.answer\([^,]+, reply_markup=keyboard\)'
    correct_matches = re.findall(correct_pattern, code, re.DOTALL)
    
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö inline —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(correct_matches)}")
    
    # –ò—â–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    wrong_pattern = r'await message\.answer\([^)]+\)\s*\n[^#]*await message\.answer\([^)]+reply_markup='
    wrong_matches = re.findall(wrong_pattern, code, re.DOTALL)
    
    print(f"  ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(wrong_matches)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéñÔ∏è –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"-" * 25)
    print(f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {total_commands}")
    print(f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {total_issues}")
    print(f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö inline —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(correct_matches)}")
    print(f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä: {len(wrong_matches)}")
    
    if total_issues == 0 and len(wrong_matches) == 0:
        print(f"üéâ –ò–î–ï–ê–õ–¨–ù–û! –í—Å–µ inline –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
    elif total_issues <= 1:
        print(f"üëç –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return True
    else:
        print(f"‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä—å—ë–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return False

def compare_with_simple_test():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ—Å—Ç–æ–º"""
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–û–°–¢–´–ú –¢–ï–°–¢–û–ú:")
    print(f"-" * 30)
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    try:
        with open('test_fixed_menu_bot.py', 'r', encoding='utf-8') as f:
            simple_content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º Python –∫–æ–¥ –∏–∑ JSON
        simple_data = json.loads(simple_content)
        simple_code = simple_data['code']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç
        simple_commands = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', simple_code)
        simple_callbacks = re.findall(r'@dp\.callback_query\(', simple_code)
        
        print(f"‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç: {len(simple_commands)} –∫–æ–º–∞–Ω–¥, {len(simple_callbacks)} callbacks")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –±–æ—Ç
        with open('complex_test_bot_3.py', 'r', encoding='utf-8') as f:
            complex_code = f.read()
        
        complex_commands = re.findall(r'@dp\.message\(Command\("([^"]+)"\)\)', complex_code)
        complex_callbacks = re.findall(r'@dp\.callback_query\(', complex_code)
        
        print(f"‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –±–æ—Ç: {len(complex_commands)} –∫–æ–º–∞–Ω–¥, {len(complex_callbacks)} callbacks")
        print(f"‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {len(complex_commands)/len(simple_commands):.1f}x –∫–æ–º–∞–Ω–¥, {len(complex_callbacks)/len(simple_callbacks):.1f}x callbacks")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_inline_buttons_comprehensive()
    compare_with_simple_test()
    
    print(f"\n" + "="*50)
    if success:
        print(f"üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print(f"üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")

if __name__ == "__main__":
    main()