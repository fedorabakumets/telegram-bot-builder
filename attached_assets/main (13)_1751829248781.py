import telebot
import re
import json
import os
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging
from flask import Flask
import threading
import time
from requests.exceptions import ConnectionError, ReadTimeout
from urllib3.exceptions import ProtocolError

# –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
import matplotlib
matplotlib.use('Agg')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π backend
import matplotlib.pyplot as plt
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–∞
app = Flask(__name__)

@app.route('/')
def index():
    return "ü§ñ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/health')
def health():
    return {"status": "ok", "bot": "running"}

def run_flask():
    app.run(host='0.0.0.0', port=5000, debug=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7630457695:AAGDylpXjyqqY7Naq2IXnwGc_x7QwAA8GoY"
bot = telebot.TeleBot(BOT_TOKEN)
ADMIN_ID = 1612141295  # ID –∞–¥–º–∏–Ω–∞
DATA_FILE = "users_data.json"
CHAT_LINK = "https://t.me/+agkIVgCzHtY2ZTA6"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def load_users_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r') as file:
            data = json.load(file)
        unique_data = {}
        for user_id, user_data in data.items():
            if user_id in unique_data:
                logging.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –¥–ª—è user_id {user_id}, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å")
            unique_data[user_id] = user_data
        return unique_data
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_users_data(data, force=False):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        with open(DATA_FILE, 'w') as file:
            json.dump(data, file, separators=(',', ':'))
        logging.debug(f"DATA_SAVE: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_FILE}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {DATA_FILE}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
users_data = load_users_data()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–æ
def clean_metro_data(user):
    """–û—á–∏—â–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    metro_stations = user.get('description', {}).get('metro_station', [])
    if isinstance(metro_stations, list) and "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ" in metro_stations:
        # –ï—Å–ª–∏ –µ—Å—Ç—å "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ", –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ
        if len(metro_stations) > 1:
            user['description']['metro_station'] = ["–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"]
            return True
    return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_description_complete(user):
    desc = user.get('description', {})
    return all([
        desc.get('gender'),
        desc.get('name'),
        desc.get('age'),
        desc.get('metro_station'),
        desc.get('interests'),
        desc.get('marital_status'),
        desc.get('sexual_orientation')
        # –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª –∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    ])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_progress(user):
    desc = user.get('description', {})
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_steps = [
        ('–ü–æ–ª', desc.get('gender')),
        ('–ò–º—è', desc.get('name')),
        ('–í–æ–∑—Ä–∞—Å—Ç', desc.get('age')),
        ('–ú–µ—Ç—Ä–æ', desc.get('metro_station')),
        ('–ò–Ω—Ç–µ—Ä–µ—Å—ã', desc.get('interests')),
        ('–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', desc.get('marital_status')),
        ('–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è', desc.get('sexual_orientation'))
    ]

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
    optional_steps = [
        ('Telegram-–∫–∞–Ω–∞–ª', desc.get('telegram_channel') is not None),
        ('–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', desc.get('extra_info') is not None and desc.get('extra_info') != "")
    ]

    required_completed = sum(1 for _, value in required_steps if value)
    optional_completed = sum(1 for _, value in optional_steps if value)

    total_required = len(required_steps)
    total_optional = len(optional_steps)

    # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    filled_required = "üü¢" * required_completed
    empty_required = "‚ö™" * (total_required - required_completed)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    filled_optional = "üü°" * optional_completed
    empty_optional = "‚ö´" * (total_optional - optional_completed)

    progress_bar = filled_required + empty_required + filled_optional + empty_optional

    return f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {required_completed}/{total_required} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö + {optional_completed}/{total_optional} –¥–æ–ø.\n{progress_bar}\n"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É
def get_join_request_keyboard():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–î–∞ üòé"), KeyboardButton("–ù–µ—Ç üôÖ"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª–∞ (reply-–∫–Ω–æ–ø–∫–∏)
def get_gender_keyboard(show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ú—É–∂—á–∏–Ω–∞ üë®"), KeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞ üë©"))
    return markup

# --- –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ ---
def get_interests_keyboard(selected=None, category=None, show_back=False):
    markup = InlineKeyboardMarkup(row_width=2)
    selected = selected or []
    if not category:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        categories = list(INTEREST_CATEGORIES.keys())
        for i in range(0, len(categories), 2):
            if i + 1 < len(categories):
                markup.add(
                    InlineKeyboardButton(categories[i], callback_data=f"interestcat_{categories[i]}"),
                    InlineKeyboardButton(categories[i + 1], callback_data=f"interestcat_{categories[i + 1]}")
                )
            else:
                markup.add(InlineKeyboardButton(categories[i], callback_data=f"interestcat_{categories[i]}"))
        markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="interests_done"))
        if show_back:
            markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_metro"))
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        interests = list(INTEREST_CATEGORIES[category])
        for i in range(0, len(interests), 2):
            if i + 1 < len(interests):
                interest1, emoji1 = interests[i]
                interest2, emoji2 = interests[i + 1]
                is_selected1 = interest1 in selected
                is_selected2 = interest2 in selected
                btn_text1 = f"{emoji1} {interest1}{' ‚úÖ' if is_selected1 else ''}"
                btn_text2 = f"{emoji2} {interest2}{' ‚úÖ' if is_selected2 else ''}"
                markup.add(
                    InlineKeyboardButton(btn_text1, callback_data=f"interest_{interest1}"),
                    InlineKeyboardButton(btn_text2, callback_data=f"interest_{interest2}")
                )
            else:
                interest, emoji = interests[i]
                is_selected = interest in selected
                btn_text = f"{emoji} {interest}{' ‚úÖ' if is_selected else ''}"
                markup.add(InlineKeyboardButton(btn_text, callback_data=f"interest_{interest}"))
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="interests_back"))
        markup.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="interests_done"))
        if show_back:
            markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="back_to_edit_select"))
    return markup
# --- –∫–æ–Ω–µ—Ü –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –ø–æ –≤–µ—Ç–∫–∞–º
def get_metro_keyboard(selected=None, show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("–ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞ üü•"),
        KeyboardButton("–°–∏–Ω—è—è –≤–µ—Ç–∫–∞ üü¶")
    )
    markup.add(
        KeyboardButton("–ó–µ–ª—ë–Ω–∞—è –≤–µ—Ç–∫–∞ üü©"),
        KeyboardButton("–û—Ä–∞–Ω–∂–µ–≤–∞—è –≤–µ—Ç–∫–∞ üüß")
    )
    markup.add(
        KeyboardButton("–§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞ üü™"),
        KeyboardButton("–Ø –∏–∑ –õ–û üè°")
    )
    markup.add(KeyboardButton("–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ üåç"))

    # –í—Å–µtÔøΩ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ ‚úÖ"
    markup.add(KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))

    return markup

def get_line_keyboard(stations, color, selected=None):
    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selected
    if selected is None:
        selected = []
    elif not isinstance(selected, list):
        selected = [selected] if selected else []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ 3 –≤ —Ä—è–¥
    current_row = []
    for station in stations:
        is_selected = station in selected
        text = f"{color} {station}{' ‚úÖ' if is_selected else ''}"
        current_row.append(KeyboardButton(text))
        if len(current_row) == 3:
            markup.add(*current_row)
            current_row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç–∞–Ω—Ü–∏–∏
    if current_row:
        markup.add(*current_row)

    markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"), KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))
    return markup

def get_red_line_keyboard(selected=None):
    stations = [
        "–î–µ–≤—è—Ç–∫–∏–Ω–æ", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è", "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è",
        "–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞", "–õ–µ—Å–Ω–∞—è", "–í—ã–±–æ—Ä–≥—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞",
        "–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è", "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ë–∞–ª—Ç–∏–π—Å–∫–∞—è", "–ù–∞—Ä–≤—Å–∫–∞—è", "–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥",
        "–ê–≤—Ç–æ–≤–æ", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"
    ]
    return get_line_keyboard(stations, "üü•", selected)

def get_blue_line_keyboard(selected=None):
    stations = [
        "–ü–∞—Ä–Ω–∞—Å", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è", "–û–∑–µ—Ä–∫–∏", "–£–¥–µ–ª—å–Ω–∞—è", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è",
        "–ß—ë—Ä–Ω–∞—è —Ä–µ—á–∫–∞", "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è", "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "–°–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞", "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è",
        "–ó–≤—ë–∑–¥–Ω–∞—è", "–ö—É–ø—á–∏–Ω–æ"
    ]
    return get_line_keyboard(stations, "üü¶", selected)

def get_green_line_keyboard(selected=None):
    stations = [
        "–ë–µ–≥–æ–≤–∞—è", "–ó–µ–Ω–∏—Ç", "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è", "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è",
        "–ì–æ—Å—Ç–∏–Ω—ã–π –¥–≤–æ—Ä", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ",
        "–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–û–±—É—Ö–æ–≤–æ", "–†—ã–±–∞—Ü–∫–æ–µ"
    ]
    return get_line_keyboard(stations, "üü©", selected)

def get_orange_line_keyboard(selected=None):
    stations = [
        "–°–ø–∞—Å—Å–∫–∞—è", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è", "–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ", "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è", "–õ–∞–¥–æ–∂—Å–∫–∞—è",
        "–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤", "–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ"
    ]
    return get_line_keyboard(stations, "üüß", selected)

def get_purple_line_keyboard(selected=None):
    stations = [
        "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è", "–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤",
        "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è", "–°–∞–¥–æ–≤–∞—è",
        "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è", "–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª", "–í–æ–ª–∫–æ–≤—Å–∫–∞—è", "–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è",
        "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã", "–î—É–Ω–∞–π—Å–∫–∞—è", "–®—É—à–∞—Ä—ã"
    ]
    return get_line_keyboard(stations, "üü™", selected)

def get_lo_cities_keyboard(selected=None):
    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è selected
    if selected is None:
        selected = []
    elif not isinstance(selected, list):
        selected = [selected] if selected else []

    cities = [
        "–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç", "–ü–µ—Ç–µ—Ä–≥–æ—Ñ", "–õ–æ–º–æ–Ω–æ—Å–æ–≤", "–ü—É—à–∫–∏–Ω", "–ü–∞–≤–ª–æ–≤—Å–∫", "–ö–æ–ª–ø–∏–Ω–æ", "–°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫", "–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫",
        "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫", "–ì–∞—Ç—á–∏–Ω–∞", "–í—ã–±–æ—Ä–≥", "–ü—Ä–∏–æ–∑–µ—Ä—Å–∫", "–¢–æ—Å–Ω–æ", "–õ—É–≥–∞", "–ö–∏—Ä–∏—à–∏", "–í–æ–ª—Ö–æ–≤", "–ö–∏–Ω–≥–∏—Å–µ–ø–ø",
        "–°–æ—Å–Ω–æ–≤—ã–π –ë–æ—Ä", "–¢–∏—Ö–≤–∏–Ω", "–°–µ—Ä—Ç–æ–ª–æ–≤–æ", "–®–ª–∏—Å—Å–µ–ª—å–±—É—Ä–≥", "–û—Ç—Ä–∞–¥–Ω–æ–µ", "–°–ª–∞–Ω—Ü—ã", "–ë–æ–∫—Å–∏—Ç–æ–≥–æ—Ä—Å–∫", "–ü–æ–¥–ø–æ—Ä–æ–∂—å–µ",
        "–õ–æ–¥–µ–π–Ω–æ–µ –ü–æ–ª–µ", "–ù–∏–∫–æ–ª—å—Å–∫–æ–µ", "–ö–æ–º–º—É–Ω–∞—Ä", "–í–æ–ª–æ—Å–æ–≤–æ", "–ù–æ–≤–∞—è –õ–∞–¥–æ–≥–∞", "–°—è—Å—å—Å—Ç—Ä–æ–π", "–°–≤–µ—Ç–æ–≥–æ—Ä—Å–∫",
        "–ö–∞–º–µ–Ω–Ω–æ–≥–æ—Ä—Å–∫", "–ò–≤–∞–Ω–≥–æ—Ä–æ–¥", "–ü–∏–∫–∞–ª—ë–≤–æ", "–í—ã—Å–æ—Ü–∫", "–†–æ—â–∏–Ω–æ", "–ú—É—Ä–∏–Ω–æ", "–¢–æ–∫—Å–æ–≤–æ", "–°–∏–Ω—è–≤–∏–Ω–æ", "–ë—É–≥—Ä—ã",
        "–ö–∏—Ä–æ–≤—Å–∫", "–ú–≥–∞", "–£–ª—å—è–Ω–æ–≤–∫–∞", "–õ—é–±–∞–Ω—å", "–ü—Ä–∏–º–æ—Ä—Å–∫", "–î—Ä—É–≥–æ–µ ‚úçÔ∏è"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ 3 –≤ —Ä—è–¥
    current_row = []
    for city in cities:
        is_selected = f"–õ–û: {city}" in selected
        text = f"üè° {city}{' ‚úÖ' if is_selected else ''}"
        current_row.append(KeyboardButton(text))
        if len(current_row) == 3:
            markup.add(*current_row)
            current_row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≥–æ—Ä–æ–¥–∞
    if current_row:
        markup.add(*current_row)

    markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"), KeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
def get_marital_status_keyboard(show_back=False):
    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("üíî –ù–µ –∂–µ–Ω–∞—Ç"),
        KeyboardButton("üíî –ù–µ –∑–∞–º—É–∂–µ–º"),
        KeyboardButton("üíï –í—Å—Ç—Ä–µ—á–∞—é—Å—å")
    )
    markup.add(
        KeyboardButton("üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)"),
        KeyboardButton("üíí –ñ–µ–Ω–∞—Ç"),
        KeyboardButton("üíí –ó–∞–º—É–∂–µ–º")
    )
    markup.add(
        KeyboardButton("ü§ù –í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ"),
        KeyboardButton("üòç –í–ª—é–±–ª—ë–Ω"),
        KeyboardButton("ü§∑ –í—Å—ë —Å–ª–æ–∂–Ω–æ")
    )
    markup.add(
        KeyboardButton("üîç –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ")
    )
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
def get_sexual_orientation_keyboard(show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    orientations = [
        "–ì–µ—Ç–µ—Ä–æ üòä",
        "–ë–∏ üåà",
        "–ì–µ–π/–õ–µ—Å–±–∏ üè≥Ô∏è‚Äçüåà",
        "–î—Ä—É–≥–æ–µ ‚úçÔ∏è"
    ]
    for text in orientations:
        markup.add(KeyboardButton(text))
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞
def get_telegram_channel_keyboard(show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª üì¢"),
        KeyboardButton("–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å üö´")
    )
    markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (inline)
def get_edit_field_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    fields = [
        ("–ü–æ–ª üë®üë©", "edit_gender"),
        ("–ò–º—è ‚úèÔ∏è", "edit_name"),
        ("–í–æ–∑—Ä–∞—Å—Ç üéÇ", "edit_age"),
        ("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá", "edit_metro"),
        ("–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ", "edit_interests"),
        ("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç", "edit_marital"),
        ("–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà", "edit_orientation"),
        ("–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢", "edit_tg_channel"),
        ("–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù", "edit_extra")
    ]
    for text, callback in fields:
        markup.add(InlineKeyboardButton(text, callback_data=callback))
    markup.add(InlineKeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è", callback_data="back_to_profile"))
    markup.add(InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ", callback_data="reset_profile"))
    return markup

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_edit_field_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("–ü–æ–ª üë®üë©"),
        KeyboardButton("–ò–º—è ‚úèÔ∏è"),
        KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç üéÇ")
    )
    markup.add(
        KeyboardButton("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá"),
        KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ"),
        KeyboardButton("–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç")
    )
    markup.add(
        KeyboardButton("–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà"),
        KeyboardButton("–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢"),
        KeyboardButton("–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù")
    )
    markup.add(
        KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"),
        KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ")
    )
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
def get_admin_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="admin_stats"),
        InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìã", callback_data="list_users")
    )
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_profile_keyboard():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
    return markup

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_extra_info_keyboard(edit=False, show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    if edit:
        markup.add(
            KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å"),
            KeyboardButton("–£–¥–∞–ª–∏—Ç—å üóëÔ∏è")
        )
        markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
    else:
        markup.add(
            KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å"),
            KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
        )
        if show_back:
            markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def get_extra_info_reply_keyboard(show_back=False):
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    markup.add(
        KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å"),
        KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
    )
    markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞
def get_interest_emoji(interest):
    for category_name, interests_list in INTEREST_CATEGORIES.items():
        for interest_name, emoji in interests_list:
            if interest_name == interest:
                return emoji
    return "üéØ"  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
def get_metro_emoji(station):
    # –ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞
    red_stations = [
        "–î–µ–≤—è—Ç–∫–∏–Ω–æ", "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è", "–ü–æ–ª–∏—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è",
        "–ü–ª–æ—â–∞–¥—å –ú—É–∂–µ—Å—Ç–≤–∞", "–õ–µ—Å–Ω–∞—è", "–í—ã–±–æ—Ä–≥—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞",
        "–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –í–æ—Å—Å—Ç–∞–Ω–∏—è", "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ë–∞–ª—Ç–∏–π—Å–∫–∞—è", "–ù–∞—Ä–≤—Å–∫–∞—è", "–ö–∏—Ä–æ–≤—Å–∫–∏–π –∑–∞–≤–æ–¥",
        "–ê–≤—Ç–æ–≤–æ", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–ü—Ä–æ—Å–ø–µ–∫—Ç –í–µ—Ç–µ—Ä–∞–Ω–æ–≤"
    ]
    # –°–∏–Ω—è—è –≤–µ—Ç–∫–∞
    blue_stations = [
        "–ü–∞—Ä–Ω–∞—Å", "–ü—Ä–æ—Å–ø–µ–∫—Ç –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏—è", "–û–∑–µ—Ä–∫–∏", "–£–¥–µ–ª—å–Ω–∞—è", "–ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è",
        "–ß—ë—Ä–Ω–∞—è —Ä–µ—á–∫–∞", "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∞—è", "–ì–æ—Ä—å–∫–æ–≤—Å–∫–∞—è", "–ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "–°–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–§—Ä—É–Ω–∑–µ–Ω—Å–∫–∞—è",
        "–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞", "–≠–ª–µ–∫—Ç—Ä–æ—Å–∏–ª–∞", "–ü–∞—Ä–∫ –ü–æ–±–µ–¥—ã", "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è",
        "–ó–≤—ë–∑–¥–Ω–∞—è", "–ö—É–ø—á–∏–Ω–æ"
    ]
    # –ó–µ–ª—ë–Ω–∞—è –≤–µ—Ç–∫–∞
    green_stations = [
        "–ë–µ–≥–æ–≤–∞—è", "–ó–µ–Ω–∏—Ç", "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è", "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∞—è",
        "–ì–æ—Å—Ç–∏–Ω—ã–π –¥–≤–æ—Ä", "–ú–∞—è–∫–æ–≤—Å–∫–∞—è", "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ",
        "–ï–ª–∏–∑–∞—Ä–æ–≤—Å–∫–∞—è", "–õ–æ–º–æ–Ω–æ—Å–æ–≤—Å–∫–∞—è", "–ü—Ä–æ–ª–µ—Ç–∞—Ä—Å–∫–∞—è", "–û–±—É—Ö–æ–≤–æ", "–†—ã–±–∞—Ü–∫–æ–µ"
    ]
    # –û—Ä–∞–Ω–∂–µ–≤–∞—è –≤–µ—Ç–∫–∞
    orange_stations = [
        "–°–ø–∞—Å—Å–∫–∞—è", "–î–æ—Å—Ç–æ–µ–≤—Å–∫–∞—è", "–õ–∏–≥–æ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç",
        "–ü–ª–æ—â–∞–¥—å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ù–µ–≤—Å–∫–æ–≥–æ", "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫–∞—è", "–õ–∞–¥–æ–∂—Å–∫–∞—è",
        "–ü—Ä–æ—Å–ø–µ–∫—Ç –ë–æ–ª—å—à–µ–≤–∏–∫–æ–≤", "–£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ"
    ]
    # –§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞
    purple_stations = [
        "–ö–æ–º–µ–Ω–¥–∞–Ω—Ç—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç", "–°—Ç–∞—Ä–∞—è –î–µ—Ä–µ–≤–Ω—è", "–ö—Ä–µ—Å—Ç–æ–≤—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤",
        "–ß–∫–∞–ª–æ–≤—Å–∫–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", "–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∞—è", "–°–∞–¥–æ–≤–∞—è",
        "–ó–≤–µ–Ω–∏–≥–æ—Ä–æ–¥—Å–∫–∞—è", "–û–±–≤–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª", "–í–æ–ª–∫–æ–≤—Å–∫–∞—è", "–ë—É—Ö–∞—Ä–µ—Å—Ç—Å–∫–∞—è",
        "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è", "–ü—Ä–æ—Å–ø–µ–∫—Ç –°–ª–∞–≤—ã", "–î—É–Ω–∞–π—Å–∫–∞—è", "–®—É—à–∞—Ä—ã"
    ]

    if station in red_stations:
        return "üü•"
    elif station in blue_stations:
        return "üü¶"
    elif station in green_stations:
        return "üü©"
    elif station in orange_stations:
        return "üüß"
    elif station in purple_stations:
        return "üü™"
    elif station.startswith("–õ–û:"):
        return "üè°"
    elif station == "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ":
        return "üåç"
    else:
        return "üöá"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
def get_marital_status_emoji(status):
    if status == "–ù–µ –∂–µ–Ω–∞—Ç":
        return "üíî"
    elif status == "–ù–µ –∑–∞–º—É–∂–µ–º":
        return "üíî"
    elif status == "–í—Å—Ç—Ä–µ—á–∞—é—Å—å":
        return "üíï"
    elif status == "–ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)":
        return "üíç"
    elif status == "–ñ–µ–Ω–∞—Ç":
        return "üíí"
    elif status == "–ó–∞–º—É–∂–µ–º":
        return "üíí"
    elif status == "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ":
        return "ü§ù"
    elif status == "–í–ª—é–±–ª—ë–Ω":
        return "üòç"
    elif status == "–í—Å—ë —Å–ª–æ–∂–Ω–æ":
        return "ü§∑"
    elif status == "–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ":
        return "üîç"
    else:
        return "üíî"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
def get_orientation_emoji(orientation):
    if orientation == "–ì–µ—Ç–µ—Ä–æ":
        return "üòä"
    elif orientation == "–ë–∏":
        return "üåà"
    elif orientation == "–ì–µ–π/–õ–µ—Å–±–∏":
        return "üè≥Ô∏è‚Äçüåà"
    else:
        return "‚úçÔ∏è"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
def get_yes_no_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
    btn_yes = KeyboardButton("–î–∞")
    btn_no = KeyboardButton("–ù–µ—Ç")
    markup.add(btn_yes, btn_no)
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ü—Ä–æ—Ñ–∏–ª—å –∏ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
def get_emoji_keyboard():
    markup = InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏ –ü—Ä–æ—Ñ–∏–ª—å –∏ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
    markup.add(
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
        InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", callback_data="show_chat_link")
    )

    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
def get_back_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
def get_main_reply_keyboard():
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    markup.add(
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç")
    )
    markup.add(KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"))
    return markup

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def format_profile(user, is_own_profile=True):
    desc = user['description']

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ/–≥–æ—Ä–æ–¥–æ–≤ —Å —ç–º–æ–¥–∑–∏
    metro = desc.get('metro_station')
    metro_label = "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ"

    if isinstance(metro, list):
        metro_with_emoji = []
        for station in metro:
            if station == "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ":
                metro_with_emoji.append("üåç –Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ")
                metro_label = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
            else:
                emoji = get_metro_emoji(station)
                metro_with_emoji.append(f"{emoji} {station}")
        metro_str = ', '.join(metro_with_emoji) if metro else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    elif isinstance(metro, str):
        if metro == "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ":
            metro_str = "üåç –Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
            metro_label = "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
        else:
            emoji = get_metro_emoji(metro)
            metro_str = f"{emoji} {metro}"
    else:
        metro_str = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å —ç–º–æ–¥–∑–∏
    if desc['interests']:
        interests_with_emoji = []
        for interest in desc['interests']:
            emoji = get_interest_emoji(interest)
            interests_with_emoji.append(f"{emoji} {interest}")
        interests = ', '.join(interests_with_emoji)
    else:
        interests = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
    marital_status = desc['marital_status']
    marital_emoji = get_marital_status_emoji(marital_status)
    marital_str = f"{marital_emoji} {marital_status}" if marital_status else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å —ç–º–æ–¥–∑–∏
    orientation = desc['sexual_orientation']
    orientation_emoji = get_orientation_emoji(orientation)
    orientation_str = f"{orientation_emoji} {orientation}" if orientation else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    tg_channel = desc['telegram_channel'] if desc['telegram_channel'] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    extra_info = desc['extra_info'] if desc['extra_info'] not in (None, "") else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if is_own_profile:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        progress = get_profile_progress(user)
        header = f"üåü –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á:\n\n{progress}\n"
    else:
        # –î–ª—è —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ
        username = user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        name = desc.get('name', username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç–µ
        is_complete = is_description_complete(user)
        wants_link = user.get('wants_link', False)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∞—Ç–µ
        if is_complete and wants_link:
            chat_status = "üíö –°–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ"
        else:
            chat_status = "üíî –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ"

        header = f"üë§ –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [{name}](https://t.me/{username})\n{chat_status}\n\n"

    return (
        f"{header}"
        f"–ü–æ–ª: {desc['gender']} {'üë®' if desc['gender'] == '–ú—É–∂—á–∏–Ω–∞' else 'üë©'}\n"
        f"–ò–º—è: {desc['name']} ‚úèÔ∏è\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {desc['age']} üéÇ\n"
        f"{metro_label}: {metro_str}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
        f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {marital_str}\n"
        f"–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {orientation_str}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª: {tg_channel} üì¢\n"
        f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {extra_info} üìù\n"
    )

# --- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å —ç–º–æ–¥–∑–∏ ---
INTEREST_CATEGORIES = {
    "üéÆ –•–æ–±–±–∏": [
        ("–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã", "üéÆ"), ("–ú–æ–¥–∞ –∏ –∫—Ä–∞—Å–æ—Ç–∞", "üíÑ"), ("–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "üöó"), ("IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "üíª"), ("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "üß†"), ("–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è", "üîÆ"), ("–ú–µ–¥–∏—Ç–∞—Ü–∏–∏", "üßò"), ("–ö–æ–º–∏–∫—Å—ã", "üìö"), ("–ú–∞–Ω–≥–∞", "üìñ"), ("–§–∞–Ω—Ñ–∏–∫–∏", "‚úçÔ∏è"), ("–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "üß©"), ("–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤", "üà¥"), ("–°—Ç—Ä–∏–º–∏–Ω–≥–∏", "üì∫"), ("–ò–≥—Ä—ã –Ω–∞ –ø—Ä–∏—Å—Ç–∞–≤–∫–µ", "üïπÔ∏è")
    ],
    "üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å": [
        ("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã", "üé¨"), ("–ö–æ–Ω—Ü–µ—Ä—Ç—ã –∏ —à–æ—É", "üé§"), ("–ú—É–∑–µ–∏ –∏ –≥–∞–ª–µ—Ä–µ–∏", "üñºÔ∏è"), ("–¢–µ–∞—Ç—Ä—ã", "üé≠"), ("–û—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ", "üå≥"), ("–§–µ—Å—Ç–∏–≤–∞–ª–∏", "üé™"), ("–¢—É—Å–æ–≤–∫–∏ –∏ –∫–ª—É–±—ã", "üéâ"), ("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "üçΩÔ∏è"), ("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "‚úàÔ∏è"), ("–®–æ–ø–∏–Ω–≥", "üõçÔ∏è"), ("–í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏", "üë´"), ("–ò—Å–∫—É—Å—Å—Ç–≤–æ", "üé®"), ("–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö", "üèïÔ∏è"), ("–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã", "üõ†Ô∏è"), ("–ö–∞—Ä–∞–æ–∫–µ", "üé§"), ("–ö–≤–∏–∑—ã", "‚ùì")
    ],
    "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ": [
        ("–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "üì∑"), ("–í–∏–¥–µ–æ—Å—ä–µ–º–∫–∞", "üé•"), ("–î–∏–∑–∞–π–Ω", "üé®"), ("–ú–∞–∫–∏—è–∂", "üíã"), ("–†—É–∫–æ–¥–µ–ª–∏–µ", "üßµ"), ("–¢–∞–Ω—Ü—ã", "üíÉ"), ("–ü–µ–Ω–∏–µ", "üé§"), ("–ú—É–∑—ã–∫–∞", "üé∂"), ("–í–µ–¥–µ–Ω–∏–µ –±–ª–æ–≥–∞", "üìù"), ("–†–∏—Å–æ–≤–∞–Ω–∏–µ", "üñåÔ∏è"), ("–°—Ç—Ä–∏—Ç-–∞—Ä—Ç", "üñçÔ∏è"), ("–§–ª–æ—Ä–∏—Å—Ç–∏–∫–∞", "üíê"), ("–ö–æ—Å–ø–ª–µ–π", "üëó")
    ],
    "üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏": [
        ("–ë–µ–≥", "üèÉ"), ("–§–∏—Ç–Ω–µ—Å", "üèãÔ∏è"), ("–í–µ–ª–æ—Å–∏–ø–µ–¥", "üö¥"), ("–í–µ—Ä—Ö–æ–≤–∞—è –µ–∑–¥–∞", "üêé"), ("–õ—ã–∂–∏", "üéø"), ("–ô–æ–≥–∞", "üßò"), ("–ü–∏–ª–∞—Ç–µ—Å", "ü§∏"), ("–°–Ω–æ—É–±–æ—Ä–¥", "üèÇ"), ("–†–æ–ª–∏–∫–∏", "üõº"), ("–°–∫–µ–π—Ç–±–æ—Ä–¥", "üõπ"), ("–°–∞–º–æ–∫–∞—Ç", "üõ¥"), ("–ü—Ä–æ–≥—É–ª–∫–∏", "üö∂"), ("–ê–ª—å–ø–∏–Ω–∏–∑–º", "üßó")
    ],
    "üçï –ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏": [
        ("–ü–∏—Ü—Ü–∞", "üçï"), ("–°—É—à–∏", "üç£"), ("–ë—É—Ä–≥–µ—Ä—ã", "üçî"), ("–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "ü•ó"), ("–í–µ–≥–∞–Ω—Å—Ç–≤–æ", "ü•¶"), ("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ", "ü•ï"), ("–ö–æ—Ñ–µ", "‚òï"), ("–ß–∞–π", "üçµ"), ("–í—ã–ø–µ—á–∫–∞", "ü•ê"), ("–°–ª–∞–¥–æ—Å—Ç–∏", "üç¨"), ("–î–æ–º–∞—à–Ω—è—è FÔøΩ—É—Ö–Ω—è", "üç≤"), ("–ë–∞–±–ª-—Ç–∏", "üßã"), ("–ü–∞—Å—Ç–∞", "üçù"), ("–®–∞—É—Ä–º–∞", "üåØ"), ("–û—Å—Ç—Ä–∞—è –µ–¥–∞", "üå∂Ô∏è")
    ],
    "‚öΩ –°–ø–æ—Ä—Ç": [
        ("–§—É—Ç–±–æ–ª", "‚öΩ"), ("–ü–ª–∞–≤–∞–Ω–∏–µ", "üèä"), ("–í–æ–ª–µ–π–±–æ–ª", "üèê"), ("–ë–∞—Å–∫–µ—Ç–±–æ–ª", "üèÄ"), ("–•–æ–∫–∫–µ–π", "üèí"), ("–¢—è–∂—ë–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", "üèãÔ∏è"), ("–ë–æ–∫—Å", "ü•ä"), ("–ö–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "üïπÔ∏è"), ("–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞", "ü•ã"), ("–¢–µ–Ω–Ω–∏—Å", "üéæ")
    ],
    "üè† –í—Ä–µ–º—è –¥–æ–º–∞": [
        ("–ö—É–ª–∏–Ω–∞—Ä–∏—è", "üë©‚Äçüç≥"), ("–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", "üé≤"), ("–ö–∏–Ω–æ –∏ —Å–µ—Ä–∏–∞–ª—ã", "üì∫"), ("–°–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "üå±"), ("–ö–Ω–∏–≥–∏", "üìö"), ("–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "üå±"), ("–û–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏–µ", "üíª"), ("–ü—Ä–æ—Å–º–æ—Ç—Ä —à–æ—É", "üì∫"), ("–ü–æ–¥–∫–∞—Å—Ç—ã", "üéß")
    ],
    "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": [
        ("–ó–∞–≥–æ—Ä–æ–¥–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏", "üöô"), ("–¢—É—Ä–ø–æ—Ö–æ–¥—ã", "ü•æ"), ("–≠–∫—Å–∫—É—Ä—Å–∏–∏", "üó∫Ô∏è"), ("–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö", "üèñÔ∏è"), ("–û—Ö–æ—Ç–∞ –∏ —Ä—ã–±–∞–ª–∫–∞", "üé£"), ("–ö—Ä—É–∏–∑—ã", "üõ≥Ô∏è"), ("–ì–æ—Ä—ã", "üèîÔ∏è"), ("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∫–æ–Ω—Ü–µ—Ä—Ç—ã", "üéüÔ∏è"), ("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π", "üåç"), ("–≠–∫—Å—Ç—Ä–∏–º", "ü§™"), ("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –†–æ—Å—Å–∏–∏", "üá∑üá∫")
    ],
    "üêæ –î–æ–º–∞—à–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã–µ": [
        ("–ö–æ—à–∫–∏", "üê±"), ("–°–æ–±–∞–∫–∏", "üê∂"), ("–ü—Ç–∏—Ü—ã", "üê¶"), ("–†—ã–±–∫–∏", "üêü"), ("–ö—Ä–æ–ª–∏–∫–∏", "üê∞"), ("–ß–µ—Ä–µ–ø–∞—Ö–∏", "üê¢"), ("–ó–º–µ–∏", "üêç"), ("–Ø—â–µ—Ä–∏—Ü—ã", "ü¶é"), ("–•–æ–º—è–∫–∏", "üêπ")
    ],
    "üé¨ –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã": [
        ("–ö–æ–º–µ–¥–∏–∏", "üòÇ"), ("–ú—É–ª—å—Ç—Ñ–∏–ª—å–º—ã", "üé¨"), ("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ", "üè∫"), ("–î–µ—Ç–µ–∫—Ç–∏–≤—ã", "üïµÔ∏è"), ("–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "üèùÔ∏è"), ("–£–∂–∞—Å—ã", "üëª"), ("–î—Ä–∞–º—ã", "üé≠"), ("–ú–µ–ª–æ–¥—Ä–∞–º—ã", "üíî"), ("–¢—Ä–∏–ª–ª–µ—Ä—ã", "üî™"), ("–ë–æ–µ–≤–∏–∫–∏", "üí•"), ("–ê–Ω–∏–º–µ", "üßë‚Äçüé§"), ("–¢—Ä—É-–∫—Ä–∞–π–º", "üöî"), ("–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∫–∏–Ω–æ", "üéûÔ∏è"), ("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —à–æ—É", "üé§"), ("–°—Ç–µ–Ω–¥–∞–ø", "üéôÔ∏è"), ("–î–æ—Ä–∞–º—ã", "üå∏"), ("–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "üëΩ")
    ],
    "üéµ –ú—É–∑—ã–∫–∞": [
        ("–ü–æ–ø-–º—É–∑—ã–∫–∞", "üé§"), ("–•–∏–ø-—Ö–æ–ø", "üéß"), ("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "üéπ"), ("–†–æ–∫", "üé∏"), ("–†—ç–ø", "üé§"), ("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º—É–∑—ã–∫–∞", "üéª"), ("–ú–µ—Ç–∞–ª", "ü§ò"), ("–¢–µ—Ö–Ω–æ", "üéõÔ∏è"), ("–ë–ª—é–∑", "üé∑"), ("–ú–µ–ª–æ–º–∞–Ω", "üéº"), ("K-pop", "üéµ")
    ]
}
# --- –∫–æ–Ω–µ—Ü –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ ---

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
def get_back_keyboard(back_to):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"back_to_{back_to}"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏–º–µ–Ω–µ–º
def get_name_keyboard(previous_name=None, show_back=False):
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    if previous_name:
        markup.add(KeyboardButton(previous_name))
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º
def get_age_keyboard(previous_age=None, show_back=False):
    markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
    if previous_age:
        markup.add(KeyboardButton(str(previous_age)))
    if show_back:
        markup.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_activity(user_id, username, action, chat_type='private'):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if user_id not in users_data:
        users_data[user_id] = {
            'id': user_id,
            'username': username,
            'source': None,
            'timestamp': None,
            'wants_link': False,
            'description': {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            },
            'awaiting': None,
            'activity_log': []
        }

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if 'activity_log' not in users_data[user_id]:
        users_data[user_id]['activity_log'] = []

    activity_entry = {
        'date': datetime.now().strftime("%Y-%m-%d"),
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'action': action,
        'chat_type': chat_type
    }

    users_data[user_id]['activity_log'].append(activity_entry)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(users_data[user_id]['activity_log']) > 100:
        users_data[user_id]['activity_log'] = users_data[user_id]['activity_log'][-100:]

    save_users_data(users_data)
    logging.info(f"ACTIVITY_LOG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) - {action} –≤ {chat_type}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def generate_user_activity_chart(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_id not in users_data or 'activity_log' not in users_data[user_id]:
            return None

        activity_log = users_data[user_id]['activity_log']
        if not activity_log:
            return None

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–∞–º
        date_counts = {}
        for entry in activity_log:
            date = entry['date']
            date_counts[date] = date_counts.get(date, 0) + 1

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        sorted_dates = sorted(date_counts.keys())
        counts = [date_counts[date] for date in sorted_dates]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        from datetime import datetime
        formatted_dates = []
        for date in sorted_dates:
            dt = datetime.strptime(date, "%Y-%m-%d")
            formatted_dates.append(dt.strftime("%d.%m"))

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü
        plt.style.use('default')
        fig, ax = plt.subplots(figsize=(16, 8))
        fig.patch.set_facecolor('#f8f8f8')
        ax.set_facecolor('#f8f8f8')

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        bars = ax.bar(formatted_dates, counts, color='#8BC34A', width=0.7, alpha=1.0)

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–º–∫–∏
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.spines['bottom'].set_visible(False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        ax.grid(True, axis='y', alpha=0.4, color='#e0e0e0', linestyle='-', linewidth=0.8)
        ax.set_axisbelow(True)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        ax.set_xlabel("")
        ax.set_ylabel("")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        ax.set_title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", fontsize=16, color='#5c6bc0', 
                    fontweight='normal', pad=30, ha='center')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å—è—Ö
        ax.tick_params(axis='x', colors='#666666', labelsize=10, length=0, pad=8)
        ax.tick_params(axis='y', colors='#666666', labelsize=10, length=0, pad=8)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –æ—Å—å —Å –ø–æ–¥–ø–∏—Å—å—é "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π" —Å–ø—Ä–∞–≤–∞
        if counts and max(counts) > 0:
            max_count = max(counts)
            ax2 = ax.twinx()
            ax2.set_ylim(0, max_count + max_count * 0.1)
            ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n—Å–æ–æ–±—â–µ–Ω–∏–π", fontsize=11, color='#666666', 
                          rotation=270, labelpad=25, ha='center', va='center')

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –æ—Å–∏ —Å –∑–µ–ª–µ–Ω–æ–π —à–∫–∞–ª–æ–π –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
            ax2.tick_params(axis='y', colors='#8BC34A', labelsize=10, length=0, pad=8)
            ax2.spines['right'].set_visible(False)
            ax2.spines['top'].set_visible(False)
            ax2.spines['left'].set_visible(False)
            ax2.spines['bottom'].set_visible(False)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –æ—Å–∏
            ax.set_ylim(0, max_count + max_count * 0.1)

        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        plt.subplots_adjust(left=0.08, right=0.92, top=0.9, bottom=0.15)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=200, bbox_inches='tight', 
                   facecolor='#f8f8f8', edgecolor='none', pad_inches=0.3)
        buf.seek(0)
        plt.close()

        return buf
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def generate_activity_chart():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        from datetime import datetime, timedelta

        today = datetime.now()
        thirty_days_ago = today - timedelta(days=30)

        daily_activity = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–Ω–∏ –Ω—É–ª—è–º–∏
        for i in range(30):
            date = (thirty_days_ago + timedelta(days=i)).strftime("%Y-%m-%d")
            daily_activity[date] = 0

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        for user_data in users_data.values():
            if 'activity_log' in user_data:
                for entry in user_data['activity_log']:
                    entry_date = entry['date']
                    if entry_date in daily_activity:
                        daily_activity[entry_date] += 1

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = sorted(daily_activity.keys())
        counts = [daily_activity[date] for date in dates]

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ (dd.mm)
        formatted_dates = []
        for date in dates:
            dt = datetime.strptime(date, "%Y-%m-%d")
            formatted_dates.append(dt.strftime("%d.%m"))

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –æ–±—Ä–∞–∑–µ—Ü
        plt.style.use('default')
        fig, ax = plt.subplots(figsize=(16, 8))
        fig.patch.set_facecolor('#f8f8f8')
        ax.set_facecolor('#f8f8f8')

        # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –∂–µ —è—Ä–∫–æ-–∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        bars = ax.bar(formatted_dates, counts, color='#8BC34A', width=0.7, alpha=1.0)

        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–º–∫–∏
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.spines['bottom'].set_visible(False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        ax.grid(True, axis='y', alpha=0.4, color='#e0e0e0', linestyle='-', linewidth=0.8)
        ax.set_axisbelow(True)

        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        ax.set_xlabel("")
        ax.set_ylabel("")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
        ax.set_title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", fontsize=16, color='#5c6bc0', 
                    fontweight='normal', pad=30, ha='center')

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–∫ –Ω–∞ –æ—Å—è—Ö
        ax.tick_params(axis='x', colors='#666666', labelsize=10, length=0, pad=8)
        ax.tick_params(axis='y', colors='#666666', labelsize=10, length=0, pad=8)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –æ—Å—å —Å –ø–æ–¥–ø–∏—Å—å—é "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π" —Å–ø—Ä–∞–≤–∞
        if counts and max(counts) > 0:
            max_count = max(counts)
            ax2 = ax.twinx()
            ax2.set_ylim(0, max_count + max_count * 0.1)
            ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n—Å–æ–æ–±—â–µ–Ω–∏–π", fontsize=11, color='#666666', 
                          rotation=270, labelpad=25, ha='center', va='center')

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –æ—Å–∏ —Å –∑–µ–ª–µ–Ω–æ–π —à–∫–∞–ª–æ–π –∫–∞–∫ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ
            ax2.tick_params(axis='y', colors='#8BC34A', labelsize=10, length=0, pad=8)
            ax2.spines['right'].set_visible(False)
            ax2.spines['top'].set_visible(False)
            ax2.spines['left'].set_visible(False)
            ax2.spines['bottom'].set_visible(False)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –æ—Å–∏
            ax.set_ylim(0, max_count + max_count * 0.1)

        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        plt.subplots_adjust(left=0.08, right=0.92, top=0.9, bottom=0.15)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä –ø–∞–º—è—Ç–∏
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=200, bbox_inches='tight', 
                   facecolor='#f8f8f8', edgecolor='none', pad_inches=0.3)
        buf.seek(0)
        plt.close()

        return buf
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(commands=['keyboard'])
def show_keyboard_demo(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ–º–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")

    bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=get_yes_no_reply_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    chat_type = 'group' if message.chat.type in ['group', 'supergroup'] else 'private'

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, '–ö–æ–º–∞–Ω–¥–∞ /start', chat_type)

    # --- –ù–æ–≤–æ–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º /start –∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
    if user_id not in users_data:
        users_data[user_id] = {
            'id': user_id,
            'username': username,
            'source': None,
            'timestamp': None,
            'wants_link': False,
            'description': {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            },
            'awaiting': 'source'
        }
        save_users_data(users_data)
        logging.info(f"NEW_USER: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username})")

    state = users_data[user_id]['awaiting']
    logging.info(f"USER_STATE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{state}'")

    try:
        if state == 'source':
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, "üåü –ü—Ä–∏–≤–µ—Ç –æ—Ç ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot! –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º —á–∞—Ç–µ? üòé")
        elif state == 'join_request':
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, "–•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É? üöÄ", reply_markup=get_join_request_keyboard())
        elif state == 'gender':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
        elif state == 'name':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
            previous_name = users_data[user_id].get('previous_name')
            if previous_name:
                bot.reply_to(message, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ:", reply_markup=get_name_keyboard(previous_name, show_back=True))
            else:
                bot.reply_to(message, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è", reply_markup=get_back_reply_keyboard())
        elif state == 'age':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
            previous_age = users_data[user_id].get('previous_age')
            if previous_age:
                bot.reply_to(message, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π:", reply_markup=get_age_keyboard(previous_age, show_back=True))
            else:
                bot.reply_to(message, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ", reply_markup=get_back_reply_keyboard())
        elif state == 'metro':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
            current_metro = users_data[user_id]['description'].get('metro_station', [])
            if current_metro:
                metro_with_emoji = []
                for station in current_metro:
                    emoji = get_metro_emoji(station)
                    metro_with_emoji.append(f"{emoji} {station}")
                metro_display = ', '.join(metro_with_emoji)
                message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {metro_display}"
            else:
                message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá"

            bot.reply_to(message, message_text, reply_markup=get_metro_keyboard(show_back=True))
        elif state == 'marital_status':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, f"{progress}–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:", reply_markup=get_marital_status_keyboard(show_back=True))
        elif state == 'sexual_orientation':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:", reply_markup=get_sexual_orientation_keyboard(show_back=True))
        elif state == 'custom_lo':
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞ –õ–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú—É—Ä–∏–Ω–æ') ‚úçÔ∏è:")
        elif state == 'telegram_channel':
            progress = get_profile_progress(users_data[user_id])
            logging.info(f"SEND_MESSAGE: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            bot.reply_to(message, f"{progress}–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢", reply_markup=get_telegram_channel_keyboard(show_back=True))
        elif state == 'custom_tg_channel':
            progress = get_profile_progress(users_data[user_id])
            # –ù–æ–≤–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
            bot.reply_to(message, f"{progress}–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫—É, –Ω–∏–∫ —Å @ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: @MyChannel, t.me/MyChannel, https://t.me/MyChannel –∏–ª–∏ MyChannel) üì¢:")
        elif state == 'extra_info':
            progress = get_profile_progress(users_data[user_id])
            bot.reply_to(message, f"{progress}–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_reply_keyboard(show_back=True))
        elif state == 'edit_extra_info':
            bot.reply_to(message, "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_keyboard(edit=True))
        elif state and state.startswith('edit_'):
            field = state.split('_')[1]
            if field == 'gender':
                bot.reply_to(message, "–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
            elif field == 'name':
                bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è ‚úèÔ∏è:")
            elif field == 'age':
                progress = get_profile_progress(user)
                bot.reply_to(message, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ", reply_markup=get_back_keyboard("name"))
            elif field == 'metro':
                bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ üöá:", reply_markup=get_metro_keyboard())
            elif field == 'interests':
                bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())
            elif field == 'marital':
                bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:", reply_markup=get_marital_status_keyboard())
            elif field == 'orientation':
                bot.reply_to(message, "–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:", reply_markup=get_sexual_orientation_keyboard())
            elif field == 'tg_channel':
                bot.reply_to(message, "–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢", reply_markup=get_telegram_channel_keyboard())
            elif field == 'extra':
                bot.reply_to(message, "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_keyboard(edit=True))
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if is_description_complete(users_data[user_id]):
                bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üòä", reply_markup=get_main_reply_keyboard())
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                current_state = users_data[user_id].get('awaiting')
                if current_state in ['gender', 'name', 'age', 'metro', 'interests', 'marital_status', 'sexual_orientation', 'telegram_channel', 'extra_info'] or current_state and (current_state.startswith('interests:') or current_state.startswith('edit_')):
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ—à—å –ø—Ä–æ—Ñ–∏–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞. üòä")
                    return

                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                users_data[user_id]['awaiting'] = 'source'
                save_users_data(users_data)
                logging.info(f"STATE_RESET: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'source'")
                bot.reply_to(message, "üåü –ü—Ä–∏–≤–µ—Ç –æ—Ç ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot! –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º —á–∞—Ç–µ? üòé")

        if state and state.startswith('interests:'):
            category = state.split(':', 1)[1]
            progress = get_profile_progress(users_data[user_id])
            bot.reply_to(message, f"{progress}–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests'], category=category))
        elif state == 'edit_interests':
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests']))
        elif state and state.startswith('edit_interests:'):
            category = state.split(':', 1)[1]
            progress = get_profile_progress(users_data[user_id])
            bot.reply_to(message, f"{progress}–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests'], category=category))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –±–æ—Ç–æ–≤
BOT_PROFILES = {
    "VProgulkeBot": {
        "name": "·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot",
        "description": "–ë–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –æ–±—â–µ–Ω–∏—è –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
        "version": "2.0",
        "features": [
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "üöá –ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –º–µ—Ç—Ä–æ",
            "üéØ –ü–æ–¥–±–æ—Ä –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", 
            "üí¨ –°–≤—è–∑—å —Å —á–∞—Ç–æ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"
        ],
        "creator": "@dmitrij_gz",
        "created": "2025-06-26"
    }
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
}

def format_bot_profile(bot_username):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if bot_username not in BOT_PROFILES:
        return None

    profile = BOT_PROFILES[bot_username]
    features_text = '\n'.join(profile['features'])

    return (
        f"ü§ñ **–ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ {profile['name']}**\n\n"
        f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {profile['description']}\n"
        f"‚ö° **–í–µ—Ä—Å–∏—è:** {profile['version']}\n"
        f"üë®‚Äçüíª **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {profile['creator']}\n"
        f"üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {profile['created']}\n\n"
        f"üõ†Ô∏è **–§—É–Ω–∫—Ü–∏–∏:**\n{features_text}\n\n"
        f"üí° *–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ /start*"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–ø–ª–∞—è—Ö
@bot.message_handler(func=lambda message: message.text and message.reply_to_message and message.reply_to_message.from_user and message.reply_to_message.from_user.is_bot and any(cmd in message.text.lower() for cmd in ['/profile@vprogulkebot', '/link@vprogulkebot']))
def handle_bot_command_reply(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    text = message.text.strip().lower()

    logging.info(f"BOT_COMMAND_REPLY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É '{message.text}' –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, f'–ö–æ–º–∞–Ω–¥–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –±–æ—Ç–∞: {message.text}', 'group' if message.chat.type in ['group', 'supergroup'] else 'private')

    if '/profile@vprogulkebot' in text:
        show_profile(message)
    elif '/link@vprogulkebot' in text:
        send_chat_link(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è (—Å–≤–æ–µ–≥–æ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@bot.message_handler(func=lambda message: message.text and any(message.text.lower().startswith(cmd) for cmd in ['–æ —Å–µ–±–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–ø—Ä–æ—Ñ–∏–ª—å', '–±–∏–æ', '–∫—Ç–æ —è', '–∫—Ç–æ —Ç—ã', '—Ö—Ç–æ —Ç—ã', '—Ö—Ç–æ —è']))
def show_user_profile(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    text = message.text.strip()
    is_group_chat = message.chat.type in ['group', 'supergroup']
    chat_type = 'group' if is_group_chat else 'private'

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: '{text}' –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è', chat_type)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        replied_user_id = str(message.reply_to_message.from_user.id)
        replied_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        replied_is_bot = message.reply_to_message.from_user.is_bot

        logging.info(f"PROFILE_REPLY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {replied_user_id} (@{replied_username})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
        if replied_is_bot:
            bot_profile = format_bot_profile(replied_username)
            if bot_profile:
                bot.reply_to(message, bot_profile)
                logging.info(f"BOT_PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ @{replied_username}")
            else:
                bot.reply_to(message, f"ü§ñ –ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ @{replied_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç
        if replied_user_id not in users_data:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{replied_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á üòî")
            return

        if not is_description_complete(users_data[replied_user_id]):
            bot.reply_to(message, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{replied_username} –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω üìù")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç
        try:
            profile_text = format_profile(users_data[replied_user_id], is_own_profile=False)
            bot.reply_to(message, profile_text, parse_mode='Markdown')
            logging.info(f"PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å @{replied_username} —á–µ—Ä–µ–∑ reply –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ show_user_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–µ–∫—Å—Ç–∞
    target_username = None

    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: "–ø—Ä–æ—Ñ–∏–ª—å @username", "–æ–ø–∏—Å–∞–Ω–∏–µ username", "–æ —Å–µ–±–µ t.me/@username" –∏ —Ç.–¥.
    import re

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username
    patterns = [
        r'@(\w+)',  # @username
        r't\.me/@(\w+)',  # t.me/@username
        r't\.me/(\w+)',  # t.me/username
        r'https://t\.me/@(\w+)',  # https://t.me/@username
        r'https://t\.me/(\w+)',  # https://t.me/username
    ]

    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            target_username = match.group(1)
            break

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∫–∞–∫ username
    # –ù–û –∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "–æ —Å–µ–±–µ", "–ø—Ä–æ—Ñ–∏–ª—å" –∏–ª–∏ "–æ–ø–∏—Å–∞–Ω–∏–µ"
    if not target_username:
        words = text.split()
        if len(words) > 1:
            last_word = words[-1]
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è
            if last_word.lower() not in ['—Å–µ–±–µ', '–ø—Ä–æ—Ñ–∏–ª—å', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—è', '—Ç—ã']:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                if last_word.startswith('@'):
                    target_username = last_word[1:]
                else:
                    target_username = last_word

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –æ –±–æ—Ç–µ
    if any(phrase in text.lower() for phrase in ['–∫—Ç–æ —Ç—ã', '—Ö—Ç–æ —Ç—ã']):
        bot_profile = format_bot_profile("VProgulkeBot")
        if bot_profile:
            bot.reply_to(message, bot_profile)
            logging.info(f"BOT_PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞")
        else:
            bot.reply_to(message, "ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    # –ï—Å–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not target_username:
        logging.info(f"PROFILE_SELF: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")

        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé")
            return

        if not is_description_complete(users_data[user_id]):
            bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start! üìù")
            return

        try:
            profile_text = format_profile(users_data[user_id])

            if is_group_chat:
                # –í –≥—Ä—É–ø–ø–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                bot.reply_to(message, profile_text)
            else:
                # –í –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                bot.reply_to(message, profile_text, reply_markup=get_profile_keyboard())

            logging.info(f"PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ show_user_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
        return

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –±–æ—Ç–æ–º
    bot_profile = format_bot_profile(target_username)
    if bot_profile:
        bot.reply_to(message, bot_profile)
        logging.info(f"BOT_PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ @{target_username}")
        return

    # –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    target_user = None
    for uid, data in users_data.items():
        if data.get('username') and data['username'].lower() == target_username.lower():
            target_user = data
            break

    if not target_user:
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á üòî")
        return

    if not is_description_complete(target_user):
        bot.reply_to(message, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω üìù")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        profile_text = format_profile(target_user, is_own_profile=False)
        bot.reply_to(message, profile_text, parse_mode='Markdown')
        logging.info(f"PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å @{target_username} –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_user_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ reply-–∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text and (message.text in ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–î–∞ üòé", "–ù–µ—Ç üôÖ", "–î–∞", "–ù–µ—Ç", "–ú—É–∂—á–∏–Ω–∞ üë®", "–ñ–µ–Ω—â–∏–Ω–∞ üë©", "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è", "–ì–µ—Ç–µ—Ä–æ üòä", "–ë–∏ üåà", "–ì–µ–π/–õ–µ—Å–±–∏ üè≥Ô∏è‚Äçüåà", "–î—Ä—É–≥–æ–µ ‚úçÔ∏è", "–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª üì¢", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å üö´", "–î–æ–±–∞–≤–∏—Ç—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å üóëÔ∏è", "üíî –ù–µ –∂–µ–Ω–∞—Ç", "üíî –ù–µ –∑–∞–º—É–∂–µ–º", "üíï –í—Å—Ç—Ä–µ—á–∞—é—Å—å", "üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)", "üíí –ñ–µ–Ω–∞—Ç", "üíí –ó–∞–º—É–∂–µ–º", "ü§ù –í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ", "üòç –í–ª—é–±–ª—ë–Ω", "ü§∑ –í—Å—ë —Å–ª–æ–∂–Ω–æ", "üîç –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ", "–ü–æ–ª üë®üë©", "–ò–º—è ‚úèÔ∏è", "–í–æ–∑—Ä–∞—Å—Ç üéÇ", "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá", "–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ", "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç", "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà", "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢", "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ", "–ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞ üü•", "–°–∏–Ω—è—è –≤–µ—Ç–∫–∞ üü¶", "–ó–µ–ª—ë–Ω–∞—è –≤–µ—Ç–∫–∞ üü©", "–û—Ä–∞–Ω–∂–µ–≤–∞—è –≤–µ—Ç–∫–∞ üüß", "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞ üü™", "–Ø –∏–∑ –õ–û üè°", "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ üåç", "–ì–æ—Ç–æ–≤–æ ‚úÖ"] or message.text.startswith(("üü•", "üü¶", "üü©", "üüß", "üü™", "üè°"))))
def handle_reply_buttons(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    text = message.text.strip()

    logging.info(f"REPLY_BUTTON: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–∂–∞–ª reply-–∫–Ω–æ–ø–∫—É: '{text}'")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, f'Reply-–∫–Ω–æ–ø–∫–∞: {text}', 'private')

    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif text == "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç":
        send_chat_link(message)
    elif text in ["üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]:
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé")
            return
        users_data[user_id]['awaiting'] = 'edit_select'
        save_users_data(users_data)
        bot.reply_to(message, "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ? ‚úèÔ∏è", reply_markup=get_edit_field_reply_keyboard())
    elif text in ["–î–∞ üòé", "–î–∞"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'join_request':
            logging.info(f"USER_DECISION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–µ—à–∏–ª –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É")
            users_data[user_id]['wants_link'] = True
            users_data[user_id]['awaiting'] = 'gender'
            save_users_data(users_data)

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_user_activity(user_id, username, '–ñ–µ–ª–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É')

            logging.info(f"STATE_CHANGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'gender'")
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
        else:
            bot.reply_to(message, "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª '–î–∞' üëç", reply_markup=get_main_reply_keyboard())
    elif text in ["–ù–µ—Ç üôÖ", "–ù–µ—Ç"]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'join_request':
            logging.info(f"USER_DECISION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ —á–∞—Ç—É")
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)
            logging.info(f"STATE_CHANGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–ü–æ–Ω—è—Ç–Ω–æ! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –Ω–∞–ø–∏—à–∏ /start! üòä", reply_markup=ReplyKeyboardRemove())
        else:
            bot.reply_to(message, "–ü–æ–Ω—è—Ç–Ω–æ, —Ç—ã –≤—ã–±—Ä–∞–ª '–ù–µ—Ç' üëé", reply_markup=get_main_reply_keyboard())
    elif text in ["–ú—É–∂—á–∏–Ω–∞ üë®", "–ñ–µ–Ω—â–∏–Ω–∞ üë©"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'gender':
            gender = "–ú—É–∂—á–∏–Ω–∞" if text == "–ú—É–∂—á–∏–Ω–∞ üë®" else "–ñ–µ–Ω—â–∏–Ω–∞"
            users_data[user_id]['description']['gender'] = gender
            users_data[user_id]['awaiting'] = 'name'
            save_users_data(users_data)

            logging.info(f"USER_PROFILE: {user_id} —É–∫–∞–∑–∞–ª –ø–æ–ª: {gender}")
            progress = get_profile_progress(users_data[user_id])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
            previous_name = users_data[user_id].get('previous_name')
            if previous_name:
                bot.send_message(message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ:", reply_markup=get_name_keyboard(previous_name, show_back=True))
            else:
                bot.send_message(message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è", reply_markup=get_back_reply_keyboard())
        elif state == 'edit_gender':
            gender = "–ú—É–∂—á–∏–Ω–∞" if text == "–ú—É–∂—á–∏–Ω–∞ üë®" else "–ñ–µ–Ω—â–∏–Ω–∞"
            users_data[user_id]['description']['gender'] = gender
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)

            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –ø–æ–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text in ["–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏–ª–∏ –ö –ø—Ä–æ—Ñ–∏–ª—é
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        logging.info(f"BACK_BUTTON: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª {text} –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è '{state}'")

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è", –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        if text == "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è":
            users_data[user_id]['awaiting'] = None
            users_data[user_id].pop('current_metro_line', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            users_data[user_id].pop('prev_awaiting', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove

            profile_text = format_profile(users_data[user_id])

            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
            if is_description_complete(users_data[user_id]):
                profile_text += f"\n\nüí¨ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}"

            bot.send_message(message.chat.id, profile_text, reply_markup=get_profile_keyboard())


            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if state == 'name':
            users_data[user_id]['awaiting'] = 'gender'
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
        elif state == 'age':
            users_data[user_id]['awaiting'] = 'name'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
            previous_name = users_data[user_id].get('previous_name')
            if previous_name:
                bot.send_message(message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ:", reply_markup=get_name_keyboard(previous_name, show_back=True))
            else:
                bot.send_message(message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è", reply_markup=get_back_reply_keyboard())
        elif state == 'metro' or state == 'edit_metro':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ç–∫–µ –∏–ª–∏ –≤ –≥–æ—Ä–æ–¥–∞—Ö –õ–û
            if users_data[user_id].get('current_metro_line'):
                # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ç–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≤–µ—Ç–æ–∫ –º–µ—Ç—Ä–æ
                users_data[user_id].pop('current_metro_line', None)
                save_users_data(users_data)

                if state == 'edit_metro':
                    # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–æ
                    current_metro = users_data[user_id]['description'].get('metro_station', [])
                    if isinstance(current_metro, list):
                        if current_metro:
                            metro_with_emoji = []
                            for station in current_metro:
                                emoji = get_metro_emoji(station)
                                metro_with_emoji.append(f"{emoji} {station}")
                            metro_display = ', '.join(metro_with_emoji)
                        else:
                            metro_display = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    else:
                        if current_metro:
                            emoji = get_metro_emoji(current_metro)
                            metro_display = f"{emoji} {current_metro}"
                        else:
                            metro_display = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    message_text = f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ üöá:\n\n–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: {metro_display}"
                    bot.send_message(message.chat.id, message_text, reply_markup=get_metro_keyboard())
                else:
                    # –ü—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
                    progress = get_profile_progress(users_data[user_id])
                    current_metro = users_data[user_id]['description'].get('metro_station', [])
                    if current_metro:
                        metro_with_emoji = []
                        for station in current_metro:
                            emoji = get_metro_emoji(station)
                            metro_with_emoji.append(f"{emoji} {station}")
                        metro_display = ', '.join(metro_with_emoji)
                        message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {metro_display}"
                    else:
                        message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá"
                    bot.send_message(message.chat.id, message_text, reply_markup=get_metro_keyboard(show_back=True))
            else:
                # –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–æ–∫ –º–µ—Ç—Ä–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —ç—Ç–∞–ø—É
                if state == 'edit_metro':
                    # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
                    users_data[user_id]['awaiting'] = None
                    save_users_data(users_data)
                    from telebot.types import ReplyKeyboardRemove

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    chart_buffer = generate_user_activity_chart(user_id)
                    profile_text = format_profile(users_data[user_id])

                    if chart_buffer:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –≤ caption
                        bot.send_photo(
                            message.chat.id,
                            photo=chart_buffer,
                            caption=profile_text,
                            reply_markup=get_profile_keyboard()
                        )
                    else:
                        # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª—å
                        bot.send_message(message.chat.id, profile_text, reply_markup=get_profile_keyboard())
                else:
                    # –ü—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–∑—Ä–∞—Å—Ç—É
                    users_data[user_id]['awaiting'] = 'age'
                    save_users_data(users_data)
                    progress = get_profile_progress(users_data[user_id])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
                    previous_age = users_data[user_id].get('previous_age')
                    if previous_age:
                        bot.send_message(message.chat.id, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π:", reply_markup=get_age_keyboard(previous_age, show_back=True))
                    else:
                        bot.send_message(message.chat.id, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ", reply_markup=get_back_reply_keyboard())
        elif state == 'interests':
            users_data[user_id]['awaiting'] = 'metro'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
            current_metro = users_data[user_id]['description'].get('metro_station', [])
            if current_metro:
                metro_with_emoji = []
                for station in current_metro:
                    emoji = get_metro_emoji(station)
                    metro_with_emoji.append(f"{emoji} {station}")
                metro_display = ', '.join(metro_with_emoji)
                message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {metro_display}"
            else:
                message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá"

            bot.send_message(message.chat.id, message_text, reply_markup=get_metro_keyboard(show_back=True))
        elif state == 'marital_status':
            users_data[user_id]['awaiting'] = 'interests'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())
        elif state == 'sexual_orientation':
            users_data[user_id]['awaiting'] = 'marital_status'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:", reply_markup=get_marital_status_keyboard(show_back=True))
        elif state == 'telegram_channel':
            users_data[user_id]['awaiting'] = 'sexual_orientation'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:", reply_markup=get_sexual_orientation_keyboard(show_back=True))
        elif state == 'extra_info':
            users_data[user_id]['awaiting'] = 'telegram_channel'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢", reply_markup=get_telegram_channel_keyboard(show_back=True))
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", reply_markup=get_main_reply_keyboard())
    elif text in ["–ì–µ—Ç–µ—Ä–æ üòä", "–ë–∏ üåà", "–ì–µ–π/–õ–µ—Å–±–∏ üè≥Ô∏è‚Äçüåà", "–î—Ä—É–≥–æ–µ ‚úçÔ∏è"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'sexual_orientation':
            if text == "–î—Ä—É–≥–æ–µ ‚úçÔ∏è":
                users_data[user_id]['awaiting'] = 'custom_orientation'
                save_users_data(users_data)
                from telebot.types import ReplyKeyboardRemove
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞–Ω—Å–µ–∫—Å—É–∞–ª') ‚úçÔ∏è:", reply_markup=ReplyKeyboardRemove())
            else:
                orientation = text.split()[0]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                users_data[user_id]['description']['sexual_orientation'] = orientation
                users_data[user_id]['awaiting'] = 'telegram_channel'
                save_users_data(users_data)

                progress = get_profile_progress(users_data[user_id])
                bot.send_message(message.chat.id, f"{progress}–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢", reply_markup=get_telegram_channel_keyboard(show_back=True))
        elif state == 'edit_orientation':
            if text == "–î—Ä—É–≥–æ–µ ‚úçÔ∏è":
                users_data[user_id]['awaiting'] = 'edit_custom_orientation'
                save_users_data(users_data)
                from telebot.types import ReplyKeyboardRemove
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞–Ω—Å–µ–∫—Å—É–∞–ª') ‚úçÔ∏è:", reply_markup=ReplyKeyboardRemove())
            else:
                orientation = text.split()[0]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
                users_data[user_id]['description']['sexual_orientation'] = orientation
                users_data[user_id]['awaiting'] = None
                save_users_data(users_data)

                from telebot.types import ReplyKeyboardRemove
                bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª üì¢":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª"
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'telegram_channel':
            users_data[user_id]['awaiting'] = 'custom_tg_channel'
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫—É, –Ω–∏–∫ —Å @ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: @MyChannel, t.me/MyChannel, https://t.me/MyChannel –∏–ª–∏ MyChannel) üì¢:", reply_markup=ReplyKeyboardRemove())
        elif state == 'edit_tg_channel':
            users_data[user_id]['prev_awaiting'] = 'edit_tg_channel'
            users_data[user_id]['awaiting'] = 'custom_tg_channel'
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫—É, –Ω–∏–∫ —Å @ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: @MyChannel, t.me/MyChannel, https://t.me/MyChannel –∏–ª–∏ MyChannel) üì¢:", reply_markup=ReplyKeyboardRemove())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å üö´":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å"
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'telegram_channel':
            users_data[user_id]['description']['telegram_channel'] = None
            users_data[user_id]['awaiting'] = 'extra_info'
            save_users_data(users_data)
            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_reply_keyboard(show_back=True))
        elif state == 'edit_tg_channel':
            users_data[user_id]['description']['telegram_channel'] = None
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)
            bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–î–æ–±–∞–≤–∏—Ç—å":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å"
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'extra_info':
            users_data[user_id]['awaiting'] = 'extra_info_input'
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù:", reply_markup=ReplyKeyboardRemove())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'extra_info':
            users_data[user_id]['description']['extra_info'] = ""
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)
            bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_main_reply_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å" –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'edit_extra_info':
            users_data[user_id]['awaiting'] = 'edit_extra_info_input'
            save_users_data(users_data)
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù:", reply_markup=ReplyKeyboardRemove())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text == "–£–¥–∞–ª–∏—Ç—å üóëÔ∏è":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'edit_extra_info':
            users_data[user_id]['description']['extra_info'] = None
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)
            bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_profile_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text in ["üíî –ù–µ –∂–µ–Ω–∞—Ç", "üíî –ù–µ –∑–∞–º—É–∂–µ–º", "üíï –í—Å—Ç—Ä–µ—á–∞—é—Å—å", "üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)", "üíí –ñ–µ–Ω–∞—Ç", "üíí –ó–∞–º—É–∂–µ–º", "ü§ù –í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ", "üòç –í–ª—é–±–ª—ë–Ω", "ü§∑ –í—Å—ë —Å–ª–æ–∂–Ω–æ", "üîç –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state == 'marital_status':
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            marital_status = text.split(' ', 1)[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
            users_data[user_id]['description']['marital_status'] = marital_status
            users_data[user_id]['awaiting'] = 'sexual_orientation'
            save_users_data(users_data)

            progress = get_profile_progress(users_data[user_id])
            bot.send_message(message.chat.id, f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:", reply_markup=get_sexual_orientation_keyboard(show_back=True))
        elif state == 'edit_marital':
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            marital_status = text.split(' ', 1)[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
            users_data[user_id]['description']['marital_status'] = marital_status
            users_data[user_id]['awaiting'] = None
            save_users_data(users_data)

            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
        else:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
    elif text in ["–ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞ üü•", "–°–∏–Ω—è—è –≤–µ—Ç–∫–∞ üü¶", "–ó–µ–ª—ë–Ω–∞—è –≤–µ—Ç–∫–∞ üü©", "–û—Ä–∞–Ω–∂–µ–≤–∞—è –≤–µ—Ç–∫–∞ üüß", "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞ üü™", "–Ø –∏–∑ –õ–û üè°", "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ üåç", "–ì–æ—Ç–æ–≤–æ ‚úÖ"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ—Ç–æ–∫ –º–µ—Ç—Ä–æ —á–µ—Ä–µ–∑ reply-–∫–Ω–æ–ø–∫–∏
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state not in ['metro', 'edit_metro']:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –≤–µ—Ç–∫—É –º–µ—Ç—Ä–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
            return

        # Ensure metro_station is always a list
        if 'metro_station' not in users_data[user_id]['description']:
            users_data[user_id]['description']['metro_station'] = []
        elif users_data[user_id]['description']['metro_station'] is None:
            users_data[user_id]['description']['metro_station'] = []
        elif not isinstance(users_data[user_id]['description']['metro_station'], list):
            current_value = users_data[user_id]['description']['metro_station']
            users_data[user_id]['description']['metro_station'] = [current_value] if current_value else []

        if text == "–ö—Ä–∞—Å–Ω–∞—è –≤–µ—Ç–∫–∞ üü•":
            users_data[user_id]['current_metro_line'] = 'red'
            save_users_data(users_data)
            markup = get_red_line_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ç–æ–∫
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if not station.startswith('–õ–û:') and station != '–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ':
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–°–∏–Ω—è—è –≤–µ—Ç–∫–∞ üü¶":
            users_data[user_id]['current_metro_line'] = 'blue'
            save_users_data(users_data)
            markup = get_blue_line_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ç–æ–∫
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if not station.startswith('–õ–û:') and station != '–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ':
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –°–∏–Ω–µ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–ó–µ–ª—ë–Ω–∞—è –≤–µ—Ç–∫–∞ üü©":
            users_data[user_id]['current_metro_line'] = 'green'
            save_users_data(users_data)
            markup = get_green_line_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ç–æ–∫
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if not station.startswith('–õ–û:') and station != '–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ':
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ó–µ–ª—ë–Ω–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–û—Ä–∞–Ω–∂–µ–≤–∞—è –≤–µ—Ç–∫–∞ üüß":
            users_data[user_id]['current_metro_line'] = 'orange'
            save_users_data(users_data)
            markup = get_orange_line_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ç–æ–∫
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if not station.startswith('–õ–û:') and station != '–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ':
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –û—Ä–∞–Ω–∂–µ–≤–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è –≤–µ—Ç–∫–∞ üü™":
            users_data[user_id]['current_metro_line'] = 'purple'
            save_users_data(users_data)
            markup = get_purple_line_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ç–æ–∫
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if not station.startswith('–õ–û:') and station != '–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ':
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –§–∏–æ–ª–µ—Ç–æ–≤–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–Ø –∏–∑ –õ–û üè°":
            users_data[user_id].pop('current_metro_line', None)
            save_users_data(users_data)
            markup = get_lo_cities_keyboard(selected=users_data[user_id]['description'].get('metro_station', []))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –õ–û —Å —ç–º–æ–¥–∑–∏
            current_selected = []
            for station in users_data[user_id]['description'].get('metro_station', []):
                if station.startswith('–õ–û:'):
                    emoji = get_metro_emoji(station)
                    current_selected.append(f"{emoji} {station}")
            selected_text = f"\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {', '.join(current_selected)}" if current_selected else ""
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ –õ–û (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):{selected_text}", reply_markup=markup)
        elif text == "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ üåç":
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã —Å—Ç–∞–Ω—Ü–∏–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
            users_data[user_id]['description']['metro_station'] = ["–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"]
            users_data[user_id].pop('current_metro_line', None)

            if state == 'edit_metro':
                users_data[user_id]['awaiting'] = None
                save_users_data(users_data)
                bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
            else:
                users_data[user_id]['awaiting'] = 'interests'
                save_users_data(users_data)
                progress = get_profile_progress(users_data[user_id])
                bot.send_message(message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())
        elif text == "–ì–æ—Ç–æ–≤–æ ‚úÖ":
            current_metro = users_data[user_id]['description'].get('metro_station', [])
            if not current_metro:
                bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –≥–æ—Ä–æ–¥! üòä")
                return

            users_data[user_id].pop('current_metro_line', None)

            if state == 'edit_metro':
                users_data[user_id]['awaiting'] = None
                save_users_data(users_data)
                bot.send_message(message.chat.id, f"{format_profile(users_data[user_id])}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
            else:
                users_data[user_id]['awaiting'] = 'interests'
                save_users_data(users_data)
                progress = get_profile_progress(users_data[user_id])
                bot.send_message(message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())
    elif text in ["–ü–æ–ª üë®üë©", "–ò–º—è ‚úèÔ∏è", "–í–æ–∑—Ä–∞—Å—Ç üéÇ", "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá", "–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ", "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç", "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà", "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢", "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ"]:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ reply-–∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        state = users_data[user_id].get('awaiting')
        if state != 'edit_select':
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è!", reply_markup=get_main_reply_keyboard())
            return

        if text == "–ü–æ–ª üë®üë©":
            users_data[user_id]['awaiting'] = 'edit_gender'
            save_users_data(users_data)
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
        elif text == "–ò–º—è ‚úèÔ∏è":
            users_data[user_id]['awaiting'] = 'edit_name'
            save_users_data(users_data)
            current_name = users_data[user_id]['description'].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            from telebot.types import ReplyKeyboardMarkup, KeyboardButton
            reply_markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
            reply_markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è ‚úèÔ∏è:\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {current_name}", reply_markup=reply_markup)
        elif text == "–í–æ–∑—Ä–∞—Å—Ç üéÇ":
            users_data[user_id]['awaiting'] = 'edit_age'
            save_users_data(users_data)
            current_age = users_data[user_id]['description'].get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            from telebot.types import ReplyKeyboardMarkup, KeyboardButton
            reply_markup = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)
            reply_markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
            bot.send_message(message.chat.id, f"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ\n\n–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {current_age}", reply_markup=reply_markup)
        elif text == "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá":
            users_data[user_id]['awaiting'] = 'edit_metro'
            save_users_data(users_data)
            current_metro = users_data[user_id]['description'].get('metro_station', [])
            if isinstance(current_metro, list):
                metro_display = ', '.join(current_metro) if current_metro else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            else:
                metro_display = current_metro if current_metro else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ üöá:\n\n–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: {metro_display}", reply_markup=get_metro_keyboard())
        elif text == "–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ":
            users_data[user_id]['awaiting'] = 'edit_interests'
            save_users_data(users_data)
            current_interests = users_data[user_id]['description'].get('interests', [])
            interests_display = ', '.join(current_interests) if current_interests else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            from telebot.types import ReplyKeyboardRemove
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:\n\n–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_display}", reply_markup=ReplyKeyboardRemove())
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:", reply_markup=get_interests_keyboard(selected=current_interests))
        elif text == "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç":
            users_data[user_id]['awaiting'] = 'edit_marital'
            save_users_data(users_data)
            current_marital = users_data[user_id]['description'].get('marital_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            from telebot.types import ReplyKeyboardMarkup, KeyboardButton
            markup = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)
            markup.add(
                KeyboardButton("üíî –ù–µ –∂–µ–Ω–∞—Ç"),
                KeyboardButton("üíî –ù–µ –∑–∞–º—É–∂–µ–º"),
                KeyboardButton("üíï –í—Å—Ç—Ä–µ—á–∞—é—Å—å")
            )
            markup.add(
                KeyboardButton("üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)"),
                KeyboardButton("üíí –ñ–µ–Ω–∞—Ç"),
                KeyboardButton("üíí –ó–∞–º—É–∂–µ–º")
            )
            markup.add(
                KeyboardButton("ü§ù –í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ"),
                KeyboardButton("üòç –í–ª—é–±–ª—ë–Ω"),
                KeyboardButton("ü§∑ –í—Å—ë —Å–ª–æ–∂–Ω–æ")
            )
            markup.add(
                KeyboardButton("üîç –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ")
            )
            markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:\n\n–¢–µ–∫—É—â–µ–µ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {current_marital}", reply_markup=markup)
        elif text == "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà":
            users_data[user_id]['awaiting'] = 'edit_orientation'
            save_users_data(users_data)
            current_orientation = users_data[user_id]['description'].get('sexual_orientation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            from telebot.types import ReplyKeyboardMarkup, KeyboardButton
            markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            orientations = [
                "–ì–µ—Ç–µ—Ä–æ üòä",
                "–ë–∏ üåà",
                "–ì–µ–π/–õ–µ—Å–±–∏ üè≥Ô∏è‚Äçüåà",
                "–î—Ä—É–≥–æ–µ ‚úçÔ∏è"
            ]
            for text_option in orientations:
                markup.add(KeyboardButton(text_option))
            markup.add(KeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è"))
            bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏ –Ω–æ–≤—É—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:\n\n–¢–µ–∫—É—â–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: {current_orientation}", reply_markup=markup)
        elif text == "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢":
            users_data[user_id]['awaiting'] = 'edit_tg_channel'
            save_users_data(users_data)
            current_channel = users_data[user_id]['description'].get('telegram_channel', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            bot.send_message(message.chat.id, f"–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢\n\n–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {current_channel}", reply_markup=get_telegram_channel_keyboard())
        elif text == "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù":
            users_data[user_id]['awaiting'] = 'edit_extra_info'
            save_users_data(users_data)
            current_extra = users_data[user_id]['description'].get('extra_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            if not current_extra or current_extra == "":
                current_extra = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            bot.send_message(message.chat.id, f"–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù\n\n–¢–µ–∫—É—â–∞—è –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {current_extra}", reply_markup=get_extra_info_keyboard(edit=True))
        elif text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            previous_name = users_data[user_id]['description'].get('name')
            previous_age = users_data[user_id]['description'].get('age')
            users_data[user_id]['description'] = {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            }
            users_data[user_id]['previous_name'] = previous_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            users_data[user_id]['previous_age'] = previous_age  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            users_data[user_id]['awaiting'] = 'gender'
            save_users_data(users_data)
            bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –∏ –≥–æ—Ä–æ–¥–æ–≤ –õ–û
    elif message.text and (message.text.startswith(("üü•", "üü¶", "üü©", "üüß", "üü™", "üè°"))):
        if user_id not in users_data:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé", reply_markup=ReplyKeyboardRemove())
            return

        state = users_data[user_id].get('awaiting')
        if state not in ['metro', 'edit_metro']:
            from telebot.types import ReplyKeyboardRemove
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∫–µ—Ç—ã.", reply_markup=ReplyKeyboardRemove())
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏/–≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –≥–∞–ª–æ—á–∫—É)
        if message.text.startswith("üè°"):
            # –î–ª—è –≥–æ—Ä–æ–¥–æ–≤ –õ–û
            city_name = message.text.replace("üè° ", "").replace(" ‚úÖ", "")
            if city_name == "–î—Ä—É–≥–æ–µ ‚úçÔ∏è":
                users_data[user_id].pop('current_metro_line', None)
                if state == 'edit_metro':
                    users_data[user_id]['awaiting'] = 'edit_custom_lo'
                else:
                    users_data[user_id]['awaiting'] = 'custom_lo'
                save_users_data(users_data)
                from telebot.types import ReplyKeyboardRemove
                bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú—É—Ä–∏–Ω–æ') ‚úçÔ∏è:", reply_markup=ReplyKeyboardRemove())
                return

            station_name = f"–õ–û: {city_name}"
        else:
            # –î–ª—è —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ
            station_name = message.text.split(" ", 1)[1].replace(" ‚úÖ", "")  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –≥–∞–ª–æ—á–∫—É

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'metro_station' not in users_data[user_id]['description'] or not isinstance(users_data[user_id]['description']['metro_station'], list):
            users_data[user_id]['description']['metro_station'] = []

        # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –õ–û —É–±–∏—Ä–∞–µ–º "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
        if "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ" in users_data[user_id]['description']['metro_station']:
            users_data[user_id]['description']['metro_station'].remove("–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏
        if station_name in users_data[user_id]['description']['metro_station']:
            users_data[user_id]['description']['metro_station'].remove(station_name)
        else:
            users_data[user_id]['description']['metro_station'].append(station_name)

        save_users_data(users_data)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        line = users_data[user_id].get('current_metro_line')
        if line == 'red':
            markup = get_red_line_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ö—Ä–∞—Å–Ω–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"
        elif line == 'blue':
            markup = get_blue_line_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –°–∏–Ω–µ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"
        elif line == 'green':
            markup = get_green_line_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –ó–µ–ª—ë–Ω–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"
        elif line == 'orange':
            markup = get_orange_line_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –û—Ä–∞–Ω–∂–µ–≤–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"
        elif line == 'purple':
            markup = get_purple_line_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –§–∏–æ–ª–µ—Ç–æ–≤–æ–π –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"
        else:
            # –ï—Å–ª–∏ –º—ã –≤ –≥–æ—Ä–æ–¥–∞—Ö –õ–û
            markup = get_lo_cities_keyboard(selected=users_data[user_id]['description']['metro_station'])
            message_text = "–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ –õ–û (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            bot.send_message(message.chat.id, message_text, reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ—Ç—Ä–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
            selected_count = len(users_data[user_id]['description']['metro_station'])
            bot.reply_to(message, f"–°—Ç–∞–Ω—Ü–∏—è {'–¥–æ–±–∞–≤–ª–µ–Ω–∞' if station_name in users_data[user_id]['description']['metro_station'] else '—É–±—Ä–∞–Ω–∞'}! –í—ã–±—Ä–∞–Ω–æ: {selected_count}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'], func=lambda message: message.text and not message.text.startswith('/'))
def handle_text(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    text = message.text.strip() if message.text else ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ reply-–∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    reply_buttons = ["üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç", "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
                    "–î–∞ üòé", "–ù–µ—Ç üôÖ", "–î–∞", "–ù–µ—Ç", "–ú—É–∂—á–∏–Ω–∞ üë®", "–ñ–µ–Ω—â–∏–Ω–∞ üë©", "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è",
                    "–ì–µ—Ç–µ—Ä–æ üòä", "–ë–∏ üåà", "–ì–µ–π/–õ–µ—Å–±–∏ üè≥Ô∏è‚Äçüåà", "–î—Ä—É–≥–æ–µ ‚úçÔ∏è", "–£–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª üì¢", "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å üö´",
                    "–î–æ–±–∞–≤–∏—Ç—å", "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "üíî –ù–µ –∂–µ–Ω–∞—Ç", "üíî –ù–µ –∑–∞–º—É–∂–µ–º", "üíï –í—Å—Ç—Ä–µ—á–∞—é—Å—å", "üíç –ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)",
                    "üíí –ñ–µ–Ω–∞—Ç", "üíí –ó–∞–º—É–∂–µ–º", "ü§ù –í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ", "üòç –í–ª—é–±–ª—ë–Ω", "ü§∑ –í—Å—ë —Å–ª–æ–∂–Ω–æ",
                    "üîç –í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ", "–ü–æ–ª üë®üë©", "–ò–º—è ‚úèÔ∏è", "–í–æ–∑—Ä–∞—Å—Ç üéÇ", "–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ üöá",
                    "–ò–Ω—Ç–µ—Ä–µ—Å—ã üéâ", "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç", "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è üåà", "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢",
                    "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìù", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–Ω–æ–≤–æ üîÑ"]

    if text in reply_buttons:
        # –≠—Ç–æ reply-–∫–Ω–æ–ø–∫–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
        return

    logging.info(f"TEXT_MESSAGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text[:100]}{'...' if len(text) > 100 else ''}'")

    # --- –ù–æ–≤–æ–µ: —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö ---
    if user_id not in users_data:
        users_data[user_id] = {
            'id': user_id,
            'username': username,
            'source': None,
            'timestamp': None,
            'wants_link': False,
            'description': {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            },
            'awaiting': 'source'
        }
        save_users_data(users_data)

    state = users_data[user_id].get('awaiting')

    # --- –ò–∑–º–µ–Ω–µ–Ω–æ: –≤—Å–µ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —á–∞—Ç –ø–æ—Å–ª–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---
    if state == 'source':
        logging.info(f"USER_SOURCE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –∏—Å—Ç–æ—á–Ω–∏–∫: '{text}'")
        users_data[user_id]['source'] = text
        users_data[user_id]['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users_data[user_id]['awaiting'] = 'join_request'
        save_users_data(users_data)
        logging.info(f"STATE_CHANGE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'join_request'")
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É? üöÄ", reply_markup=get_join_request_keyboard())
        return

    if user_id not in users_data:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé")
        return

    if text.lower() == '—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        bot.reply_to(message, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É [–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å] –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ç–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º. ‚úèÔ∏è")
        return

    if len(text) > 2000:
        bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
        return

    user = users_data[user_id]

    try:
        if state == 'name':
            # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã —ë, –Å, –¥–µ—Ñ–∏—Å –∏ –ø—Ä–æ–±–µ–ª—ã
            if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z\-\s]+$', text):
                logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è: '{text}'")
                bot.reply_to(message, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å! ‚úèÔ∏è")
                return
            if len(text) > 50:
                logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è: '{text}' (–¥–ª–∏–Ω–∞: {len(text)})")
                bot.reply_to(message, "–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            user['description']['name'] = text
            user['awaiting'] = 'age'
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            user.pop('previous_name', None)
            save_users_data(users_data)
            logging.info(f"USER_PROFILE: {user_id} —É–∫–∞–∑–∞–ª –∏–º—è: '{text}'")
            progress = get_profile_progress(user)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
            previous_age = user.get('previous_age')
            if previous_age:
                bot.send_message(message.chat.id, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π:", reply_markup=get_age_keyboard(previous_age, show_back=True))
            else:
                bot.send_message(message.chat.id, f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ", reply_markup=get_back_reply_keyboard())

        elif state == 'age':
            try:
                if text == "-":
                    user['description']['age'] = None
                    user['awaiting'] = 'metro'
                    save_users_data(users_data)
                    logging.info(f"USER_PROFILE: {user_id} –Ω–µ —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç")
                    progress = get_profile_progress(user)
                    bot.reply_to(message, f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá", reply_markup=get_metro_keyboard(show_back=True))
                else:
                    age = int(text)
                    if 16 <= age <= 100:
                        user['description']['age'] = age
                        user['awaiting'] = 'metro'
                        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        user.pop('previous_age', None)
                        save_users_data(users_data)
                        logging.info(f"USER_PROFILE: {user_id} —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
                        progress = get_profile_progress(user)
                        bot.send_message(message.chat.id, f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá", reply_markup=get_metro_keyboard(show_back=True))
                    else:
                        logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age}")
                        bot.reply_to(message, "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 100 –ª–µ—Ç! üòä")
            except ValueError:
                logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: '{text}'")
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25). üòÖ")

        elif state == 'custom_interest':
            if len(text) > 200:
                bot.reply_to(message, "–ò–Ω—Ç–µ—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            user['description']['interests'].append(text)
            user['awaiting'] = 'interests'
            save_users_data(users_data)
            bot.reply_to(message, "–ö—Ä—É—Ç–æ! –ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ' ‚úÖ:", reply_markup=get_interests_keyboard())

        elif state == 'custom_lo':
            if len(text) > 50:
                bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            if not re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s-]+$', text):
                bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å! ‚úèÔ∏è")
                return
            # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ ---
            user['description']['metro_station'] = [f"–õ–û: {text}"]
            # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
            user['awaiting'] = 'interests'
            save_users_data(users_data)
            progress = get_profile_progress(user)
            bot.reply_to(message, f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())

        elif state == 'edit_custom_lo':
            if len(text) > 50:
                bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            if not re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s-]+$', text):
                bot.reply_to(message, "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å! ‚úèÔ∏è")
                return
            # --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ ---
            user['description']['metro_station'] = [f"–õ–û: {text}"]
            # --- –∫–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
            user['awaiting'] = None
            save_users_data(users_data)
            bot.reply_to(message, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())

        elif state == 'custom_orientation':
            if len(text) > 50:
                bot.reply_to(message, "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            user['description']['sexual_orientation'] = text
            user['awaiting'] = 'telegram_channel'
            save_users_data(users_data)
            bot.reply_to(message, "–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢", reply_markup=get_telegram_channel_keyboard())

        elif state == 'edit_custom_orientation':
            if len(text) > 50:
                bot.reply_to(message, "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ")
                return
            user['description']['sexual_orientation'] = text
            user['awaiting'] = None
            save_users_data(users_data)
            bot.reply_to(message, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())

        elif state == 'custom_tg_channel':
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram-–∫–∞–Ω–∞–ª–∞
            channel = text.strip()
            if not channel:
                current_channel = user['description'].get('telegram_channel', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @MyChannel, —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∏–∫)! üì¢\n\n–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {current_channel}")
                return
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É @username
            if channel.startswith('https://t.me/'):
                channel = channel.replace('https://t.me/', '')
            elif channel.startswith('t.me/'):
                channel = channel.replace('t.me/', '')
            if channel.startswith('@'):
                channel = channel[1:]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if not re.match(r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9_]+$', channel):
                current_channel = user['description'].get('telegram_channel', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                bot.reply_to(message, f"–ö–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è! üì¢\n\n–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {current_channel}")
                return
            if len(channel) > 50:
                current_channel = user['description'].get('telegram_channel', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                bot.reply_to(message, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ\n\n–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {current_channel}")
                return
            user['description']['telegram_channel'] = f"@{channel}"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –∫–∞–Ω–∞–ª
            if user.get('prev_awaiting') == 'edit_tg_channel':
                user['awaiting'] = None
                user['prev_awaiting'] = None
                save_users_data(users_data)
                bot.reply_to(message, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())
            else:
                user['awaiting'] = 'extra_info'
                save_users_data(users_data)
                bot.reply_to(message, "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_reply_keyboard(show_back=True))
        elif state == 'extra_info_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if not text or text.strip() == '-':
                user['description']['extra_info'] = None
            else:
                user['description']['extra_info'] = text
            user['awaiting'] = None
            save_users_data(users_data)
            bot.reply_to(message, f"{format_profile(user)}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_main_reply_keyboard())

        # --- –î–û–ë–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
        elif state == 'edit_extra_info_input':
            if not text or text.strip() == '-':
                user['description']['extra_info'] = None
            else:
                user['description']['extra_info'] = text
            user['awaiting'] = None
            save_users_data(users_data)
            bot.reply_to(message, f"{format_profile(user)}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_profile_keyboard())
        # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---

        elif state and state.startswith('edit_'):
            field = state.split('_')[1]
            if field == 'gender':
                bot.reply_to(message, "–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
            elif field == 'name':
                if not re.match(r'^[–ê-–Ø–∞-—è–Å—ëA-Za-z\-\s]+$', text):
                    current_name = user['description'].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è: '{text}'")
                    bot.reply_to(message, f"–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å! ‚úèÔ∏è\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {current_name}")
                    return
                if len(text) > 50:
                    current_name = user['description'].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    logging.info(f"USER_ERROR: {user_id} –≤–≤–µ–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è: '{text}' (–¥–ª–∏–Ω–∞: {len(text)})")
                    bot.reply_to(message, f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤. üòÖ\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {current_name}")
                    return
                user['description']['name'] = text
                user['awaiting'] = None
                save_users_data(users_data)
                bot.reply_to(message, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())
            elif field == 'age':
                try:
                    age = int(text)
                    if 16 <= age <= 100:
                        user['description']['age'] = age
                        user['awaiting'] = None
                        save_users_data(users_data)
                        bot.reply_to(message, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())
                    else:
                        current_age = user['description'].get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                        bot.reply_to(message, f"–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 16 –¥–æ 100 –ª–µ—Ç! üòä\n\n–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {current_age}")
                except ValueError:
                    current_age = user['description'].get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    bot.reply_to(message, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25). üòÖ\n\n–¢–µ–∫—É—â–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {current_age}")
            else:
                # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è" –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if text not in ["–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è", "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"]:
                    current_field = field.replace('_', ' ').title()
                    bot.reply_to(message, f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—è '{current_field}'! üòä")

        elif state and state.startswith('interests:'):
            category = state.split(':', 1)[1]
            progress = get_profile_progress(users_data[user_id])
            bot.reply_to(message, f"{progress}–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests'], category=category))
        elif state == 'edit_interests':
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests']))
        elif state and state.startswith('edit_interests:'):
            category = state.split(':', 1)[1]
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category} (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard(selected=users_data[user_id]['description']['interests'], category=category))
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ None –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@bot.message_handler(commands=['profile', 'profile@VProgulkeBot'])
def show_profile(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    chat_type = 'group' if message.chat.type in ['group', 'supergroup'] else 'private'
    is_group_chat = message.chat.type in ['group', 'supergroup']

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, '–ö–æ–º–∞–Ω–¥–∞ /profile', chat_type)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ "–ø—Ä–æ—Ñ–∏–ª—å @username")
    if message.reply_to_message and message.reply_to_message.from_user:
        replied_user_id = str(message.reply_to_message.from_user.id)
        replied_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        replied_is_bot = message.reply_to_message.from_user.is_bot

        logging.info(f"PROFILE_REPLY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {replied_user_id} (@{replied_username})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
        if replied_is_bot:
            bot_profile = format_bot_profile(replied_username)
            if bot_profile:
                bot.reply_to(message, bot_profile)
                logging.info(f"BOT_PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ @{replied_username}")
            else:
                bot.reply_to(message, f"ü§ñ –ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞ @{replied_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç
        if replied_user_id not in users_data:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{replied_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á üòî")
            return

        if not is_description_complete(users_data[replied_user_id]):
            bot.reply_to(message, f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{replied_username} –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω üìù")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç
        try:
            profile_text = format_profile(users_data[replied_user_id], is_own_profile=False)
            bot.reply_to(message, profile_text, parse_mode='Markdown')
            logging.info(f"PROFILE_SHOWN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å @{replied_username} —á–µ—Ä–µ–∑ reply –∫–æ–º–∞–Ω–¥—É /profile –≤ {'–≥—Ä—É–ø–ø–µ' if is_group_chat else '–õ–°'}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ show_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if user_id not in users_data:
        logging.warning(f"PROFILE_ERROR: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé")
        return

    if not is_description_complete(users_data[user_id]):
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start! üìù")
        return

    try:
        logging.info(f"PROFILE_DISPLAY: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        if is_group_chat:
            # –í –≥—Ä—É–ø–ø–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.reply_to(message, f"{format_profile(users_data[user_id])}")
        else:
            # –í –õ–° –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            bot.reply_to(message, f"{format_profile(users_data[user_id])}", reply_markup=get_profile_keyboard())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = str(call.from_user.id)
    username = call.from_user.username or call.from_user.first_name

    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.answer_callback_query(call.id)

    logging.info(f"CALLBACK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: '{call.data}'")

    if user_id in users_data:
        current_state = users_data[user_id].get('awaiting', 'None')
        logging.info(f"USER_STATE: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{current_state}' –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '{call.data}'")

    # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ metro_station –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
    if user_id in users_data:
        user = users_data[user_id]
        metro = user['description'].get('metro_station')
        data_changed = False

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        if isinstance(metro, str):
            if metro:
                user['description']['metro_station'] = [metro]
            else:
                user['description']['metro_station'] = []
            data_changed = True

        # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–æ
        if clean_metro_data(user):
            data_changed = True

        if data_changed:
            save_users_data(users_data)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å–ª–∏ reply_to_message –µ—Å—Ç—å)
    if getattr(call.message, 'reply_to_message', None) is not None:
        if str(call.message.reply_to_message.from_user.id) != user_id:
            logging.warning(f"SECURITY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!üôÇ ")
            return

    if user_id not in users_data:
        logging.warning(f"USER_NOT_FOUND: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏ —Å /start! üòé")
        return

    user = users_data[user_id]
    data = call.data

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if data == "admin_stats":
            if call.from_user.id != ADMIN_ID:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! üòé")
                return
            show_stats(call.message)
            bot.answer_callback_query(call.id)
            return

        elif data == "list_users":
            if call.from_user.id != ADMIN_ID:
                bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! üòé")
                return
            list_users(call.message)
            bot.answer_callback_query(call.id)
            return



        elif data == "show_profile":
            logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–∂–∞–ª inline-–∫–Ω–æ–ø–∫—É –ü—Ä–æ—Ñ–∏–ª—å")

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_user_activity(user_id, username, 'Inline-–∫–Ω–æ–ø–∫–∞ –ü—Ä–æ—Ñ–∏–ª—å', 'private')

            if not is_description_complete(user):
                bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start! üìù")
                return

            try:
                profile_text = format_profile(user)
                bot.send_message(call.message.chat.id, profile_text, reply_markup=get_profile_keyboard())
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ show_profile –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
            return

        elif data == "show_chat_link":
            logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–∞–∂–∞–ª inline-–∫–Ω–æ–ø–∫—É –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç")

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            log_user_activity(user_id, username, 'Inline-–∫–Ω–æ–ø–∫–∞ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç', 'private')

            if not is_description_complete(user):
                bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç! üìù")
                return

            bot.send_message(call.message.chat.id, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}")
            bot.answer_callback_query(call.id, "–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! üîó")
            return



        elif data == "back_to_profile":
            user['awaiting'] = None
            user.pop('current_metro_line', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user.pop('prev_awaiting', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            save_users_data(users_data)

            profile_text = format_profile(user)

            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
            if is_description_complete(user):
                profile_text += f"\n\nüí¨ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}"

            bot.send_message(call.message.chat.id, profile_text, reply_markup=get_profile_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return

        elif data == "reset_profile":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            previous_name = user['description'].get('name')
            previous_age = user['description'].get('age')
            user['description'] = {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            }
            user['previous_name'] = previous_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            user['previous_age'] = previous_age  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            user['awaiting'] = 'gender'
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", reply_markup=get_gender_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return

        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª üì¢" –∏ "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
        elif data == "edit_tg_channel":
            user['awaiting'] = "edit_tg_channel"
            save_users_data(users_data)
            current_channel = user['description'].get('telegram_channel', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            bot.send_message(call.message.chat.id, f"–•–æ—á–µ—à—å —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª? üì¢\n\n–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {current_channel}", reply_markup=get_telegram_channel_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return
        elif data == "edit_extra":
            user['awaiting'] = "edit_extra_info"
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù", reply_markup=get_extra_info_keyboard(edit=True))
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return
        elif data == "edit_add_extra_info":
            user['awaiting'] = "edit_extra_info"
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù:")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return

        elif data == "delete_extra_info":
            user['description']['extra_info'] = None
            user['awaiting'] = None
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, f"{format_profile(user)}\n–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id, "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞! üóëÔ∏è")
            return



        elif data.startswith("edit_marital_"):
            marital_mapping = {
                "–Ω–µ_–∂–µ–Ω–∞—Ç": "–ù–µ –∂–µ–Ω–∞—Ç",
                "–Ω–µ_–∑–∞–º—É–∂–µ–º": "–ù–µ –∑–∞–º—É–∂–µ–º", 
                "–≤—Å—Ç—Ä–µ—á–∞—é—Å—å": "–í—Å—Ç—Ä–µ—á–∞—é—Å—å",
                "–ø–æ–º–æ–ª–≤–ª–µ–Ω": "–ü–æ–º–æ–ª–≤–ª–µ–Ω(–∞)",
                "–∂–µ–Ω–∞—Ç": "–ñ–µ–Ω–∞—Ç",
                "–∑–∞–º—É–∂–µ–º": "–ó–∞–º—É–∂–µ–º",
                "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π_–±—Ä–∞–∫": "–í –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –±—Ä–∞–∫–µ",
                "–≤–ª—é–±–ª—ë–Ω": "–í–ª—é–±–ª—ë–Ω",
                "–≤—Å—ë_—Å–ª–æ–∂–Ω–æ": "–í—Å—ë —Å–ª–æ–∂–Ω–æ",
                "–∞–∫—Ç–∏–≤–Ω—ã–π_–ø–æ–∏—Å–∫": "–í –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"
            }
            marital_key = data.split("edit_marital_")[1]
            if marital_key in marital_mapping:
                user['description']['marital_status'] = marital_mapping[marital_key]
                user['awaiting'] = None
                save_users_data(users_data)
                bot.edit_message_text(f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_profile_keyboard())
                bot.answer_callback_query(call.id)
                return

        elif data.startswith("edit_orientation_"):
            orientation_mapping = {
                "–≥–µ—Ç–µ—Ä–æ": "–ì–µ—Ç–µ—Ä–æ",
                "–±–∏": "–ë–∏",
                "–≥–µ–π_–ª–µ—Å–±–∏": "–ì–µ–π/–õ–µ—Å–±–∏",
                "–¥—Ä—É–≥–æ–µ": "custom"
            }
            orientation_key = data.split("edit_orientation_")[1]
            if orientation_key in orientation_mapping:
                if orientation_mapping[orientation_key] == "custom":
                    user['awaiting'] = 'edit_custom_orientation'
                    save_users_data(users_data)
                    markup = InlineKeyboardMarkup()
                    markup.add(InlineKeyboardButton("–ö –ø—Ä–æ—Ñ–∏–ª—é ‚Ü©Ô∏è", callback_data="back_to_profile"))
                    bot.edit_message_text("–£–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–∞–Ω—Å–µ–∫—Å—É–∞–ª') ‚úçÔ∏è:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                else:
                    user['description']['sexual_orientation'] = orientation_mapping[orientation_key]
                    user['awaiting'] = None
                    save_users_data(users_data)
                    bot.edit_message_text(f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_profile_keyboard())
                bot.answer_callback_query(call.id)
                return






        # --- –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–´–ô –í–´–ë–û–† –ò–ù–¢–ï–†–ï–°–û–í ---
        elif data.startswith("interestcat_"):
            category = data.split("_", 1)[1]
            if user['awaiting'].startswith('edit_'):
                user['awaiting'] = f"edit_interests:{category}"
            else:
                user['awaiting'] = f"interests:{category}"
            save_users_data(users_data)
            markup = get_interests_keyboard(selected=user['description']['interests'], category=category)
            bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id)
            return

        elif data == "interests_back":
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if user['awaiting'].startswith('edit_interests'):
                user['awaiting'] = 'edit_interests'
            else:
                user['awaiting'] = 'interests'
            save_users_data(users_data)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            current_interests = user['description'].get('interests', [])
            if user['awaiting'] == 'edit_interests' and current_interests:
                interests_display = ', '.join(current_interests)
                message_text = f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:\n\n–¢–µ–∫—É—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_display}"
            else:
                if current_interests:
                    interests_display = ', '.join(current_interests)
                    message_text = f"–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {interests_display}"
                else:
                    message_text = "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:"

            markup = get_interests_keyboard(selected=user['description']['interests'])
            bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id)
            return

        elif data.startswith("interest_"):
            # –í—ã–±–æ—Ä/—Å–Ω—è—Ç–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            interest = data.split("_", 1)[1]
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
            awaiting = user.get('awaiting', '')
            category = None
            if awaiting.startswith('interests:'):
                category = awaiting.split(':', 1)[1]
            elif awaiting.startswith('edit_interests:'):
                category = awaiting.split(':', 1)[1]
            if interest == "–î—Ä—É–≥–æ–µ":
                user['awaiting'] = 'custom_interest'
                save_users_data(users_data)
                bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–Ω–∏–≥–∏') ‚úçÔ∏è:")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id)
            else:
                if interest in user['description']['interests']:
                    user['description']['interests'].remove(interest)
                else:
                    user['description']['interests'].append(interest)
                save_users_data(users_data)
                # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                if category:
                    markup = get_interests_keyboard(selected=user['description']['interests'], category=category)
                else:
                    markup = get_interests_keyboard(selected=user['description']['interests'])
                bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                bot.answer_callback_query(call.id)
            return

        elif data == "interests_done":
            if not user['description']['interests']:
                bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å! üòä")
                return
            # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –∞–Ω–∫–µ—Ç—ã
            if user['awaiting'] and user['awaiting'].startswith('edit_'):
                user['awaiting'] = None
                save_users_data(users_data)
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_profile_keyboard())
            else:
                user['awaiting'] = 'marital_status'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:", reply_markup=get_marital_status_keyboard(show_back=True))
            bot.answer_callback_query(call.id)
            return
        # --- –ö–û–ù–ï–¶ –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ì–û –í–´–ë–û–†–ê –ò–ù–¢–ï–†–ï–°–û–í ---
        # --- –ú–ï–¢–†–û: –≤—ã–±–æ—Ä –≤–µ—Ç–∫–∏, —Å—Ç–∞–Ω—Ü–∏–∏, –õ–û, –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ (–ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –í–´–ë–û–†) ---
        if data.startswith("metro_line_"):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É –º–µ—Ç—Ä–æ
            line = data.split("_")[2]
            user['current_metro_line'] = line
            save_users_data(users_data)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ç–∫–∏
            if line == "red":
                markup = get_red_line_keyboard(selected=user['description'].get('metro_station', []))
            elif line == "blue":
                markup = get_blue_line_keyboard(selected=user['description'].get('metro_station', []))
            elif line == "green":
                markup = get_green_line_keyboard(selected=user['description'].get('metro_station', []))
            elif line == "orange":
                markup = get_orange_line_keyboard(selected=user['description'].get('metro_station', []))
            elif line == "purple":
                markup = get_purple_line_keyboard(selected=user['description'].get('metro_station', []))
            else:
                markup = get_metro_keyboard(selected=user['description'].get('metro_station', []))
            bot.edit_message_text(f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –≤–µ—Ç–∫–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å –≥–æ—Ä–æ–¥–∞–º–∏ –õ–û, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
            bot.answer_callback_query(call.id)
            return

        if data.startswith("metro_"):
            value = data[6:]
            # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ª–∏–Ω–∏–∏ ---
            if value == "back":
                user.pop('current_metro_line', None)
                save_users_data(users_data)
                markup = get_metro_keyboard(selected=user['description'].get('metro_station', []))

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                current_metro = user['description'].get('metro_station', [])
                if user['awaiting'] and user['awaiting'].startswith('edit_') and current_metro:
                    if isinstance(current_metro, list):
                        metro_display = ', '.join(current_metro)
                    else:
                        metro_display = current_metro
                    message_text = f"–í—ã–±–µ—Ä–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –õ–û (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ ÔøΩ—å–∫–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):\n\n–¢–µ–∫—É—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏: {metro_display}"
                else:
                    message_text = "–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá"

                bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                bot.answer_callback_query(call.id)
                return
            if value == "done":
                current_metro = user['description'].get('metro_station', [])
                if not current_metro:
                    bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ –≥–æ—Ä–æ–¥! üòä")
                    return
                user.pop('current_metro_line', None)
                user['awaiting'] = 'interests' if not user['awaiting'].startswith('edit_') else None
                save_users_data(users_data)
                if user['awaiting'] == 'interests':
                    progress = get_profile_progress(user)
                    bot.edit_message_text(f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_interests_keyboard())
                else:
                    # –£–±—Ä–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
                    bot.edit_message_text(f"{format_profile(user)}\n–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_profile_keyboard())
                bot.answer_callback_query(call.id)
                return
            if value == "–Ø –∏–∑ –õ–û":
                user.pop('current_metro_line', None)
                save_users_data(users_data)
                markup = get_lo_cities_keyboard(selected=user['description'].get('metro_station', []))
                bot.edit_message_text("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥–∞ –õ–û (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–º–µ—Å—Ç–µ —Å–æ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –º–µ—Ç—Ä–æ, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ ‚úÖ'):", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                bot.answer_callback_query(call.id)
                return

            if value == "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è —Å–Ω—è—Ç–∏—è –≥–∞–ª–æ—á–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
                current_metro = user['description'].get('metro_station', [])
                if isinstance(current_metro, list) and "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ" in current_metro:
                    # –°–Ω–∏–º–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    user['description']['metro_station'] = []
                else:
                    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–±–æ—Ä—ã (—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –∏ –≥–æ—Ä–æ–¥–∞ –õ–û) –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
                    user['description']['metro_station'] = ["–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"]

                user.pop('current_metro_line', None)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if user['awaiting'] and user['awaiting'].startswith('edit_'):
                    # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    save_users_data(users_data)
                    markup = get_metro_keyboard(selected=user['description']['metro_station'])
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                    bot.answer_callback_query(call.id)
                    return
                else:
                    user['awaiting'] = 'interests'
                    save_users_data(users_data)
                    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", reply_markup=get_interests_keyboard())
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    bot.answer_callback_query(call.id)
                    return

            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ
            if 'metro_station' not in user['description']:
                user['description']['metro_station'] = []
            elif user['description']['metro_station'] is None:
                user['description']['metro_station'] = []
            elif not isinstance(user['description']['metro_station'], list):
                current_value = user['description']['metro_station']
                user['description']['metro_station'] = [current_value] if current_value else []

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            old_metro_stations = user['description']['metro_station'].copy()

            # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —É–±–∏—Ä–∞–µ–º "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
            if "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ" in user['description']['metro_station']:
                user['description']['metro_station'].remove("–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ")

            if value in user['description']['metro_station']:
                user['description']['metro_station'].remove(value)
            else:
                user['description']['metro_station'].append(value)

            save_users_data(users_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if old_metro_stations != user['description']['metro_station']:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π –ª–∏–Ω–∏–∏ —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    line = user.get('current_metro_line')
                    if line == "red":
                        markup = get_red_line_keyboard(selected=user['description']['metro_station'])
                    elif line == "blue":
                        markup = get_blue_line_keyboard(selected=user['description']['metro_station'])
                    elif line == "green":
                        markup = get_green_line_keyboard(selected=user['description']['metro_station'])
                    elif line == "orange":
                        markup = get_orange_line_keyboard(selected=user['description']['metro_station'])
                    elif line == "purple":
                        markup = get_purple_line_keyboard(selected=user['description']['metro_station'])
                    else:
                        markup = get_metro_keyboard(selected=user['description']['metro_station'])
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ—Ç—Ä–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            bot.answer_callback_query(call.id)
            return

        if data.startswith("lo_"):
            city = data[3:]
            if 'metro_station' not in user['description']:
                user['description']['metro_station'] = []
            elif user['description']['metro_station'] is None:
                user['description']['metro_station'] = []
            elif not isinstance(user['description']['metro_station'], list):
                current_value = user['description']['metro_station']
                user['description']['metro_station'] = [current_value] if current_value else []

            value = f"–õ–û: {city}"
            if city == "–î—Ä—É–≥–æ–µ ‚úçÔ∏è":
                user.pop('current_metro_line', None)
                if user['awaiting'] and user['awaiting'].startswith('edit_'):
                    user['awaiting'] = 'edit_custom_lo'
                else:
                    user['awaiting'] = 'custom_lo'
                save_users_data(users_data)
                bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú—É—Ä–∏–Ω–æ') ‚úçÔ∏è:")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.answer_callback_query(call.id)
                return

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            old_metro_stations = user['description']['metro_station'].copy()

            # –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞ –õ–û —É–±–∏—Ä–∞–µ–º "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ"
            if "–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ" in user['description']['metro_station']:
                user['description']['metro_station'].remove("–Ø –Ω–µ –≤ –ü–∏—Ç–µ—Ä–µ")

            if value in user['description']['metro_station']:
                user['description']['metro_station'].remove(value)
            else:
                user['description']['metro_station'].append(value)

            save_users_data(users_data)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if old_metro_stations != user['description']['metro_station']:
                try:
                    markup = get_lo_cities_keyboard(selected=user['description']['metro_station'])
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –õ–û –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            bot.answer_callback_query(call.id)
            return
        # --- –ö–û–ù–ï–¶ –ú–ï–¢–†–û ---





        # --- –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---
        elif data == "add_extra_info":
            user['awaiting'] = 'extra_info'
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ –µ—â—ë –æ —Å–µ–±–µ (–¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤) üìù:")
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return

        elif data == "skip_extra_info":
            user['description']['extra_info'] = ""
            user['awaiting'] = None
            save_users_data(users_data)
            bot.send_message(call.message.chat.id, f"{format_profile(user)}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}", reply_markup=get_profile_keyboard())
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.answer_callback_query(call.id)
            return
        # --- –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ ---
        elif data.startswith("back_to_"):
            back_to = data.split("_")[2]
            if back_to == "start":
                user['awaiting'] = 'join_request'
                save_users_data(users_data)
                bot.edit_message_text("–•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É? üöÄ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_join_request_keyboard())
            elif back_to == "gender":
                user['awaiting'] = 'gender'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                bot.edit_message_text(f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª: üë®üë©", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_gender_keyboard())
            elif back_to == "name":
                user['awaiting'] = 'name'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è (–ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ)
                previous_name = user.get('previous_name')
                if previous_name:
                    bot.send_message(call.message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è\n\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ:", reply_markup=get_name_keyboard(previous_name, show_back=True))
                else:
                    bot.send_message(call.message.chat.id, f"{progress}–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ‚úèÔ∏è", reply_markup=get_back_reply_keyboard())
                bot.delete_message(call.message.chat.id, call.message.message_id)
            elif back_to == "age":
                user['awaiting'] = 'age'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                bot.edit_message_text(f"{progress}–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? (–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25) üéÇ", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_back_keyboard("name"))
            elif back_to == "metro":
                user['awaiting'] = 'metro'
                save_users_data(users_data)
                progress = get_profile_progress(user)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
                current_metro = user['description'].get('metro_station', [])
                if current_metro:
                    metro_with_emoji = []
                    for station in current_metro:
                        emoji = get_metro_emoji(station)
                        metro_with_emoji.append(f"{emoji} {station}")
                    metro_display = ', '.join(metro_with_emoji)
                    message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá\n\n–£–∂–µ –≤—ã–±—Ä–∞–Ω–æ: {metro_display}"
                else:
                    message_text = f"{progress}–ù–∞ –∫–∞–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ —Ç—ã –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—à—å? üöá"

                bot.edit_message_text(message_text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_metro_keyboard(show_back=True))
            elif back_to == "interests":
                user['awaiting'] = 'interests'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                bot.edit_message_text(f"{progress}–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ') üéâ:", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=get_interests_keyboard(show_back=True))
            elif back_to == "marital":
                user['awaiting'] = 'marital_status'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                bot.send_message(call.message.chat.id, f"{progress}–í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ üíç:", reply_markup=get_marital_status_keyboard(show_back=True))
                bot.delete_message(call.message.chat.id, call.message.message_id)
            elif back_to == "orientation":
                user['awaiting'] = 'sexual_orientation'
                save_users_data(users_data)
                progress = get_profile_progress(user)
                bot.send_message(call.message.chat.id, f"{progress}–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–µ–∫—Å—É–∞–ª—å–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é üåà:", reply_markup=get_sexual_orientation_keyboard(show_back=True))
                bot.delete_message(call.message.chat.id, call.message.message_id)
            elif back_to == "edit_select":
                user['awaiting'] = 'edit_select'
                user.pop('current_metro_line', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user.pop('prev_awaiting', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                save_users_data(users_data)
                bot.send_message(call.message.chat.id, "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ? ‚úèÔ∏è", reply_markup=get_edit_field_reply_keyboard())
                bot.delete_message(call.message.chat.id, call.message.message_id)
            elif back_to == "profile":
                user['awaiting'] = None
                user.pop('current_metro_line', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                user.pop('prev_awaiting', None)  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                save_users_data(users_data)
                
                profile_text = format_profile(user)

                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
                if is_description_complete(user):
                    profile_text += f"\n\nüí¨ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}"

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, profile_text, reply_markup=get_profile_keyboard())
            bot.answer_callback_query(call.id)
            return

        # --- –ö–û–ù–ï–¶ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ---

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logging.warning(f"UNKNOWN_CALLBACK: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É: '{data}'")
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!")
            return

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activity –∏ /activity@VProgulkeBot
@bot.message_handler(commands=['activity', 'activity@VProgulkeBot'])
def show_activity(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name
    chat_type = 'group' if message.chat.type in ['group', 'supergroup'] else 'private'

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, '–ö–æ–º–∞–Ω–¥–∞ /activity', chat_type)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—á–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —á—É–∂–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        replied_user_id = str(message.reply_to_message.from_user.id)
        replied_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name

        logging.info(f"ACTIVITY_REPLY: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {replied_user_id}")

        # –ò—â–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞—é—Ç
        if replied_user_id not in users_data:
            bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{replied_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á üòî")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            chart_buffer = generate_user_activity_chart(replied_user_id)
            if chart_buffer:
                user_data = users_data[replied_user_id]
                name = user_data.get('description', {}).get('name', replied_username)
                bot.send_photo(
                    message.chat.id,
                    photo=chart_buffer,
                    caption=f"üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (@{replied_username})"
                )
            else:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è @{replied_username}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ show_activity –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {replied_user_id}: {str(e)}")
            bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if user_id not in users_data:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start. üòé")
        return

    try:
        chart_buffer = generate_user_activity_chart(user_id)
        if chart_buffer:
            bot.send_photo(
                message.chat.id,
                photo=chart_buffer,
                caption="üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            )
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è üìä")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_activity –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –∏ /stats@VProgulkeBot
@bot.message_handler(commands=['stats', 'stats@VProgulkeBot'])
def show_stats(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    logging.info(f"ADMIN_ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

    if message.from_user.id != ADMIN_ID:
        logging.warning(f"SECURITY: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á! üòé")
        return

    if not users_data:
        logging.info(f"STATS: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        bot.reply_to(message, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. üòî")
        return

    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = len(users_data)
        complete_profiles = sum(1 for user in users_data.values() if is_description_complete(user))
        wants_link = sum(1 for user in users_data.values() if user.get('wants_link'))

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—É
        gender_stats = {}
        for user in users_data.values():
            gender = user.get('description', {}).get('gender')
            if gender:
                gender_stats[gender] = gender_stats.get(gender, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
        ages = [user.get('description', {}).get('age') for user in users_data.values() 
                if user.get('description', {}).get('age')]
        avg_age = sum(ages) / len(ages) if ages else 0

        # –¢–æ–ø –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        all_interests = []
        for user in users_data.values():
            interests = user.get('description', {}).get('interests', [])
            all_interests.extend(interests)

        interest_count = {}
        for interest in all_interests:
            interest_count[interest] = interest_count.get(interest, 0) + 1

        top_interests = sorted(interest_count.items(), key=lambda x: x[1], reverse=True)[:10]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç—Ä–æ
        metro_stats = {}
        for user in users_data.values():
            metro = user.get('description', {}).get('metro_station', [])
            if isinstance(metro, list):
                for station in metro:
                    metro_stats[station] = metro_stats.get(station, 0) + 1
            elif metro:
                metro_stats[metro] = metro_stats.get(metro, 0) + 1

        top_metro = sorted(metro_stats.items(), key=lambda x: x[1], reverse=True)[:10]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        for user in users_data.values():
            source = user.get('source')
            if source:
                source_stats[source] = source_stats.get(source, 0) + 1

        top_sources = sorted(source_stats.items(), key=lambda x: x[1], reverse=True)[:10]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot**\n\n"
        response += f"üë• **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        response += f"‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π: {complete_profiles}\n"
        response += f"‚Ä¢ –•–æ—Ç—è—Ç —Å—Å—ã–ª–∫—É: {wants_link}\n\n"

        if gender_stats:
            response += f"üë®üë© **–ü–æ –ø–æ–ª—É:**\n"
            for gender, count in gender_stats.items():
                response += f"‚Ä¢ {gender}: {count}\n"
            response += "\n"

        if ages:
            response += f"üéÇ**–í–æ–∑—Ä–∞—Å—Ç:**\n"
            response += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç: {avg_age:.1f} –ª–µ—Ç\n"
            response += f"‚Ä¢ –°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π: {min(ages)} –ª–µ—Ç\n"
            response += f"‚Ä¢ –°–∞–º—ã–π —Å—Ç–∞—Ä—à–∏–π: {max(ages)} –ª–µ—Ç\n\n"

        if top_interests:
            response += f"üéâ **–¢–æ–ø-10 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:**\n"
            for i, (interest, count) in enumerate(top_interests, 1):
                response += f"{i}. {interest}: {count}\n"
            response += "\n"

        if top_metro:
            response += f"üöá **–¢–æ–ø-10 —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ:**\n"
            for i, (station, count) in enumerate(top_metro, 1):
                response += f"{i}. {station}: {count}\n"
            response += "\n"

        if top_sources:
            response += f"üì¢ **–¢–æ–ø-10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:**\n"
            for i, (source, count) in enumerate(top_sources, 1):
                response += f"{i}. {source}: {count}\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                bot.send_message(message.chat.id, part)
        else:
            bot.reply_to(message, response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_stats –¥–ª—è –∞–¥–º–∏–Ω–∞: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_users –∏ /list_users@VProgulkeBot
@bot.message_handler(commands=['list_users', 'list_users@VProgulkeBot'])
def list_users(message):
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á! üòé")
        return

    if not users_data:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. üòî")
        return

    try:
        response = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á:\n\n"
        for uid, data in users_data.items():
            if data.get('wants_link'):
                response += (
                    f"ID: {uid}\n"
                    f"–ò–º—è: @{data['username']}\n"
                    f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data['source']}\n"
                    f"–î–∞—Ç–∞: {data['timestamp']}\n"
                    f"{format_profile(data)}\n"
                )
        bot.reply_to(message, response or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É. üòî")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_users –¥–ª—è –∞–¥–º–∏–Ω–∞: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòÖ")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –∏ /admin@VProgulkeBot
@bot.message_handler(commands=['admin', 'admin@VProgulkeBot'])
def admin_panel(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    logging.info(f"ADMIN_ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    if message.from_user.id != ADMIN_ID:
        logging.warning(f"SECURITY: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á! üòé")
        return

    logging.info(f"ADMIN_PANEL: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è {user_id}")
    bot.reply_to(message, "üîß **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /link

@bot.message_handler(commands=['link', 'link@VProgulkeBot'])
def send_chat_link(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    logging.info(f"ACTION: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç")

    if user_id not in users_data:
        logging.warning(f"LINK_ERROR: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É! üòé")
        return    
    if not is_description_complete(users_data[user_id]):
        logging.warning(f"LINK_ERROR: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
        bot.reply_to(message, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç! üìù")
        return

    logging.info(f"LINK_SENT: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    bot.reply_to(message, f"–ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {CHAT_LINK}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.chat.type in ['group', 'supergroup'])
@bot.message_handler(func=lambda message: message.chat.type in ['group', 'supergroup'])
def track_group_activity(message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot:
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if message.text and message.text.startswith('/'):
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–æ —Å–µ–±–µ", "–ø—Ä–æ—Ñ–∏–ª—å", "–æ–ø–∏—Å–∞–Ω–∏–µ" –∏ –∏—Ö —Å–∏–Ω–æ–Ω–∏–º—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    if message.text and any(message.text.lower().startswith(cmd) for cmd in ['–æ —Å–µ–±–µ', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–ø—Ä–æ—Ñ–∏–ª—å', '–±–∏–æ', '–∫—Ç–æ —è', '–∫—Ç–æ —Ç—ã', '—Ö—Ç–æ —Ç—ã', '—Ö—Ç–æ —è']):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users_data:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data[user_id] = {
            'id': user_id,
            'username': username,
            'source': None,
            'timestamp': None,
            'wants_link': False,
            'description': {
                'gender': None,
                'name': None,
                'age': None,
                'metro_station': None,
                'interests': [],
                'marital_status': None,
                'sexual_orientation': None,
                'telegram_channel': None,
                'extra_info': None
            },
            'awaiting': 'awaiting_source_response'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        }
        save_users_data(users_data)
        logging.info(f"NEW_USER_GROUP: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –≤ –≥—Ä—É–ø–ø–µ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø–µ
        try:
            bot.reply_to(message, f"üåü –ü—Ä–∏–≤–µ—Ç, @{username}! –û—Ç–∫—É–¥–∞ —Ç—ã —É–∑–Ω–∞–ª –æ –Ω–∞—à–µ–º —á–∞—Ç–µ? üòé")
            logging.info(f"WELCOME_GROUP: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ –≥—Ä—É–ø–ø–µ")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è {user_id}: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = users_data[user_id].get('awaiting')
    if state == 'awaiting_source_response' and message.text:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤ –≥—Ä—É–ø–ø–µ
        logging.info(f"USER_SOURCE_GROUP: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∫–∞–∑–∞–ª –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ: '{message.text}'")
        users_data[user_id]['source'] = message.text
        users_data[user_id]['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        users_data[user_id]['awaiting'] = 'join_request'
        save_users_data(users_data)

        try:
            bot.reply_to(message, f"–°–ø–∞—Å–∏–±–æ! –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É? –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –ª–∏—á–∫—É /start üöÄ")
            logging.info(f"REDIRECT_TO_PM: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –õ–° –¥–ª—è {user_id}: {e}")
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    log_user_activity(user_id, username, '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ', 'group')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ Flask
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ ·¥†·¥®·¥©·¥è·¥¶ è·¥ß·¥ã·¥á Bot üöÄ")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logging.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    import time
    from requests.exceptions import ConnectionError, ReadTimeout
    from urllib3.exceptions import ProtocolError

    max_retries = 5
    retry_delay = 5

    while True:
        try:
            logging.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except (ConnectionError, ReadTimeout, ProtocolError) as e:
            logging.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
            time.sleep(retry_delay)
            continue
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
            try:
                bot.send_message(ADMIN_ID, f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}")
            except:
                pass
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ —Ç–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            time.sleep(retry_delay)
            continue