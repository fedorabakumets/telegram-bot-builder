#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""
import asyncio
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_combined_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞ —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "keyboardType": "combined",
                    "buttons": [
                        {"id": "btn1", "text": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "goto", "target": "menu"},
                        {"id": "btn2", "text": "–ü–æ–º–æ—â—å", "action": "command", "target": "/help"}
                    ],
                    "inlineButtons": [
                        {"id": "inline1", "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "action": "goto", "target": "settings"},
                        {"id": "inline2", "text": "–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", "action": "url", "url": "https://example.com"}
                    ],
                    "separateMessages": True,
                    "keyboardTitle": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
                    "resizeKeyboard": True,
                    "oneTimeKeyboard": False,
                    "persistentKeyboard": False
                }
            }
        ],
        "connections": []
    }
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –±–æ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–æ—Ç–∞:")
    print(json.dumps(bot_data, indent=2, ensure_ascii=False))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    node = bot_data["nodes"][0]
    data = node["data"]
    
    checks = [
        ("keyboard type", data.get("keyboardType") == "combined"),
        ("reply buttons", len(data.get("buttons", [])) > 0),
        ("inline buttons", len(data.get("inlineButtons", [])) > 0),
        ("separate messages", data.get("separateMessages") == True),
        ("keyboard title", data.get("keyboardTitle") is not None),
        ("resize keyboard", data.get("resizeKeyboard") == True),
    ]
    
    missing_checks = []
    for check_name, check_result in checks:
        if not check_result:
            missing_checks.append(check_name)
    
    if missing_checks:
        print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(missing_checks)}")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True

if __name__ == "__main__":
    success = test_combined_keyboards()
    if success:
        print("\nüéâ –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –Ω–µ –ø—Ä–æ–π–¥–µ–Ω!")