"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
"""

import asyncio
import logging
from datetime import datetime
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardBuilder, InlineKeyboardBuilder, InlineKeyboardButton, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–æ–∫–µ–Ω)
bot = Bot(token="TEST_BOT_TOKEN")
dp = Dispatcher()

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∏)
async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")

# –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

@dp.message(lambda message: message.text and message.text == "/start")
async def start_handler(message: types.Message):
    """
    –¢–ï–°–¢ 1: –£–∑–µ–ª —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –≤–≤–æ–¥–∞ –ò –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞, –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    text = """üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä

–≠—Ç–æ—Ç —É–∑–µ–ª –∏–º–µ–µ—Ç:
‚úÖ –í–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–∫–Ω–æ–ø–æ—á–Ω—ã–π)
‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞ (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–û–ø—Ü–∏—è –ê", callback_data="input_start_option_a"))
    builder.add(InlineKeyboardButton(text="–û–ø—Ü–∏—è –ë", callback_data="input_start_option_b"))
    builder.add(InlineKeyboardButton(text="–û–ø—Ü–∏—è –í", callback_data="input_start_option_c"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback

@dp.message(lambda message: message.text and message.text == "/test_text")
async def test_text_input_handler(message: types.Message):
    """
    –¢–ï–°–¢ 2: –£–∑–µ–ª —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–±–æ—Ä–æ–º –≤–≤–æ–¥–∞ –ò –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """
    text = """üìù –¢–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞

–≠—Ç–æ—Ç —É–∑–µ–ª –∏–º–µ–µ—Ç:
‚úÖ –í–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"""
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä)
    await message.answer(text)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä)
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["waiting_for_input"] = "test_text_node"
    user_data[message.from_user.id]["input_type"] = "text"

@dp.message(lambda message: message.text and message.text == "/test_normal")
async def test_normal_keyboard_handler(message: types.Message):
    """
    –¢–ï–°–¢ 3: –£–∑–µ–ª –ë–ï–ó —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    """
    text = """‚å®Ô∏è –¢–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä

–≠—Ç–æ—Ç —É–∑–µ–ª –∏–º–µ–µ—Ç:
‚ùå –ù–ï–¢ —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    
    # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï–¢ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 1", callback_data="normal_btn_1"))
    builder.add(InlineKeyboardButton(text="–ö–Ω–æ–ø–∫–∞ 2", callback_data="normal_btn_2"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)

# Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@dp.callback_query(lambda callback_query: callback_query.data.startswith("input_start_"))
async def handle_start_input_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞"""
    option_id = callback_query.data.replace("input_start_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})
    user_data[callback_query.from_user.id]["start_choice"] = option_id
    user_data[callback_query.from_user.id]["timestamp"] = datetime.now().isoformat()
    
    await callback_query.message.edit_text(
        f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
        f"üìã –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {option_id}\n"
        f"üéØ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
        f"–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ /test_text - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥\n"
        f"‚Ä¢ /test_normal - –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"
    )

@dp.callback_query(lambda callback_query: callback_query.data.startswith("normal_btn_"))
async def handle_normal_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    btn_id = callback_query.data.replace("normal_btn_", "")
    
    await callback_query.message.edit_text(
        f"üîò –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞: {btn_id}\n\n"
        f"‚úÖ –û–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ\n"
        f"üéØ –ö–æ–≥–¥–∞ –ù–ï–¢ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞\n\n"
        f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
        f"‚Ä¢ /start - –∫–Ω–æ–ø–æ—á–Ω—ã–π —Å–±–æ—Ä –≤–≤–æ–¥–∞\n"
        f"‚Ä¢ /test_text - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –≤–≤–æ–¥–∞"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message()
async def handle_user_input(message: types.Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id
    
    if user_id in user_data and "waiting_for_input" in user_data[user_id]:
        node_id = user_data[user_id]["waiting_for_input"]
        input_type = user_data[user_id].get("input_type", "text")
        
        if node_id == "test_text_node":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id]["text_answer"] = message.text
            user_data[user_id]["timestamp"] = datetime.now().isoformat()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del user_data[user_id]["waiting_for_input"]
            
            await message.answer(
                f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n"
                f"üìù –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {message.text}\n"
                f"üéØ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ\n"
                f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                f"‚Ä¢ /start - –∫–Ω–æ–ø–æ—á–Ω—ã–π —Å–±–æ—Ä –≤–≤–æ–¥–∞\n"
                f"‚Ä¢ /test_normal - –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"
            )
        return
    
    # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
    await message.answer(
        "üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞\n"
        "‚Ä¢ /test_text - —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞\n"
        "‚Ä¢ /test_normal - —Ç–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä\n\n"
        "üéØ –¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –ù–ï–¢ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"
    )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("=" * 50)
    print("‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê:")
    print("  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏")
    print("  ‚Ä¢ –°–±–æ—Ä –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("  ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("=" * 50)
    print()
    print("üéØ –¢–ï–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´:")
    print("  /start - –∫–Ω–æ–ø–æ—á–Ω—ã–π —Å–±–æ—Ä –≤–≤–æ–¥–∞ (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)")
    print("  /test_text - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–±–æ—Ä –≤–≤–æ–¥–∞ (–ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)")
    print("  /test_normal - –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
    print()
    print("‚ö†Ô∏è  –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("üìù –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    await init_database()
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã dp.start_polling()
    # –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")

if __name__ == "__main__":
    asyncio.run(main())