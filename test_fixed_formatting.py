#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import requests

def create_fixed_formatting_test():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –≠—Ç–æ <i>—Ç–µ—Å—Ç</i> —Å <u>HTML</u> —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.",
                    "keyboardType": "inline",
                    "markdown": False,
                    "formatMode": "html",  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    "buttons": [
                        {
                            "id": "btn-test",
                            "text": "–¢–µ—Å—Ç",
                            "action": "goto",
                            "target": "test-node"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "test-node",
                "type": "message",
                "data": {
                    "messageText": "–≠—Ç–æ <strong>–∂–∏—Ä–Ω—ã–π</strong> —Ç–µ–∫—Å—Ç –∏ <em>–∫—É—Ä—Å–∏–≤–Ω—ã–π</em>",
                    "keyboardType": "inline",
                    "markdown": False,
                    "formatMode": "html",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "–ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 100}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "test-node"},
            {"id": "conn2", "from": "test-node", "to": "start-1"}
        ]
    }
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTML —Ç–µ–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º parse mode",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('test_fixed_formatting_result.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_fixed_formatting_result.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                analyze_fixed_formatting(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_fixed_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    create_fixed_formatting_test()

def analyze_fixed_formatting(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 40)
    
    lines = code.split('\n')
    
    # –ò—â–µ–º start_handler
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            print(f"üìç –ù–∞–π–¥–µ–Ω start_handler –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 30 —Å—Ç—Ä–æ–∫
            for j in range(i, min(i + 30, len(lines))):
                if 'text = ' in lines[j] and ('<b>' in lines[j] or '<i>' in lines[j] or '<u>' in lines[j]):
                    print(f"üìù –ù–∞–π–¥–µ–Ω HTML —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ {j+1}:")
                    print(f"   {lines[j].strip()}")
                    
                    # –ò—â–µ–º parse_mode –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                    for k in range(j, min(j + 10, len(lines))):
                        if 'parse_mode=ParseMode.' in lines[k]:
                            print(f"üìä Parse mode –Ω–∞ —Å—Ç—Ä–æ–∫–µ {k+1}: {lines[k].strip()}")
                            
                            if 'ParseMode.HTML' in lines[k]:
                                print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: HTML —Ç–µ–≥–∏ —Å ParseMode.HTML")
                            elif 'ParseMode.MARKDOWN' in lines[k]:
                                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: HTML —Ç–µ–≥–∏ —Å ParseMode.MARKDOWN")
                            break
                    break
            break
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    html_texts = 0
    markdown_texts = 0
    
    for line in lines:
        if 'text = ' in line:
            if '<b>' in line or '<i>' in line or '<u>' in line or '<strong>' in line or '<em>' in line:
                html_texts += 1
            if '**' in line or '*' in line or '__' in line:
                markdown_texts += 1
    
    html_modes = code.count('parse_mode=ParseMode.HTML')
    markdown_modes = code.count('parse_mode=ParseMode.MARKDOWN')
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   HTML —Ç–µ–∫—Å—Ç–æ–≤: {html_texts}")
    print(f"   Markdown —Ç–µ–∫—Å—Ç–æ–≤: {markdown_texts}")
    print(f"   ParseMode.HTML: {html_modes}")
    print(f"   ParseMode.MARKDOWN: {markdown_modes}")
    
    if html_texts > 0 and html_modes > 0:
        print("‚úÖ HTML —Ç–µ–∫—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π parse mode")
    elif html_texts > 0 and markdown_modes > 0:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: HTML —Ç–µ–∫—Å—Ç—ã —Å markdown parse mode")
    else:
        print("‚ùì –ù–µ—Ç HTML —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

if __name__ == "__main__":
    test_fixed_formatting()