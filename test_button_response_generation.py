"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json
from nanoid import generate

def create_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    # –£–∑–µ–ª —Å—Ç–∞—Ä—Ç
    start_node = {
        "id": "start-1",
        "type": "start",
        "position": {"x": 100, "y": 100},
        "data": {
            "messageText": "üß™ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏",
            "keyboardType": "inline",
            "buttons": [
                {
                    "id": generate(),
                    "text": "üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
                    "action": "goto",
                    "target": "question-buttons"
                }
            ],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –í–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ - –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    question_buttons_node = {
        "id": "question-buttons",
        "type": "user-input",
        "position": {"x": 100, "y": 300},
        "data": {
            "inputPrompt": "üîò –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç:",
            "responseType": "buttons",
            "responseOptions": [
                {"id": "color1", "text": "üî¥ –ö—Ä–∞—Å–Ω—ã–π", "value": "red"},
                {"id": "color2", "text": "üü¢ –ó–µ–ª–µ–Ω—ã–π", "value": "green"},
                {"id": "color3", "text": "üîµ –°–∏–Ω–∏–π", "value": "blue"}
            ],
            "allowMultipleSelection": False,
            "inputVariable": "favorite_color",
            "saveToDatabase": True,
            "inputSuccessMessage": "–û—Ç–ª–∏—á–Ω–æ! –¶–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            "inputType": "text",
            "keyboardType": "none",
            "buttons": [],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –í–æ–ø—Ä–æ—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    question_multi_node = {
        "id": "question-multi",
        "type": "user-input",
        "position": {"x": 100, "y": 500},
        "data": {
            "inputPrompt": "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            "responseType": "buttons",
            "responseOptions": [
                {"id": "int1", "text": "üìö –ß—Ç–µ–Ω–∏–µ", "value": "reading"},
                {"id": "int2", "text": "üéµ –ú—É–∑—ã–∫–∞", "value": "music"},
                {"id": "int3", "text": "‚öΩ –°–ø–æ—Ä—Ç", "value": "sport"},
                {"id": "int4", "text": "üéÆ –ò–≥—Ä—ã", "value": "games"}
            ],
            "allowMultipleSelection": True,
            "inputVariable": "interests",
            "saveToDatabase": True,
            "inputSuccessMessage": "–ò–Ω—Ç–µ—Ä–µ—Å—ã –∑–∞–ø–∏—Å–∞–Ω—ã!",
            "inputType": "text",
            "keyboardType": "none",
            "buttons": [],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —É–∑–µ–ª
    final_node = {
        "id": "final-1",
        "type": "message",
        "position": {"x": 100, "y": 700},
        "data": {
            "messageText": "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            "keyboardType": "inline",
            "buttons": [
                {
                    "id": generate(),
                    "text": "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                    "action": "goto",
                    "target": "start-1"
                }
            ],
            "resizeKeyboard": True,
            "oneTimeKeyboard": False,
            "formatMode": "none"
        }
    }
    
    nodes = [start_node, question_buttons_node, question_multi_node, final_node]
    connections = [
        {"id": "conn1", "source": "start-1", "target": "question-buttons"},
        {"id": "conn2", "source": "question-buttons", "target": "question-multi"},
        {"id": "conn3", "source": "question-multi", "target": "final-1"}
    ]
    
    bot_data = {
        "nodes": nodes,
        "connections": connections
    }
    
    project_data = {
        "name": "üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —Å –∫–Ω–æ–ø–æ—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏",
        "data": json.dumps(bot_data)
    }
    
    return project_data

def test_bot_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞"""
    
    try:
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project_data = create_test_bot()
        response = requests.post(
            "http://localhost:5000/api/projects",
            json=project_data,
            headers={"Content-Type": "application/json"}
        )
        
        if response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code} - {response.text}")
            return
            
        project = response.json()
        project_id = project['id']
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞...")
        
        response = requests.post(
            f"http://localhost:5000/api/projects/{project_id}/export"
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {response.status_code} - {response.text}")
            return
            
        export_data = response.json()
        print(f"üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(export_data.keys())}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
        python_code = ""
        if 'files' in export_data and 'bot.py' in export_data['files']:
            python_code = export_data['files']['bot.py']
        elif 'code' in export_data:
            python_code = export_data['code']
        elif 'pythonCode' in export_data:
            python_code = export_data['pythonCode']
        
        if not python_code:
            print(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {export_data.keys()}")
            print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {export_data}")
            return
            
        print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with open(f"test_button_bot_{project_id}.py", "w", encoding="utf-8") as f:
            f.write(python_code)
        
        print(f"üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_button_bot_{project_id}.py")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
        print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        if "handle_user_input" in python_code:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        if "responseOptions" in python_code or "response_options" in python_code:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        if "allowMultipleSelection" in python_code or "allow_multiple_selection" in python_code:
            print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        if "save_user_to_db" in python_code or "update_user_data_in_db" in python_code:
            print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("‚ùå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        callback_handlers = python_code.count("async def handle_callback_")
        print(f"üìä Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {callback_handlers}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ inline –∫–Ω–æ–ø–æ–∫
        if "InlineKeyboardMarkup" in python_code and "InlineKeyboardButton" in python_code:
            print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∞–π–ª: test_button_bot_{project_id}.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_bot_generation()