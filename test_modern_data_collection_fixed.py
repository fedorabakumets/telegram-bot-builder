#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É inline –∫–Ω–æ–ø–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
"""

import re
import os

def test_modern_data_collection_template():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    
    –ü—Ä–æ–≤–µ—Ä—è–µ–º:
    1. –ù–∞–ª–∏—á–∏–µ inline –∫–Ω–æ–ø–æ–∫ –≤ collection-message
    2. –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —É–∑–ª–æ–≤
    """
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 70)
    
    # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞
    bot_file = "bots/bot_1.py"
    if not os.path.exists(bot_file):
        print("‚ùå –§–∞–π–ª –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        bot_code = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ collection-message
    collection_callback_tests = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        ("Callback handler collection-message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
         '@dp.callback_query(lambda c: c.data == "collection-message")' in bot_code),
        
        ("–§—É–Ω–∫—Ü–∏—è handle_callback_collection_message –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", 
         'async def handle_callback_collection_message(callback_query: types.CallbackQuery):' in bot_code),
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ inline –∫–Ω–æ–ø–æ–∫
        ("Inline –∫–Ω–æ–ø–∫–∞ '–û—Ç–ª–∏—á–Ω–æ' —Å–æ–∑–¥–∞–µ—Ç—Å—è", 
         'InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ", callback_data="thank-you-message")' in bot_code),
        
        ("Inline –∫–Ω–æ–ø–∫–∞ '–•–æ—Ä–æ—à–æ' —Å–æ–∑–¥–∞–µ—Ç—Å—è", 
         'InlineKeyboardButton(text=" –•–æ—Ä–æ—à–æ", callback_data="thank-you-message")' in bot_code),
        
        ("Inline –∫–Ω–æ–ø–∫–∞ '–°—Ä–µ–¥–Ω–µ' —Å–æ–∑–¥–∞–µ—Ç—Å—è", 
         'InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ", callback_data="thank-you-message")' in bot_code),
        
        ("Inline –∫–Ω–æ–ø–∫–∞ '–ü–ª–æ—Ö–æ' —Å–æ–∑–¥–∞–µ—Ç—Å—è", 
         'InlineKeyboardButton(text=" –ü–ª–æ—Ö–æ", callback_data="thank-you-message")' in bot_code),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        ("Waiting for input —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", 
         'user_data[callback_query.from_user.id]["waiting_for_input"] = "collection-message"' in bot_code),
        
        ("Input type —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", 
         'user_data[callback_query.from_user.id]["input_type"] = "text"' in bot_code),
        
        ("Input variable —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", 
         'user_data[callback_query.from_user.id]["input_variable"] = "user_feedback"' in bot_code),
        
        ("Save to database –≤–∫–ª—é—á–µ–Ω–æ", 
         'user_data[callback_query.from_user.id]["save_to_database"] = True' in bot_code),
        
        ("Target node ID —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è", 
         'user_data[callback_query.from_user.id]["input_target_node_id"] = "thank-you-message"' in bot_code),
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    user_input_tests = [
        ("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
         '@dp.message(F.text)' in bot_code),
        
        ("–§—É–Ω–∫—Ü–∏—è handle_user_input –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", 
         'async def handle_user_input(message: types.Message):' in bot_code),
        
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ waiting_for_input —Å—Ç–∞—Ç—É—Å–∞", 
         'if user_id in user_data and "waiting_for_input" in user_data[user_id]:' in bot_code),
        
        ("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ thank-you-message", 
         'elif next_node_id == "thank-you-message":' in bot_code),
        
        ("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", 
         'await update_user_data_in_db(user_id, variable_name, response_data)' in bot_code),
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ thank-you-message
    thank_you_tests = [
        ("Callback handler thank-you-message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
         '@dp.callback_query(lambda c: c.data == "thank-you-message")' in bot_code),
        
        ("–§—É–Ω–∫—Ü–∏—è handle_callback_thank_you_message –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞", 
         'async def handle_callback_thank_you_message(callback_query: types.CallbackQuery):' in bot_code),
        
        ("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞' —Å–æ–∑–¥–∞–µ—Ç—Å—è", 
         'InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞", callback_data="start-command")' in bot_code),
        
        ("–°–æ–æ–±—â–µ–Ω–∏–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è", 
         'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!' in bot_code),
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    all_tests = collection_callback_tests + user_input_tests + thank_you_tests
    
    passed = 0
    failed = 0
    
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ collection-message:")
    for test_name, result in collection_callback_tests:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞:")
    for test_name, result in user_input_tests:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ thank-you-message:")
    for test_name, result in thank_you_tests:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1
    
    print(f"\nüìä –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{len(all_tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Inline –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        print("‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª—é—á–µ–Ω–æ")
        print("üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω!")
        return True
    else:
        print(f"‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return False

def test_generated_code():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞
    """
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞...")
    print("=" * 50)
    
    bot_file = "bots/bot_1.py"
    with open(bot_file, 'r', encoding='utf-8') as f:
        bot_code = f.read()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    callback_handlers = len(re.findall(r'@dp\.callback_query\(lambda c: c\.data == "[^"]+"\)', bot_code))
    inline_buttons = len(re.findall(r'InlineKeyboardButton\(text="[^"]+", callback_data="[^"]+"\)', bot_code))
    command_handlers = len(re.findall(r'@dp\.message\(Command\("[^"]+"\)\)', bot_code))
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞:")
    print(f"   Callback handlers: {callback_handlers}")
    print(f"   Inline buttons: {inline_buttons}")
    print(f"   Command handlers: {command_handlers}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    key_functions = [
        "init_database",
        "save_user_to_db",
        "update_user_data_in_db",
        "handle_user_input",
        "handle_callback_collection_message",
        "handle_callback_thank_you_message"
    ]
    
    print(f"\nüîß –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    for func in key_functions:
        if f"async def {func}" in bot_code:
            print(f"‚úÖ {func}")
        else:
            print(f"‚ùå {func}")
    
    return True

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 70)
    
    success = test_modern_data_collection_template()
    test_generated_code()
    
    if success:
        print("\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù!")
        print("üì± Inline –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram")
        print("üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        print("üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("\nüéâ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    else:
        print("\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê!")
    
    return success

if __name__ == "__main__":
    main()