#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–µ–π inline –∫–Ω–æ–ø–∫–∏
"""

import requests
import json
import time

def create_real_user_scenario():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üé≠ –ò–ú–ò–¢–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–û–ì–û –°–¶–ï–ù–ê–†–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    print("1. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç...")
    project_data = {
        "name": "–ú–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç",
        "description": "–¢–µ—Å—Ç inline –∫–Ω–æ–ø–æ–∫",
        "data": {
            "nodes": [],
            "connections": []
        }
    }
    
    response = requests.post('http://localhost:5000/api/projects', json=project_data)
    if response.status_code != 201:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
        return
    
    project_id = response.json()['id']
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
    
    # –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    print("2. ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É...")
    bot_data = {
        "nodes": [
            {
                "id": "start-1",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ID
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –º–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç",
                    "keyboardType": "none",
                    "buttons": []
                }
            }
        ],
        "connections": []
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
    update_response = requests.put(f'http://localhost:5000/api/projects/{project_id}', 
                                  json={"data": bot_data})
    if update_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
        return
    
    print("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    # –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏
    print("3. ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â–∏...")
    help_node = {
        "id": "AbCdEf123456RandomId",  # –°–ª—É—á–∞–π–Ω—ã–π ID –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏
        "type": "command", 
        "position": {"x": 300, "y": 100},
        "data": {
            "command": "/help",
            "messageText": "–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å —Å–ª—É—á–∞–π–Ω—ã–º ID",
            "keyboardType": "none",
            "buttons": []
        }
    }
    
    bot_data["nodes"].append(help_node)
    
    update_response = requests.put(f'http://localhost:5000/api/projects/{project_id}', 
                                  json={"data": bot_data})
    if update_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
        return
    
    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    # –®–∞–≥ 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    print("4. üîÑ –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É - –¥–æ–±–∞–≤–ª—è–µ—Ç inline –∫–Ω–æ–ø–∫—É...")
    start_node = bot_data["nodes"][0]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
    start_node["data"]["keyboardType"] = "inline"
    start_node["data"]["buttons"] = [
        {
            "id": "btn-help-random",
            "text": "üìã –ü–æ–º–æ—â—å",
            "action": "goto",
            "target": "AbCdEf123456RandomId"  # –°—Å—ã–ª–∞–µ–º—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π ID
        }
    ]
    
    update_response = requests.put(f'http://localhost:5000/api/projects/{project_id}', 
                                  json={"data": bot_data})
    if update_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_response.status_code}")
        return
    
    print("‚úÖ Inline –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ")
    
    # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    print("5. üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –±–æ—Ç–∞...")
    export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
    if export_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
        return
    
    generated_code = export_response.json()['code']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    with open('real_scenario_generated.py', 'w', encoding='utf-8') as f:
        f.write(generated_code)
    
    print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: real_scenario_generated.py")
    
    # –®–∞–≥ 6: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    print("6. üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥...")
    analysis = analyze_inline_buttons(generated_code)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
    print(f"  - –ö–æ–º–∞–Ω–¥–∞ /start –Ω–∞–π–¥–µ–Ω–∞: {'‚úÖ' if analysis['start_command'] else '‚ùå'}")
    print(f"  - –ö–æ–º–∞–Ω–¥–∞ /help –Ω–∞–π–¥–µ–Ω–∞: {'‚úÖ' if analysis['help_command'] else '‚ùå'}")
    print(f"  - Inline –∫–Ω–æ–ø–∫–∏ –≤ /start: {'‚úÖ' if analysis['start_has_inline'] else '‚ùå'}")
    print(f"  - Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω: {'‚úÖ' if analysis['callback_handler'] else '‚ùå'}")
    print(f"  - Callback_data –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {'‚úÖ' if analysis['correct_callback_data'] else '‚ùå'}")
    print(f"  - –°–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: {'‚úÖ' if analysis['syntax_valid'] else '‚ùå'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    if 'callback_data="AbCdEf123456RandomId"' in generated_code:
        print("‚úÖ Inline –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data")
    else:
        print("‚ùå Inline –∫–Ω–æ–ø–∫–∞ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data")
        # –ò—â–µ–º, —á—Ç–æ –∂–µ —Ç–∞–º –µ—Å—Ç—å
        lines = [line.strip() for line in generated_code.split('\n') if 'callback_data=' in line]
        for line in lines:
            print(f"  –ù–∞–π–¥–µ–Ω–æ: {line}")
    
    if 'lambda c: c.data == "AbCdEf123456RandomId"' in generated_code:
        print("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data")
    else:
        print("‚ùå Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—à–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data")
        # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        lines = [line.strip() for line in generated_code.split('\n') if '@dp.callback_query' in line]
        for line in lines:
            print(f"  –ù–∞–π–¥–µ–Ω–æ: {line}")
    
    if analysis['syntax_valid']:
        print("‚úÖ –ö–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
    else:
        print("‚ùå –í –∫–æ–¥–µ –µ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
    
    return analysis

def analyze_inline_buttons(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    return {
        'start_command': '@dp.message(CommandStart())' in code,
        'help_command': '@dp.message(Command("help"))' in code,
        'start_has_inline': 'InlineKeyboardBuilder()' in code and '/start' in code,
        'callback_handler': '@dp.callback_query' in code,
        'correct_callback_data': 'callback_data="AbCdEf123456RandomId"' in code,
        'syntax_valid': check_syntax(code)
    }

def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python"""
    try:
        compile(code, '<string>', 'exec')
        return True
    except SyntaxError as e:
        print(f"  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    result = create_real_user_scenario()
    
    if result:
        issues = [k for k, v in result.items() if not v]
        if not issues:
            print(f"\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("Inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ ID")
        else:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
            for issue in issues:
                print(f"  - {issue}")

if __name__ == "__main__":
    main()