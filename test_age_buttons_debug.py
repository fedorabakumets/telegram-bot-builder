#!/usr/bin/env python3
"""
Debug test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã age-buttons –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º —à–∞–±–ª–æ–Ω–µ
"""
import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "YOUR_BOT_TOKEN"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message(Command("start"))
async def start_handler(message: Message):
    """–ù–∞—á–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    user_id = message.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–±–æ—Ä—É –∏–º–µ–Ω–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ù–∞—á–∞—Ç—å —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="name-input"))
    keyboard = builder.as_markup()
    
    text = "üéØ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö**\n\n<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤.\n\n–ù–∞—á–Ω–µ–º?"
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

@dp.callback_query(F.data == "name-input")
async def handle_name_input(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –∏–º–µ–Ω–∏"""
    user_id = callback_query.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
    
    await callback_query.answer()
    await callback_query.message.delete()
    
    text = "üë§ **–®–∞–≥ 1: –í–∞—à–µ –∏–º—è**\n\n<b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    await bot.send_message(user_id, text, parse_mode=ParseMode.HTML)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
    user_data[user_id]["waiting_for_input"] = {
        "type": "text",
        "variable": "user_name",
        "next_node_id": "age-buttons"
    }

@dp.callback_query(F.data == "age-buttons")
async def handle_age_buttons(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = callback_query.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É –≤–æ–∑—Ä–∞—Å—Ç–∞")
    
    await callback_query.answer()
    await callback_query.message.delete()
    
    text = "üéÇ **–®–∞–≥ 2: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞**\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É:</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="18-25 –ª–µ—Ç", callback_data="response_age-buttons_0"))
    builder.add(InlineKeyboardButton(text="26-35 –ª–µ—Ç", callback_data="response_age-buttons_1"))
    builder.add(InlineKeyboardButton(text="36-45 –ª–µ—Ç", callback_data="response_age-buttons_2"))
    builder.add(InlineKeyboardButton(text="46-55 –ª–µ—Ç", callback_data="response_age-buttons_3"))
    builder.add(InlineKeyboardButton(text="55+ –ª–µ—Ç", callback_data="response_age-buttons_4"))
    keyboard = builder.as_markup()
    
    await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    user_data[user_id]["button_response_config"] = {
        "node_id": "age-buttons",
        "variable": "user_age_group",
        "save_to_database": True,
        "success_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!",
        "allow_multiple": False,
        "next_node_id": "interests-multiple",
        "options": [
            {"index": 0, "text": "18-25 –ª–µ—Ç", "value": "18-25"},
            {"index": 1, "text": "26-35 –ª–µ—Ç", "value": "26-35"},
            {"index": 2, "text": "36-45 –ª–µ—Ç", "value": "36-45"},
            {"index": 3, "text": "46-55 –ª–µ—Ç", "value": "46-55"},
            {"index": 4, "text": "55+ –ª–µ—Ç", "value": "55+"},
        ],
        "selected": []
    }
    
    print(f"[DEBUG] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ button_response_config —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

@dp.callback_query(F.data == "response_age-buttons_0")
async def handle_response_age_buttons_0(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞: 18-25 –ª–µ—Ç"""
    user_id = callback_query.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç 18-25 –ª–µ—Ç")
    
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        print(f"[ERROR] –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ button_response_config –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    config = user_data[user_id]["button_response_config"]
    option = config["options"][0]  # –ü–µ—Ä–≤–∞—è –æ–ø—Ü–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    user_data[user_id][config["variable"]] = option["value"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_text = f"‚úÖ {config['success_message']}\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {option['text']}"
    await callback_query.message.edit_text(success_text, parse_mode=ParseMode.HTML)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await asyncio.sleep(1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    next_text = "üéØ **–®–∞–≥ 3: –ò–Ω—Ç–µ—Ä–µ—Å—ã**\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã", callback_data="interest_games"))
    builder.add(InlineKeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞", callback_data="interest_music"))
    builder.add(InlineKeyboardButton(text="üìö –ß—Ç–µ–Ω–∏–µ", callback_data="interest_reading"))
    builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_survey"))
    keyboard = builder.as_markup()
    
    await bot.send_message(user_id, next_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")

@dp.callback_query(F.data == "response_age-buttons_1")
async def handle_response_age_buttons_1(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞: 26-35 –ª–µ—Ç"""
    user_id = callback_query.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç 26-35 –ª–µ—Ç")
    
    await callback_query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if user_id not in user_data or "button_response_config" not in user_data[user_id]:
        print(f"[ERROR] –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ button_response_config –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    config = user_data[user_id]["button_response_config"]
    option = config["options"][1]  # –í—Ç–æ—Ä–∞—è –æ–ø—Ü–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    user_data[user_id][config["variable"]] = option["value"]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_text = f"‚úÖ {config['success_message']}\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {option['text']}"
    await callback_query.message.edit_text(success_text, parse_mode=ParseMode.HTML)
    
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª –≤–æ–∑—Ä–∞—Å—Ç")

@dp.callback_query(F.data == "finish_survey")
async def handle_finish_survey(callback_query: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞"""
    user_id = callback_query.from_user.id
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å")
    
    await callback_query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    name = user_data[user_id].get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    age = user_data[user_id].get("user_age_group", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    result_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞**\n\n<b>–ò–º—è:</b> {name}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
    await callback_query.message.edit_text(result_text, parse_mode=ParseMode.HTML)
    
    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –∏–º—è={name}, –≤–æ–∑—Ä–∞—Å—Ç={age}")

@dp.message()
async def handle_user_input(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data or "waiting_for_input" not in user_data[user_id]:
        await message.answer("‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    input_config = user_data[user_id]["waiting_for_input"]
    user_text = message.text
    
    print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª: {user_text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_data[user_id][input_config["variable"]] = user_text
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    del user_data[user_id]["waiting_for_input"]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    if input_config["next_node_id"] == "age-buttons":
        # –≠–º—É–ª–∏—Ä—É–µ–º callback –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ age-buttons
        callback_query = type('CallbackQuery', (), {
            'from_user': message.from_user,
            'message': message,
            'answer': lambda: None,
            'data': 'age-buttons'
        })()
        
        await handle_age_buttons(callback_query)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è age-buttons...")
    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
    print("python test_age_buttons_debug.py")
    print("\n–õ–æ–≥–∏ –ø–æ–∫–∞–∂—É—Ç –∫–∞–∂–¥—ã–π —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
    print("1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç /start")
    print("2. –í–≤–æ–¥–∏—Ç –∏–º—è")
    print("3. –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ age-buttons")
    print("4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É")
    print("5. –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É")
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º
    if BOT_TOKEN == "YOUR_BOT_TOKEN":
        print("\n‚ùå –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞")
        return
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())