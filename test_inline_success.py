#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã inline –∫–Ω–æ–ø–æ–∫
"""

import os
import subprocess
import json
from pathlib import Path

def test_bot_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    print("üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ INLINE –ö–ù–û–ü–û–ö")
    print("=" * 50)
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API...")
    try:
        result = subprocess.run([
            'curl', '-s', '-X', 'POST', 
            'http://localhost:5000/api/projects/907/export',
            '-H', 'Content-Type: application/json'
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            data = json.loads(result.stdout)
            code = data['code']
            print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            checks = [
                ("Inline –∫–Ω–æ–ø–∫–∏", 'InlineKeyboardBuilder()' in code),
                ("–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ callback_data", 'callback_data=""' not in code),
                ("Python boolean values", 'resize_keyboard=True' in code or 'resize_keyboard=False' in code),
                ("–ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –æ—à–∏–±–æ–∫", 'Command("' in code and 'Command(")' not in code),
                ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback", '@dp.callback_query' in code),
            ]
            
            print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:")
            all_good = True
            for check_name, check_result in checks:
                status = "‚úÖ" if check_result else "‚ùå"
                print(f"   {status} {check_name}")
                if not check_result:
                    all_good = False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python...")
            try:
                compile(code, '<string>', 'exec')
                print("‚úÖ –ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            except SyntaxError as e:
                print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                all_good = False
            
            return all_good
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = test_bot_functionality()
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print("=" * 50)
    
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print()
        print("‚úÖ Inline –∫–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ü—É—Å—Ç—ã–µ callback_data –∏—Å–∫–ª—é—á–µ–Ω—ã")
        print("‚úÖ Boolean –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç Python True/False")
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –±–µ–∑ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print()
        print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ—Ç–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏")
        
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    return success

if __name__ == "__main__":
    main()