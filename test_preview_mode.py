#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–≤—å—é –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""
import requests
import json
from datetime import datetime

def test_preview_mode():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–µ–≤—å—é —à–∞–±–ª–æ–Ω–∞"""
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
    response = requests.get('http://localhost:5000/api/templates')
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
        return
        
    templates = response.json()
    complex_template = None
    
    for template in templates:
        if template.get('name') == 'üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö':
            complex_template = template
            break
    
    if not complex_template:
        print("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω: {complex_template['name']}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å —à–∞–±–ª–æ–Ω–æ–º
    project_data = {
        "name": f"–ü—Ä–µ–≤—å—é —Ç–µ—Å—Ç - {datetime.now().strftime('%H:%M:%S')}",
        "description": "–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–≤—å—é",
        "data": complex_template['data']
    }
    
    create_response = requests.post('http://localhost:5000/api/projects', json=project_data)
    if create_response.status_code != 201:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
        return
        
    project = create_response.json()
    project_id = project['id']
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∑–ª–æ–≤ –≤ –ø—Ä–µ–≤—å—é
    nodes = complex_template['data']['nodes']
    print(f"\nüéØ –¢–ï–°–¢ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –£–ó–õ–û–í ({len(nodes)} —É–∑–ª–æ–≤):")
    
    for i, node in enumerate(nodes, 1):
        node_type = node.get('type', 'unknown')
        node_id = node.get('id', 'unknown')
        
        print(f"\n{i}. –£–∑–µ–ª: {node_id} (—Ç–∏–ø: {node_type})")
        
        if node_type == 'start':
            test_start_node(node)
        elif node_type == 'user-input':
            test_user_input_node(node)
        elif node_type == 'message':
            test_message_node(node)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
    connections = complex_template['data']['connections']
    print(f"\nüîó –¢–ï–°–¢ –ü–ï–†–ï–•–û–î–û–í ({len(connections)} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π):")
    
    for i, connection in enumerate(connections, 1):
        source = connection.get('source', 'unknown')
        target = connection.get('target', 'unknown')
        print(f"{i}. {source} ‚Üí {target}")
    
    print(f"\n‚úÖ –ü—Ä–µ–≤—å—é —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

def test_start_node(node):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª"""
    data = node.get('data', {})
    message = data.get('messageText', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    keyboard_type = data.get('keyboardType', 'none')
    buttons = data.get('buttons', [])
    
    print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
    print(f"   ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_type}")
    print(f"   üîò –ö–Ω–æ–ø–∫–∏: {len(buttons)}")
    
    for btn in buttons:
        print(f"      ‚Ä¢ {btn.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} ‚Üí {btn.get('target', '–ù–µ—Ç —Ü–µ–ª–∏')}")

def test_user_input_node(node):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–∑–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    data = node.get('data', {})
    response_type = data.get('responseType', 'text')
    input_variable = data.get('inputVariable', 'unknown')
    is_required = data.get('isRequired', False)
    save_to_db = data.get('saveToDatabase', False)
    
    print(f"   üìù –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {response_type}")
    print(f"   üî§ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {input_variable}")
    print(f"   ‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π: {is_required}")
    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î: {save_to_db}")
    
    if response_type == 'buttons':
        options = data.get('responseOptions', [])
        print(f"   üîò –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {len(options)}")
        for opt in options:
            print(f"      ‚Ä¢ {opt.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')} = {opt.get('value', '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è')}")
    
    if response_type == 'text':
        min_length = data.get('minLength', 0)
        max_length = data.get('maxLength', 0)
        print(f"   üìè –î–ª–∏–Ω–∞: {min_length}-{max_length} —Å–∏–º–≤–æ–ª–æ–≤")

def test_message_node(node):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–π —É–∑–µ–ª —Å–æ–æ–±—â–µ–Ω–∏—è"""
    data = node.get('data', {})
    message = data.get('messageText', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    keyboard_type = data.get('keyboardType', 'none')
    buttons = data.get('buttons', [])
    
    print(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message[:50]}...")
    print(f"   ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_type}")
    print(f"   üîò –ö–Ω–æ–ø–∫–∏: {len(buttons)}")

if __name__ == "__main__":
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ñ–ò–ú–ê –ü–†–ï–í–¨–Æ")
    print("=" * 50)
    test_preview_mode()
    print("=" * 50)