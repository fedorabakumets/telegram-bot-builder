"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_fixed_callback_generator():
    """–¢–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
    from client.src.lib.bot_generator import generatePythonCode
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å start —É–∑–ª–æ–º –∏ –¥–≤—É–º—è message —É–∑–ª–∞–º–∏
    bot_data = {
        "nodes": [
            {
                "id": "start-node-1",
                "type": "start",
                "data": {
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-1",
                            "text": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                            "action": "goto",
                            "target": "info-node-2"
                        },
                        {
                            "id": "btn-2", 
                            "text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                            "action": "goto",
                            "target": "settings-node-3"
                        }
                    ]
                }
            },
            {
                "id": "info-node-2",
                "type": "message",
                "data": {
                    "messageText": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-1",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-node-1"
                        }
                    ]
                }
            },
            {
                "id": "settings-node-3",
                "type": "message", 
                "data": {
                    "messageText": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-2",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-node-1"
                        }
                    ]
                }
            }
        ],
        "connections": []
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    generated_code = generatePythonCode(bot_data, "–¢–µ—Å—Ç–æ–≤—ã–π –ë–æ—Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open("test_fixed_bot.py", "w", encoding="utf-8") as f:
        f.write(generated_code)
    
    print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_fixed_bot.py")
    print("\n–ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    checks = [
        ('callback_data="info-node-2"', "–ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞ –∫–∞–∫ callback_data"),
        ('callback_data="settings-node-3"', "–ö–Ω–æ–ø–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞ –∫–∞–∫ callback_data"),
        ('callback_data="start-node-1"', "–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞ –∫–∞–∫ callback_data"),
        ('c.data == "info-node-2"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data"),
        ('c.data == "settings-node-3"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data"),
        ('c.data == "start-node-1"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data"),
        ('await callback_query.answer()', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback")
    ]
    
    for check, description in checks:
        if check in generated_code:
            print(f"‚úÖ {description}")
        else:
            print(f"‚ùå {description}")
    
    return generated_code

if __name__ == "__main__":
    test_fixed_callback_generator()