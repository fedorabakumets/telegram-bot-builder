"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞
–†–µ–∂–∏–º: –ê–¥–¥–∏—Ç–∏–≤–Ω—ã–π (–≥–∞–ª–æ—á–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
"""

import os
import sys
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup
import asyncpg
import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token="YOUR_BOT_TOKEN", default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∞)
async def init_database():
    pass

async def update_user_data_in_db(user_id: int, variable: str, data):
    return True

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(lambda message: message.text and message.text.lower() == "/start")
async def start_handler(message: types.Message):
    text = """üéØ –¢–µ—Å—Ç –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞

–≠—Ç–æ —Ç–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏, –≥–¥–µ –≥–∞–ª–æ—á–∫–∞ "–°–±–æ—Ä –æ—Ç–≤–µ—Ç–∞" –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –∞ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìä –ú–µ–Ω—é", callback_data="menu"))
    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"))
    
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["input_collection_enabled"] = True
    user_data[message.from_user.id]["input_node_id"] = "start-1"
    user_data[message.from_user.id]["input_variable"] = "start_response"

@dp.callback_query(F.data == "menu")
async def handle_callback_menu(callback_query: types.CallbackQuery):
    text = """üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ —Å–≤–æ—ë - —è —Å–æ—Ö—Ä–∞–Ω—é –≤–∞—à –æ—Ç–≤–µ—Ç!"""
    
    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéÆ –ò–≥—Ä—ã"))
    builder.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    builder.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è"))
    
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.delete()
    except:
        pass
        
    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})
    user_data[callback_query.from_user.id]["input_collection_enabled"] = True
    user_data[callback_query.from_user.id]["input_node_id"] = "menu-1"
    user_data[callback_query.from_user.id]["input_variable"] = "menu_response"

@dp.callback_query(F.data == "info")
async def handle_callback_info(callback_query: types.CallbackQuery):
    text = """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    
–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É:
‚úÖ –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
‚úÖ –ì–∞–ª–æ—á–∫–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–±–æ—Ä –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
‚úÖ –ù–∏–∫–∞–∫–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!"""

    await callback_query.message.edit_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ reply –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üéÆ –ò–≥—Ä—ã")
async def handle_reply_games(message: types.Message):
    text = """üéÆ –ò–≥—Ä—ã
    
–†–∞–∑–¥–µ–ª —Å –∏–≥—Ä–∞–º–∏. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å - —ç—Ç–æ —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è!"""
    
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üéØ –ö–≤–∏–∑"))
    builder.add(KeyboardButton(text="üé≤ –ö—É–±–∏–∫–∏"))
    builder.add(KeyboardButton(text="üîô –ù–∞–∑–∞–¥"))
    
    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)
    await message.answer(text, reply_markup=keyboard)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["input_collection_enabled"] = True
    user_data[message.from_user.id]["input_node_id"] = "games-1"
    user_data[message.from_user.id]["input_variable"] = "games_response"

@dp.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def handle_reply_settings(message: types.Message):
    text = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    
–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –õ—é–±–æ–π –≤–∞—à —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"""
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())

@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–∞—è")
async def handle_reply_home(message: types.Message):
    text = """üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    
–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É..."""
    
    await message.answer(text, reply_markup=ReplyKeyboardRemove())
    await start_handler(message)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(F.text)
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):
        input_node_id = user_data[user_id].get("input_node_id")
        input_variable = user_data[user_id].get("input_variable", "button_response")
        user_text = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        timestamp = datetime.datetime.now().isoformat()
        
        response_data = {
            "value": user_text,
            "type": "text_addition", 
            "timestamp": timestamp,
            "nodeId": input_node_id,
            "variable": input_variable,
            "source": "additional_text_input"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id][f"{input_variable}_additional"] = response_data
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        logging.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: {input_variable}_additional = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return

async def main():
    logging.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())