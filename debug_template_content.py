#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞
"""

import json
import requests

def debug_template_content():
    """–û—Ç–ª–∞–¥–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –®–ê–ë–õ–û–ù–ê")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        response = requests.get('http://localhost:5000/api/templates')
        if response.status_code == 200:
            templates = response.json()
            
            # –ò—â–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
            political_template = None
            for template in templates:
                name = template.get('name', '').lower()
                if "–ø–æ–ª–∏—Ç–∏–∫–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π" in name or "–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π" in name:
                    political_template = template
                    break
            
            if political_template:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {political_template.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∑–ª—ã
                nodes = political_template.get('data', {}).get('nodes', [])
                
                print(f"\nüìä –í—Å–µ–≥–æ —É–∑–ª–æ–≤: {len(nodes)}")
                
                for node in nodes:
                    node_data = node.get('data', {})
                    message_text = node_data.get('messageText', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º start-poll —É–∑–µ–ª
                    if node.get('id') == 'start-poll':
                        print(f"\nüéØ –£–ó–ï–õ start-poll:")
                        print(f"  –¢–∏–ø: {node.get('type', 'unknown')}")
                        print(f"  Markdown –ø–æ–ª–µ: {node_data.get('markdown', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        print(f"  FormatMode –ø–æ–ª–µ: {node_data.get('formatMode', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML —Ç–µ–≥–æ–≤
                        has_html = '<b>' in message_text or '<i>' in message_text or '<u>' in message_text
                        has_markdown = '**' in message_text or '*' in message_text
                        
                        print(f"  –ï—Å—Ç—å HTML —Ç–µ–≥–∏: {has_html}")
                        print(f"  –ï—Å—Ç—å Markdown: {has_markdown}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞
                        print(f"  –¢–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
                        print(f"    {repr(message_text[:200])}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ readable —Ñ–æ—Ä–º–∞—Ç–µ
                        print(f"\n  –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                        print(f"    {message_text}")
                        
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∑–ª—ã —Å HTML —Ç–µ–≥–∞–º–∏
                print(f"\nüîç –ü–û–ò–°–ö HTML –¢–ï–ì–û–í –í–û –í–°–ï–• –£–ó–õ–ê–•:")
                html_nodes = []
                for node in nodes:
                    node_data = node.get('data', {})
                    message_text = node_data.get('messageText', '')
                    
                    if '<b>' in message_text or '<i>' in message_text or '<u>' in message_text:
                        html_nodes.append({
                            'id': node.get('id'),
                            'type': node.get('type'),
                            'text': message_text[:100] + '...' if len(message_text) > 100 else message_text
                        })
                
                if html_nodes:
                    print(f"  –ù–∞–π–¥–µ–Ω–æ {len(html_nodes)} —É–∑–ª–æ–≤ —Å HTML —Ç–µ–≥–∞–º–∏:")
                    for node in html_nodes:
                        print(f"    - {node['id']} ({node['type']}): {node['text']}")
                else:
                    print(f"  HTML —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∑–ª–∞—Ö")
                    
            else:
                print("‚ùå –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    debug_template_content()