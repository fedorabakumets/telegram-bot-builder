"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests

def create_comprehensive_formatting_test():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    bot_data = {
        "nodes": [
            # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª —Å markdown
            {
                "id": "start-1",
                "type": "start", 
                "data": {
                    "command": "/start",
                    "messageText": "ü§ñ **–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç:\n‚Ä¢ **Markdown** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n‚Ä¢ *HTML* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ  \n‚Ä¢ `–û–±—ã—á–Ω—ã–π` —Ç–µ–∫—Å—Ç\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:",
                    "formatMode": "markdown",
                    "keyboardType": "inline",
                    "buttons": [
                        {"id": "btn1", "text": "üìù Markdown —Ç–µ—Å—Ç", "action": "goto", "target": "markdown-node"},
                        {"id": "btn2", "text": "üåê HTML —Ç–µ—Å—Ç", "action": "goto", "target": "html-node"},
                        {"id": "btn3", "text": "üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "action": "goto", "target": "plain-node"}
                    ]
                }
            },
            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å HTML
            {
                "id": "help-1",
                "type": "command",
                "data": {
                    "command": "/help",
                    "messageText": "<b>üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n<i>HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!</i>\n\n<code>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</code>\n‚Ä¢ <b>/start</b> - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n‚Ä¢ <b>/help</b> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n<u>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</u>\n‚Ä¢ <s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> —Ç–µ–∫—Å—Ç\n‚Ä¢ <pre>–ë–ª–æ–∫ –∫–æ–¥–∞</pre>\n\n<a href=\"https://telegram.org\">–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram</a>",
                    "formatMode": "html", 
                    "keyboardType": "inline",
                    "buttons": [
                        {"id": "btn4", "text": "üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", "action": "goto", "target": "start-1"}
                    ]
                }
            },
            # –£–∑–µ–ª —Å markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            {
                "id": "markdown-node",
                "type": "message",
                "data": {
                    "messageText": "üìù **–¢–µ—Å—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** —Ä–∞–±–æ—Ç–∞–µ—Ç\n*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç* —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n`–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥` –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__ –≤–∏–¥–µ–Ω\n~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~~ —Ç–æ–∂–µ\n\n```python\n# –ë–ª–æ–∫ –∫–æ–¥–∞\ndef hello():\n    print(\"Hello World!\")\n```\n\n> –¶–∏—Ç–∞—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ\n\n# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫\n\n[–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç](https://example.com)",
                    "formatMode": "markdown",
                    "keyboardType": "inline", 
                    "buttons": [
                        {"id": "btn5", "text": "üåê –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ HTML", "action": "goto", "target": "html-node"},
                        {"id": "btn6", "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "goto", "target": "start-1"}
                    ]
                }
            },
            # –£–∑–µ–ª —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            {
                "id": "html-node",
                "type": "message",
                "data": {
                    "messageText": "üåê <b>–¢–µ—Å—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –≤ HTML\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i> –≤ HTML\n<code>–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ–¥</code> –≤ HTML\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u> –≤ HTML\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s> –≤ HTML\n\n<pre>–ë–ª–æ–∫ –∫–æ–¥–∞ –≤ HTML\n—Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏</pre>\n\n<a href=\"https://telegram.org\">–°—Å—ã–ª–∫–∞ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ</a>\n\n–í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
                    "formatMode": "html",
                    "keyboardType": "inline",
                    "buttons": [
                        {"id": "btn7", "text": "üìù –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ Markdown", "action": "goto", "target": "markdown-node"},
                        {"id": "btn8", "text": "üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "action": "goto", "target": "plain-node"},
                        {"id": "btn9", "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "goto", "target": "start-1"}
                    ]
                }
            },
            # –£–∑–µ–ª –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            {
                "id": "plain-node",
                "type": "message", 
                "data": {
                    "messageText": "üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n**–≠—Ç–æ –ù–ï –±—É–¥–µ—Ç –∂–∏—Ä–Ω—ã–º**\n*–≠—Ç–æ –ù–ï –±—É–¥–µ—Ç –∫—É—Ä—Å–∏–≤–æ–º*\n<b>–≠—Ç–æ –ù–ï –±—É–¥–µ—Ç –∂–∏—Ä–Ω—ã–º –≤ HTML</b>\n<i>–≠—Ç–æ –ù–ï –±—É–¥–µ—Ç –∫—É—Ä—Å–∏–≤–æ–º –≤ HTML</i>\n\n–í–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ markdown –∏–ª–∏ HTML —Ç–µ–≥–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                    "formatMode": "none",
                    "keyboardType": "inline",
                    "buttons": [
                        {"id": "btn10", "text": "üìù Markdown", "action": "goto", "target": "markdown-node"},
                        {"id": "btn11", "text": "üåê HTML", "action": "goto", "target": "html-node"},
                        {"id": "btn12", "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "goto", "target": "start-1"}
                    ]
                }
            },
            # –£–∑–µ–ª —Å reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ markdown
            {
                "id": "reply-markdown-node",
                "type": "message",
                "data": {
                    "messageText": "üéπ **Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Markdown**\n\n–≠—Ç–æ—Ç —É–∑–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:\n‚Ä¢ **Reply** –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n‚Ä¢ *Markdown* —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–¢–µ–∫—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è, –∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.",
                    "formatMode": "markdown",
                    "keyboardType": "reply",
                    "resizeKeyboard": True,
                    "oneTimeKeyboard": False,
                    "buttons": [
                        {"id": "btn13", "text": "üìù –¢–µ—Å—Ç Markdown", "action": "goto", "target": "markdown-node"},
                        {"id": "btn14", "text": "üåê –¢–µ—Å—Ç HTML", "action": "goto", "target": "html-node"},
                        {"id": "btn15", "text": "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "goto", "target": "start-1"}
                    ]
                }
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "markdown-node"},
            {"id": "conn2", "from": "start-1", "to": "html-node"},
            {"id": "conn3", "from": "start-1", "to": "plain-node"},
            {"id": "conn4", "from": "help-1", "to": "start-1"},
            {"id": "conn5", "from": "markdown-node", "to": "html-node"},
            {"id": "conn6", "from": "markdown-node", "to": "start-1"},
            {"id": "conn7", "from": "html-node", "to": "markdown-node"},
            {"id": "conn8", "from": "html-node", "to": "plain-node"}, 
            {"id": "conn9", "from": "html-node", "to": "start-1"},
            {"id": "conn10", "from": "plain-node", "to": "markdown-node"},
            {"id": "conn11", "from": "plain-node", "to": "html-node"},
            {"id": "conn12", "from": "plain-node", "to": "start-1"}
        ]
    }
    
    return bot_data

def test_comprehensive_formatting():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢: –í—Å–µ –≤–∏–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 70)
    
    bot_data = create_comprehensive_formatting_test()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        project_data = {
            "name": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "description": "–¢–µ—Å—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: Markdown, HTML, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "data": bot_data
        }
        
        create_response = requests.post('http://localhost:5000/api/projects', json=project_data)
        if create_response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            return
            
        project_id = create_response.json()['id']
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        if export_response.status_code == 200:
            generated_code = export_response.json()['code']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open('comprehensive_formatting_test_RESULT.py', 'w', encoding='utf-8') as f:
                f.write(generated_code)
            
            print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'comprehensive_formatting_test_RESULT.py'")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            markdown_count = generated_code.count('parse_mode=ParseMode.MARKDOWN')
            html_count = generated_code.count('parse_mode=ParseMode.HTML')
            total_message_count = generated_code.count('await message.answer(')
            total_edit_count = generated_code.count('await callback_query.message.edit_text(')
            total_send_count = generated_code.count('await bot.send_message(')
            
            print(f"üìù Markdown parse_mode: {markdown_count} —Ä–∞–∑")
            print(f"üåê HTML parse_mode: {html_count} —Ä–∞–∑")
            print(f"üì® –í—Å–µ–≥–æ message.answer: {total_message_count} —Ä–∞–∑")
            print(f"‚úèÔ∏è –í—Å–µ–≥–æ edit_text: {total_edit_count} —Ä–∞–∑")
            print(f"üì§ –í—Å–µ–≥–æ send_message: {total_send_count} —Ä–∞–∑")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
            nodes_with_formatting = 6  # –£ –Ω–∞—Å 6 —É–∑–ª–æ–≤ —Å —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            total_formatting_found = markdown_count + html_count
            
            print(f"\nüìà –ü–û–ö–†–´–¢–ò–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"–£–∑–ª–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {nodes_with_formatting}")
            print(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_formatting_found}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–∑–ª—ã
            checks = {
                "START –∫–æ–º–∞–Ω–¥–∞ —Å Markdown": 'parse_mode=ParseMode.MARKDOWN' in generated_code and '@dp.message(CommandStart())' in generated_code,
                "HELP –∫–æ–º–∞–Ω–¥–∞ —Å HTML": 'parse_mode=ParseMode.HTML' in generated_code and '@dp.message(Command("help"))' in generated_code,
                "Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏": '@dp.callback_query(' in generated_code,
                "Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã": 'ReplyKeyboardBuilder()' in generated_code,
                "Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã": 'InlineKeyboardBuilder()' in generated_code,
                "–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è": total_message_count > (markdown_count + html_count)
            }
            
            print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
            for check_name, result in checks.items():
                status = "‚úÖ" if result else "‚ùå"
                print(f"{status} {check_name}: {'–†–∞–±–æ—Ç–∞–µ—Ç' if result else '–ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            all_checks_passed = all(checks.values())
            formatting_ok = markdown_count >= 2 and html_count >= 1
            
            print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
            if all_checks_passed and formatting_ok:
                print("üü¢ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
                print("   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤–æ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö")
                return True
            else:
                print("üî¥ –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
                if not formatting_ok:
                    print(f"   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: Markdown={markdown_count}, HTML={html_count}")
                if not all_checks_passed:
                    print("   –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_comprehensive_formatting()