#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import requests
import sys

def create_comprehensive_formatting_test():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "üéØ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!**\n\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-markdown",
                            "text": "üìù Markdown",
                            "action": "goto",
                            "target": "markdown-node"
                        },
                        {
                            "id": "btn-html",
                            "text": "üåê HTML",
                            "action": "goto",
                            "target": "html-node"
                        },
                        {
                            "id": "btn-plain",
                            "text": "üìÑ –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            "action": "goto",
                            "target": "plain-node"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "markdown-node",
                "type": "message",
                "data": {
                    "messageText": "üìù **MARKDOWN –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:**\n\n**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**\n*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç*\n__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__\n`–ö–æ–¥`\n\n~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~~\n\n‚Ä¢ –°–ø–∏—Å–æ–∫\n‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤\n\n[–°—Å—ã–ª–∫–∞](https://example.com)",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-back-md",
                            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 400, "y": 50}
            },
            {
                "id": "html-node",
                "type": "message",
                "data": {
                    "messageText": "üåê <b>HTML –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:</b>\n\n<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç</i>\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</u>\n<code>–ö–æ–¥</code>\n\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç</s>\n\n‚Ä¢ –°–ø–∏—Å–æ–∫\n‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç–æ–≤\n\n<a href=\"https://example.com\">–°—Å—ã–ª–∫–∞</a>",
                    "keyboardType": "inline",
                    "formatMode": "html",
                    "buttons": [
                        {
                            "id": "btn-back-html",
                            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 400, "y": 150}
            },
            {
                "id": "plain-node",
                "type": "message",
                "data": {
                    "messageText": "üìÑ –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢:\n\n–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n–ó–¥–µ—Å—å –Ω–µ—Ç –∂–∏—Ä–Ω–æ–≥–æ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n–ü—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                    "keyboardType": "inline",
                    "formatMode": "none",
                    "buttons": [
                        {
                            "id": "btn-back-plain",
                            "text": "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 400, "y": 250}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "markdown-node"},
            {"id": "conn2", "from": "start-1", "to": "html-node"},
            {"id": "conn3", "from": "start-1", "to": "plain-node"},
            {"id": "conn4", "from": "markdown-node", "to": "start-1"},
            {"id": "conn5", "from": "html-node", "to": "start-1"},
            {"id": "conn6", "from": "plain-node", "to": "start-1"}
        ]
    }
    
    return bot_data

def test_comprehensive_formatting():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    bot_data = create_comprehensive_formatting_test()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                filename = 'comprehensive_formatting_test_RESULT.py'
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print(f"‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{filename}'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
                analyze_formatting_code(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def analyze_formatting_code(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
    print("-" * 40)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º parse_mode
    markdown_count = code.count('parse_mode=ParseMode.MARKDOWN')
    html_count = code.count('parse_mode=ParseMode.HTML')
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ parse_mode=ParseMode.MARKDOWN: {markdown_count}")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ parse_mode=ParseMode.HTML: {html_count}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º start_handler
    lines = code.split('\n')
    in_start_handler = False
    start_handler_lines = []
    
    for line in lines:
        if 'async def start_handler' in line:
            in_start_handler = True
            start_handler_lines.append(line)
        elif in_start_handler and line.startswith('async def '):
            break
        elif in_start_handler:
            start_handler_lines.append(line)
    
    print(f"\nüìù START HANDLER ({len(start_handler_lines)} —Å—Ç—Ä–æ–∫):")
    for i, line in enumerate(start_handler_lines[-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫
        print(f"  {i+1}: {line}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    callback_handlers = []
    for line in lines:
        if 'async def handle_callback_' in line:
            callback_handlers.append(line.strip())
    
    print(f"\nüîó CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ({len(callback_handlers)}):")
    for handler in callback_handlers:
        print(f"  ‚Ä¢ {handler}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    has_mixed_formatting = False
    for line in lines:
        if 'parse_mode=ParseMode.MARKDOWN' in line:
            # –ò—â–µ–º HTML —Ç–µ–≥–∏ –≤ –æ–∫—Ä—É–∂–∞—é—â–µ–º —Ç–µ–∫—Å—Ç–µ
            line_index = lines.index(line)
            for i in range(max(0, line_index-10), min(len(lines), line_index+10)):
                if '<b>' in lines[i] or '<i>' in lines[i]:
                    has_mixed_formatting = True
                    break
    
    if has_mixed_formatting:
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω–æ —Å–º–µ—à–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!")
        print("    HTML —Ç–µ–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å Markdown parse_mode")
    else:
        print("\n‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º")

if __name__ == "__main__":
    test_comprehensive_formatting()