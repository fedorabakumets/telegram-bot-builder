{"code":"\"\"\"\nМой первый бот - Telegram Bot\nСгенерировано с помощью TelegramBot Builder\n\nКоманды для @BotFather:\nstart - Запустить бота\"\"\"\n\nimport asyncio\nimport logging\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.filters import CommandStart, Command\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove\nfrom aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\nfrom aiogram.enums import ParseMode\n\n# Токен вашего бота (получите у @BotFather)\nBOT_TOKEN = \"YOUR_BOT_TOKEN_HERE\"\n\n# Настройка логирования\nlogging.basicConfig(level=logging.INFO)\n\n# Создание бота и диспетчера\nbot = Bot(token=BOT_TOKEN)\ndp = Dispatcher()\n\n# Список администраторов (добавьте свой Telegram ID)\nADMIN_IDS = [123456789]  # Замените на реальные ID администраторов\n\n# Хранилище пользователей (в реальном боте используйте базу данных)\nuser_data = {}\n\n\n# Утилитарные функции\nasync def is_admin(user_id: int) -> bool:\n    return user_id in ADMIN_IDS\n\nasync def is_private_chat(message: types.Message) -> bool:\n    return message.chat.type == \"private\"\n\nasync def check_auth(user_id: int) -> bool:\n    # Здесь можно добавить логику проверки авторизации\n    return user_id in user_data\n\n\n# Настройка меню команд\nasync def set_bot_commands():\n    commands = [\n        BotCommand(command=\"start\", description=\"Запустить бота\"),\n    ]\n    await bot.set_my_commands(commands)\n\n\n@dp.message(CommandStart())\nasync def start_handler(message: types.Message):\n\n    # Регистрируем пользователя в системе\n    user_data[message.from_user.id] = {\n        \"username\": message.from_user.username,\n        \"first_name\": message.from_user.first_name,\n        \"last_name\": message.from_user.last_name,\n        \"registered_at\": message.date\n    }\n\n    text = \"Привет! Добро пожаловать!\"\n    \n    # Создаем inline клавиатуру с кнопками\n    builder = InlineKeyboardBuilder()\n    keyboard = builder.as_markup()\n    # Отправляем сообщение с прикрепленными inline кнопками\n    await message.answer(text, reply_markup=keyboard)\n\n# Обработчики inline кнопок\n\n\n# Запуск бота\nasync def main():\n    await set_bot_commands()\n    print(\"Бот запущен!\")\n    await dp.start_polling(bot)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"}