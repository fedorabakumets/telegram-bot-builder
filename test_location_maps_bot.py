"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import requests
import json

def create_location_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É–∑–ª–∞–º–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üó∫Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-yandex",
                            "text": "üü° –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã",
                            "action": "goto",
                            "target": "yandex-location"
                        },
                        {
                            "id": "btn-google",
                            "text": "üî¥ Google Maps",
                            "action": "goto",
                            "target": "google-location"
                        },
                        {
                            "id": "btn-2gis",
                            "text": "üü¢ 2–ì–ò–°",
                            "action": "goto",
                            "target": "gis-location"
                        },
                        {
                            "id": "btn-custom",
                            "text": "üìç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
                            "action": "goto",
                            "target": "custom-location"
                        }
                    ]
                }
            },
            {
                "id": "yandex-location",
                "type": "location",
                "position": {"x": 300, "y": 50},
                "data": {
                    "title": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å",
                    "address": "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å, –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                    "latitude": 55.7558,
                    "longitude": 37.6176,
                    "mapService": "yandex",
                    "yandexMapUrl": "https://yandex.ru/maps/?ll=37.617644,55.755826&z=17&l=map",
                    "generateMapPreview": True,
                    "showDirections": True,
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-1",
                            "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "google-location",
                "type": "location",
                "position": {"x": 500, "y": 50},
                "data": {
                    "title": "–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è",
                    "address": "Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France",
                    "latitude": 48.8584,
                    "longitude": 2.2945,
                    "mapService": "google",
                    "googleMapUrl": "https://maps.google.com/?q=48.8584,2.2945",
                    "generateMapPreview": True,
                    "showDirections": True,
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-2",
                            "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "gis-location",
                "type": "location",
                "position": {"x": 700, "y": 50},
                "data": {
                    "title": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∏–π –æ–ø–µ—Ä–Ω—ã–π —Ç–µ–∞—Ç—Ä",
                    "address": "–ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 36, –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –†–æ—Å—Å–∏—è",
                    "latitude": 55.0415,
                    "longitude": 82.9346,
                    "mapService": "2gis",
                    "gisMapUrl": "https://2gis.ru/novosibirsk/firm/1267342919",
                    "generateMapPreview": True,
                    "showDirections": False,
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-3",
                            "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "custom-location",
                "type": "location",
                "position": {"x": 900, "y": 50},
                "data": {
                    "title": "–°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥—ã",
                    "address": "Liberty Island, New York, NY 10004, USA",
                    "latitude": 40.6892,
                    "longitude": -74.0445,
                    "mapService": "custom",
                    "generateMapPreview": True,
                    "showDirections": True,
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-4",
                            "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {"id": "conn-1", "source": "start-1", "target": "yandex-location"},
            {"id": "conn-2", "source": "start-1", "target": "google-location"},
            {"id": "conn-3", "source": "start-1", "target": "gis-location"},
            {"id": "conn-4", "source": "start-1", "target": "custom-location"},
            {"id": "conn-5", "source": "yandex-location", "target": "start-1"},
            {"id": "conn-6", "source": "google-location", "target": "start-1"},
            {"id": "conn-7", "source": "gis-location", "target": "start-1"},
            {"id": "conn-8", "source": "custom-location", "target": "start-1"}
        ]
    }
    
    return bot_data

def test_location_bot_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–æ—Ç–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ API"""
    print("üß™ –¢–ï–°–¢: –ë–æ—Ç —Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    bot_data = create_location_test_bot()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
        project_data = {
            "name": "–î–µ–º–æ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã, Google Maps –∏ 2–ì–ò–°",
            "data": bot_data
        }
        
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        if create_response.status_code != 201:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            return None
            
        project_id = create_response.json()['id']
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        if export_response.status_code == 200:
            generated_code = export_response.json()['code']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            with open('location_maps_demo_bot.py', 'w', encoding='utf-8') as f:
                f.write(generated_code)
            print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'location_maps_demo_bot.py'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
            print("\nüìä –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
            print("-" * 35)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
            map_functions = [
                'extract_coordinates_from_yandex',
                'extract_coordinates_from_google', 
                'extract_coordinates_from_2gis',
                'generate_map_urls'
            ]
            
            for func in map_functions:
                if func in generated_code:
                    print(f"  ‚úÖ –§—É–Ω–∫—Ü–∏—è {func} –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    print(f"  ‚ùå –§—É–Ω–∫—Ü–∏—è {func} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            if '—è–Ω–¥–µ–∫—Å_url' in generated_code.lower() or 'yandex_url' in generated_code:
                print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç")
            else:
                print("  ‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            if 'google_url' in generated_code:
                print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Google Maps")
            else:
                print("  ‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Google Maps –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            if 'gis_url' in generated_code:
                print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2–ì–ò–°")
            else:
                print("  ‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 2–ì–ò–° –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ–∫ –∫–∞—Ä—Ç
            if '–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã' in generated_code and 'Google Maps' in generated_code and '2–ì–ò–°' in generated_code:
                print("  ‚úÖ –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
            else:
                print("  ‚ùå –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–∞—Ä—à—Ä—É—Ç–æ–≤
            if '–ú–∞—Ä—à—Ä—É—Ç' in generated_code:
                print("  ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")
            else:
                print("  ‚ùå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {len(generated_code.splitlines())}")
            print(f"  ‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {len(generated_code)}")
            print(f"  ‚Ä¢ –£–∑–ª–æ–≤ –≤ –±–æ—Ç–µ: {len(bot_data['nodes'])}")
            print(f"  ‚Ä¢ –°–≤—è–∑–µ–π: {len(bot_data['connections'])}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = test_location_bot_generation()
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–§–∞–π–ª 'location_maps_demo_bot.py' –≥–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather")
        print("2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –≤ —Ñ–∞–π–ª–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python location_maps_demo_bot.py")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")

if __name__ == "__main__":
    main()