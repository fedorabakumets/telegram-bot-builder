"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ - Telegram Bot
–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import logging
import asyncio
import asyncpg
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
dp = Dispatcher(storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        conn = await asyncpg.connect("postgresql://user:password@localhost/botdb")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS bot_users (
                user_id BIGINT PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                user_data JSONB DEFAULT '{}'::jsonb,
                command_count INTEGER DEFAULT 0
            )
        ''')
        
        await conn.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await asyncpg.connect("postgresql://user:password@localhost/botdb")
        
        await conn.execute('''
            INSERT INTO bot_users (user_id, username, first_name, last_name)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name,
                last_activity = CURRENT_TIMESTAMP
        ''', user_id, username, first_name, last_name)
        
        await conn.close()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")

async def update_user_data_in_db(user_id: int, data_key: str, data_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = await asyncpg.connect("postgresql://user:password@localhost/botdb")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        row = await conn.fetchrow('SELECT user_data FROM bot_users WHERE user_id = $1', user_id)
        current_data = dict(row['user_data']) if row and row['user_data'] else {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        current_data[data_key] = {
            'value': data_value,
            'timestamp': datetime.now().isoformat(),
            'type': 'text_input'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await conn.execute(
            'UPDATE bot_users SET user_data = $1 WHERE user_id = $2',
            json.dumps(current_data), user_id
        )
        
        await conn.close()
        logging.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data_key} = {data_value}")
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        if user_id not in user_data:
            user_data[user_id] = {}
        user_data[user_id][data_key] = data_value

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await save_user_to_db(message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name)
    
    text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç-–±–æ—Ç!

–≠—Ç–æ—Ç –±–æ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="name_input"))
    builder.add(InlineKeyboardButton(text="üéÇ –í–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age_input"))
    builder.add(InlineKeyboardButton(text="üìç –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "name_input")
async def handle_callback_name_input(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    text = """üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    if callback_query.from_user.id not in user_data:
        user_data[callback_query.from_user.id] = {}
    
    user_data[callback_query.from_user.id]["waiting_for_input"] = {
        "type": "text",
        "variable": "user_name",
        "save_to_database": True,
        "node_id": "name_input",
        "next_node_id": "show_name_result"
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text)

@dp.callback_query(lambda c: c.data == "age_input")
async def handle_callback_age_input(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    text = """üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    if callback_query.from_user.id not in user_data:
        user_data[callback_query.from_user.id] = {}
    
    user_data[callback_query.from_user.id]["waiting_for_input"] = {
        "type": "number",
        "variable": "user_age",
        "save_to_database": True,
        "node_id": "age_input",
        "next_node_id": "show_age_result"
    }
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text)

@dp.callback_query(lambda c: c.data == "show_name_result")
async def handle_callback_show_name_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    user_name = user_data.get(callback_query.from_user.id, {}).get("user_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏!

–í–∞—à–µ –∏–º—è: {user_name}

–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –µ—â–µ?"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéÇ –í–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age_input"))
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_1"))
    keyboard = builder.as_markup()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "show_age_result")
async def handle_callback_show_age_result(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    user_age = user_data.get(callback_query.from_user.id, {}).get("user_age", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–≤–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç–∞!

–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {user_age}

–•–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –µ—â–µ?"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="name_input"))
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_1"))
    keyboard = builder.as_markup()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "show_results")
async def handle_callback_show_results(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    user_name = user_data.get(callback_query.from_user.id, {}).get("user_name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    user_age = user_data.get(callback_query.from_user.id, {}).get("user_age", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    text = f"""üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:

üë§ –ò–º—è: {user_name}
üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_age}

–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="name_input"))
    builder.add(InlineKeyboardButton(text="üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age_input"))
    builder.add(InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_1"))
    keyboard = builder.as_markup()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "start_1")
async def handle_callback_start_1(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    text = """ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∏–º—è", callback_data="name_input"))
    builder.add(InlineKeyboardButton(text="üéÇ –í–≤–µ—Å—Ç–∏ –≤–æ–∑—Ä–∞—Å—Ç", callback_data="age_input"))
    builder.add(InlineKeyboardButton(text="üìç –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="show_results"))
    keyboard = builder.as_markup()
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")
        await callback_query.message.answer(text, reply_markup=keyboard)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message()
async def handle_user_input(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data or "waiting_for_input" not in user_data[user_id]:
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return
    
    input_config = user_data[user_id]["waiting_for_input"]
    input_type = input_config.get("type", "text")
    variable_name = input_config.get("variable", "response")
    save_to_db = input_config.get("save_to_database", False)
    next_node_id = input_config.get("next_node_id", "")
    
    user_input = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if input_type == "number":
        try:
            user_input = int(user_input)
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id][variable_name] = user_input
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if save_to_db:
        await update_user_data_in_db(user_id, variable_name, user_input)
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    del user_data[user_id]["waiting_for_input"]
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    if next_node_id:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º callback_query –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
        fake_callback = types.CallbackQuery(
            id="fake_" + str(message.message_id),
            from_user=message.from_user,
            chat_instance="fake_chat",
            data=next_node_id,
            message=message
        )
        
        if next_node_id == "show_name_result":
            await handle_callback_show_name_result(fake_callback)
        elif next_node_id == "show_age_result":
            await handle_callback_show_age_result(fake_callback)
    else:
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

async def main():
    await init_database()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())