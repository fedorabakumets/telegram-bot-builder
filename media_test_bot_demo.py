"""
üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–¥–∏–∞-–±–æ—Ç - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è @BotFather:
start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    return user_id in user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
    ]
    await bot.set_my_commands(commands)

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–¥–∏–∞-–±–æ—Ç

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ –í–∏–¥–µ–æ
‚Ä¢ –ê—É–¥–∏–æ
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="photo_demo"))
    builder.add(InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="video_demo"))
    builder.add(InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ", callback_data="audio_demo"))
    builder.add(InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="document_demo"))
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = builder.as_markup()
    
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–¥–∏–∞

@dp.callback_query(lambda c: c.data == "photo_demo")
async def handle_callback_photo_demo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üì∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    photo_url = "https://picsum.photos/800/600?random=1"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_photo(callback_query.from_user.id, photo_url, caption=caption, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ\n{caption}")

@dp.callback_query(lambda c: c.data == "video_demo")
async def handle_callback_video_demo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    video_url = "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_video(callback_query.from_user.id, video_url, caption=caption, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\n{caption}")

@dp.callback_query(lambda c: c.data == "audio_demo")
async def handle_callback_audio_demo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üéµ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    audio_url = "https://www.soundjay.com/misc/beep-07a.wav"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_audio(callback_query.from_user.id, audio_url, caption=caption, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ\n{caption}")

@dp.callback_query(lambda c: c.data == "document_demo")
async def handle_callback_document_demo(callback_query: types.CallbackQuery):
    await callback_query.answer()
    caption = """üìÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞

–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."""
    document_url = "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf"
    document_name = "demo-document.pdf"
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        keyboard = builder.as_markup()
        await callback_query.message.delete()
        await bot.send_document(
            callback_query.from_user.id, 
            URLInputFile(document_url, filename=document_name), 
            caption=caption, 
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n{caption}")

@dp.callback_query(lambda c: c.data == "back_to_menu")
async def handle_callback_back_to_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üé• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–¥–∏–∞-–±–æ—Ç

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:
‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
‚Ä¢ –í–∏–¥–µ–æ
‚Ä¢ –ê—É–¥–∏–æ
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"""
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="photo_demo"))
    builder.add(InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="video_demo"))
    builder.add(InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ", callback_data="audio_demo"))
    builder.add(InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="document_demo"))
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = builder.as_markup()
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await set_bot_commands()
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–µ–¥–∏–∞-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())