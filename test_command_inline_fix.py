#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
"""
import sys
sys.path.append('client/src/lib')

def test_command_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                    "keyboardType": "inline",
                    "buttons": [
                        {"text": "üìã –ü–æ–º–æ—â—å", "action": "goto", "target": "help-1"}
                    ]
                }
            },
            {
                "id": "help-1", 
                "type": "command",
                "data": {
                    "command": "/help",
                    "messageText": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É",
                    "keyboardType": "inline",
                    "buttons": [
                        {"text": "üîô –ù–∞–∑–∞–¥", "action": "goto", "target": "start-1"}
                    ]
                }
            }
        ],
        "connections": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        from bot_generator import generatePythonCode
        code = generatePythonCode(bot_data, "TestBot")
        
        print("=== –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î ===")
        print(code)
        print("\n=== –ü–†–û–í–ï–†–ö–ê –ù–ê –û–®–ò–ë–ö–ò ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
        if 'Command(")' in code:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ —Å –ª–∏—à–Ω–µ–π —Å–∫–æ–±–∫–æ–π –≤ Command")
        else:
            print("‚úÖ –ù–µ—Ç –æ–ø–µ—á–∞—Ç–æ–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å inline –∫–Ω–æ–ø–æ–∫
        if 'InlineKeyboardBuilder()' in code and 'await message.answer(text, reply_markup=keyboard)' in code:
            print("‚úÖ Inline –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π inline –∫–Ω–æ–ø–æ–∫")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        with open('test_generated_bot.py', 'w', encoding='utf-8') as f:
            f.write(code)
        print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_generated_bot.py")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_command_generation()