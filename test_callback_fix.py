"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""
import requests
import json

def create_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —á–µ—Ä–µ–∑ API"""
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    bot_data = {
        "name": "–¢–µ—Å—Ç Callback –ë–æ—Ç",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
        "data": {
            "nodes": [
                {
                    "id": "start-node-1",
                    "type": "start",
                    "position": {"x": 100, "y": 100},
                    "data": {
                        "messageText": "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        "keyboardType": "inline",
                        "buttons": [
                            {
                                "id": "btn-info-1",
                                "text": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                "action": "goto",
                                "target": "info-node-2"
                            },
                            {
                                "id": "btn-settings-1", 
                                "text": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                "action": "goto",
                                "target": "settings-node-3"
                            }
                        ],
                        "resizeKeyboard": True,
                        "oneTimeKeyboard": False
                    }
                },
                {
                    "id": "info-node-2",
                    "type": "message",
                    "position": {"x": 300, "y": 100},
                    "data": {
                        "messageText": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.\n–í—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.",
                        "keyboardType": "inline",
                        "buttons": [
                            {
                                "id": "btn-back-info",
                                "text": "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
                                "action": "goto",
                                "target": "start-node-1"
                            }
                        ]
                    }
                },
                {
                    "id": "settings-node-3",
                    "type": "message",
                    "position": {"x": 500, "y": 100}, 
                    "data": {
                        "messageText": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
                        "keyboardType": "inline",
                        "buttons": [
                            {
                                "id": "btn-back-settings",
                                "text": "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
                                "action": "goto",
                                "target": "start-node-1"
                            }
                        ]
                    }
                }
            ],
            "connections": []
        }
    }
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        response = requests.post("http://localhost:5000/api/projects", json=bot_data)
        
        if response.status_code == 200:
            project_data = response.json()
            project_id = project_data["id"]
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –¢–µ–ø–µ—Ä—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f"http://localhost:5000/api/projects/{project_id}/export")
            
            if export_response.status_code == 200:
                files = export_response.json()["files"]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞
                main_file = files.get("main.py", "")
                if main_file:
                    with open("test_callback_fixed_bot.py", "w", encoding="utf-8") as f:
                        f.write(main_file)
                    
                    print("‚úÖ –ö–æ–¥ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_callback_fixed_bot.py")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
                    
                    checks = [
                        ('callback_data="info-node-2"', "–ö–Ω–æ–ø–∫–∞ '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞"),
                        ('callback_data="settings-node-3"', "–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞"),
                        ('callback_data="start-node-1"', "–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ID —É–∑–ª–∞"),
                        ('c.data == "info-node-2"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID"),
                        ('c.data == "settings-node-3"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID"),
                        ('c.data == "start-node-1"', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–∞–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID"),
                        ('await callback_query.answer()', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ callback"),
                        ('await callback_query.message.edit_text', "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                    ]
                    
                    for check, description in checks:
                        if check in main_file:
                            print(f"‚úÖ {description}")
                        else:
                            print(f"‚ùå {description}")
                    
                    return project_id
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –±–æ—Ç–∞")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    return None

if __name__ == "__main__":
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    create_test_bot()