"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
"""

import requests
import json
import re
from typing import Dict, List, Any

def get_bot_project(project_id: int = 2):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±–æ—Ç–∞ –ø–æ ID"""
    try:
        response = requests.get(f'http://localhost:5000/api/projects/{project_id}')
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def generate_bot_code(project_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        project_id = project_data["id"]
        
        response = requests.post(
            f'http://localhost:5000/api/projects/{project_id}/export',
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            return result.get("code", "")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def analyze_bot_structure(project_data) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞"""
    bot_data = project_data["data"]
    nodes = bot_data.get("nodes", [])
    connections = bot_data.get("connections", [])
    
    analysis = {
        "total_nodes": len(nodes),
        "total_connections": len(connections),
        "node_types": {},
        "commands": [],
        "keyboards": {"inline": 0, "reply": 0},
        "buttons": {"total": 0, "inline": 0, "reply": 0, "special": 0},
        "special_features": [],
        "complexity_score": 0
    }
    
    # –ê–Ω–∞–ª–∏–∑ —É–∑–ª–æ–≤
    for node in nodes:
        node_type = node.get("type", "unknown")
        analysis["node_types"][node_type] = analysis["node_types"].get(node_type, 0) + 1
        
        node_data = node.get("data", {})
        
        # –ö–æ–º–∞–Ω–¥—ã
        if "command" in node_data:
            command_info = {
                "command": node_data["command"],
                "has_synonyms": bool(node_data.get("synonyms")),
                "synonyms_count": len(node_data.get("synonyms", []))
            }
            analysis["commands"].append(command_info)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_type = node_data.get("keyboardType")
        if keyboard_type:
            analysis["keyboards"][keyboard_type] = analysis["keyboards"].get(keyboard_type, 0) + 1
            
            buttons = node_data.get("buttons", [])
            analysis["buttons"]["total"] += len(buttons)
            
            if keyboard_type == "inline":
                analysis["buttons"]["inline"] += len(buttons)
            elif keyboard_type == "reply":
                analysis["buttons"]["reply"] += len(buttons)
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                for button in buttons:
                    if button.get("action") in ["contact", "location"]:
                        analysis["buttons"]["special"] += 1
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if any(cmd["has_synonyms"] for cmd in analysis["commands"]):
        analysis["special_features"].append("–°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥")
    
    if analysis["buttons"]["special"] > 0:
        analysis["special_features"].append("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (contact/location)")
    
    if analysis["keyboards"]["inline"] > 0 and analysis["keyboards"]["reply"] > 0:
        analysis["special_features"].append("–°–º–µ—à–∞–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    
    # URL –∫–Ω–æ–ø–∫–∏
    url_buttons = 0
    for node in nodes:
        buttons = node.get("data", {}).get("buttons", [])
        url_buttons += len([b for b in buttons if b.get("action") == "url"])
    
    if url_buttons > 0:
        analysis["special_features"].append(f"–í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏ ({url_buttons})")
    
    # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    complexity = 0
    complexity += analysis["total_nodes"] * 2
    complexity += analysis["total_connections"] * 1
    complexity += len(analysis["commands"]) * 3
    complexity += analysis["keyboards"]["inline"] * 2
    complexity += analysis["keyboards"]["reply"] * 3
    complexity += analysis["buttons"]["special"] * 5
    complexity += len(analysis["special_features"]) * 10
    
    analysis["complexity_score"] = complexity
    
    return analysis

def analyze_generated_code(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    if not code:
        return {"error": "–ö–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"}
    
    analysis = {
        "lines_of_code": len(code.split('\n')),
        "imports": [],
        "handlers": [],
        "commands": [],
        "callback_handlers": [],
        "reply_handlers": [],
        "special_handlers": [],
        "keyboard_builders": {"inline": 0, "reply": 0},
        "error_handling": False,
        "logging": False,
        "code_quality_score": 0
    }
    
    lines = code.split('\n')
    
    # –ò–º–ø–æ—Ä—Ç—ã
    for line in lines:
        if line.strip().startswith(('import ', 'from ')):
            analysis["imports"].append(line.strip())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handler_pattern = r'async def (\w+_handler)'
    handlers = re.findall(handler_pattern, code)
    analysis["handlers"] = handlers
    
    # –ö–æ–º–∞–Ω–¥—ã
    command_pattern = r'@dp\.message\(Command\("([^"]+)"\)'
    commands = re.findall(command_pattern, code)
    analysis["commands"] = commands
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    callback_pattern = r'@dp\.callback_query'
    analysis["callback_handlers"] = len(re.findall(callback_pattern, code))
    
    # Reply –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    reply_pattern = r'@dp\.message\(F\.text == "([^"]+)"\)'
    reply_handlers = re.findall(reply_pattern, code)
    analysis["reply_handlers"] = reply_handlers
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if 'F.contact' in code:
        analysis["special_handlers"].append("contact")
    if 'F.location' in code:
        analysis["special_handlers"].append("location")
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    analysis["keyboard_builders"]["inline"] = code.count('InlineKeyboardBuilder()')
    analysis["keyboard_builders"]["reply"] = code.count('ReplyKeyboardBuilder()')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    analysis["error_handling"] = 'try:' in code and 'except' in code
    analysis["logging"] = any(log in code for log in ['logging', 'logger', 'log.'])
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
    quality = 0
    quality += len(analysis["imports"]) * 2
    quality += len(analysis["handlers"]) * 5
    quality += len(analysis["commands"]) * 3
    quality += analysis["callback_handlers"] * 4
    quality += len(analysis["reply_handlers"]) * 3
    quality += len(analysis["special_handlers"]) * 6
    quality += (analysis["keyboard_builders"]["inline"] + analysis["keyboard_builders"]["reply"]) * 2
    
    if analysis["error_handling"]:
        quality += 10
    if analysis["logging"]:
        quality += 5
    
    analysis["code_quality_score"] = quality
    
    return analysis

def test_specific_features(code: str) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"""
    tests = {
        "command_synonyms": False,
        "inline_buttons": False,
        "reply_buttons": False,
        "external_urls": False,
        "special_buttons": False,
        "proper_imports": False,
        "async_handlers": False,
        "keyboard_removal": False,
        "callback_query_answer": False
    }
    
    # –°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥
    if 'F.text.in_(' in code:
        tests["command_synonyms"] = True
    
    # Inline –∫–Ω–æ–ø–∫–∏
    if 'InlineKeyboardButton' in code:
        tests["inline_buttons"] = True
    
    # Reply –∫–Ω–æ–ø–∫–∏
    if 'ReplyKeyboardBuilder' in code:
        tests["reply_buttons"] = True
    
    # –í–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    if 'url=' in code and 'http' in code:
        tests["external_urls"] = True
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if 'request_contact=True' in code or 'request_location=True' in code:
        tests["special_buttons"] = True
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    required_imports = ['aiogram', 'types', 'Dispatcher', 'Bot']
    tests["proper_imports"] = all(imp in code for imp in required_imports)
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    tests["async_handlers"] = 'async def' in code
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    tests["keyboard_removal"] = 'ReplyKeyboardRemove' in code
    
    # –û—Ç–≤–µ—Ç –Ω–∞ callback
    tests["callback_query_answer"] = 'callback_query.answer()' in code
    
    return tests

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –±–æ—Ç–∞...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_data = get_bot_project(2)
    if not project_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return
    
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {project_data['name']}")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    structure_analysis = analyze_bot_structure(project_data)
    print("üìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ë–û–¢–ê:")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {structure_analysis['total_nodes']}")
    print(f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π: {structure_analysis['total_connections']}")
    print(f"   ‚Ä¢ –¢–∏–ø—ã —É–∑–ª–æ–≤: {dict(structure_analysis['node_types'])}")
    print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: {len(structure_analysis['commands'])}")
    print(f"   ‚Ä¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {structure_analysis['keyboards']}")
    print(f"   ‚Ä¢ –ö–Ω–æ–ø–∫–∏: {structure_analysis['buttons']}")
    print(f"   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {structure_analysis['special_features']}")
    print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {structure_analysis['complexity_score']}/100")
    print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞...")
    bot_code = generate_bot_code(project_data)
    
    if not bot_code:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥")
        return
    
    print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    print()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    code_analysis = analyze_generated_code(bot_code)
    print("üîç –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
    print(f"   ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {code_analysis['lines_of_code']}")
    print(f"   ‚Ä¢ –ò–º–ø–æ—Ä—Ç–æ–≤: {len(code_analysis['imports'])}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(code_analysis['handlers'])}")
    print(f"   ‚Ä¢ –ö–æ–º–∞–Ω–¥: {len(code_analysis['commands'])}")
    print(f"   ‚Ä¢ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {code_analysis['callback_handlers']}")
    print(f"   ‚Ä¢ Reply –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(code_analysis['reply_handlers'])}")
    print(f"   ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {code_analysis['special_handlers']}")
    print(f"   ‚Ä¢ Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {code_analysis['keyboard_builders']['inline']}")
    print(f"   ‚Ä¢ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {code_analysis['keyboard_builders']['reply']}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫: {'‚úÖ' if code_analysis['error_handling'] else '‚ùå'}")
    print(f"   ‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if code_analysis['logging'] else '‚ùå'}")
    print(f"   ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {code_analysis['code_quality_score']}/100")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    feature_tests = test_specific_features(bot_code)
    print("üß™ –¢–ï–°–¢ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô:")
    for feature, passed in feature_tests.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"   {status} {feature.replace('_', ' ').title()}")
    
    passed_tests = sum(feature_tests.values())
    total_tests = len(feature_tests)
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\n" + "=" * 60)
    print("üèÜ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –ì–ï–ù–ï–†–ê–¢–û–†–ê:")
    
    overall_score = (
        min(structure_analysis['complexity_score'], 100) * 0.3 +
        min(code_analysis['code_quality_score'], 100) * 0.4 +
        (passed_tests / total_tests * 100) * 0.3
    )
    
    print(f"   ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {min(structure_analysis['complexity_score'], 100)}/100")
    print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: {min(code_analysis['code_quality_score'], 100)}/100")
    print(f"   ‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: {passed_tests/total_tests*100:.1f}/100")
    print(f"   ‚Ä¢ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {overall_score:.1f}/100")
    
    if overall_score >= 90:
        print("ü•á –û–¢–õ–ò–ß–ù–û! –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ!")
    elif overall_score >= 80:
        print("ü•à –•–û–†–û–®–û! –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
    elif overall_score >= 70:
        print("ü•â –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û. –ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.")
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open("generated_advanced_bot.py", "w", encoding="utf-8") as f:
        f.write(bot_code)
    
    print(f"\nüíæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'generated_advanced_bot.py'")
    print("üöÄ –ì–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Telegram!")
    
    return {
        "structure": structure_analysis,
        "code": code_analysis,
        "features": feature_tests,
        "overall_score": overall_score
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        result = run_comprehensive_test()
        
        if result and result["overall_score"] >= 80:
            print("\n‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
            print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
            print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω")
            print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ë–æ—Ç' –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
            print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã")
            print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
        else:
            print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–æ–¥–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    main()