#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
"""

import json
import requests

def create_test_bot():
    """–°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "ü§ñ **–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç** –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∂–∏—Ä–Ω—ã–º\n*–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç* –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—É—Ä—Å–∏–≤–æ–º\n`–ö–æ–¥` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥–æ–º\n__–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º\n~~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~~ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–º",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-html",
                            "text": "üåê HTML —Ç–µ—Å—Ç",
                            "action": "goto",
                            "target": "html-test"
                        },
                        {
                            "id": "btn-plain",
                            "text": "üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            "action": "goto",
                            "target": "plain-test"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "html-test",
                "type": "message",
                "data": {
                    "messageText": "üåê <b>HTML –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n<b>–ñ–∏—Ä–Ω—ã–π</b> –≤ HTML\n<i>–ö—É—Ä—Å–∏–≤–Ω—ã–π</i> –≤ HTML\n<code>–ö–æ–¥</code> –≤ HTML\n<u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u> –≤ HTML\n<s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s> –≤ HTML",
                    "keyboardType": "inline",
                    "formatMode": "html",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 100}
            },
            {
                "id": "plain-test",
                "type": "message",
                "data": {
                    "messageText": "üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n**–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∂–∏—Ä–Ω—ã–º**\n*–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—É—Ä—Å–∏–≤–æ–º*\n`–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–¥–æ–º`",
                    "keyboardType": "inline",
                    "formatMode": "none",
                    "buttons": [
                        {
                            "id": "btn-back2",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 500, "y": 100}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "html-test"},
            {"id": "conn2", "from": "start-1", "to": "plain-test"},
            {"id": "conn3", "from": "html-test", "to": "start-1"},
            {"id": "conn4", "from": "plain-test", "to": "start-1"}
        ]
    }
    
    return bot_data

def test_code_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API"""
    
    print("üß™ –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç
    bot_data = create_test_bot()
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('generated_formatting_test.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'generated_formatting_test.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
                analyze_generated_code(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def analyze_generated_code(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîç –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
    print("-" * 40)
    
    issues = []
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    if '\\"' in code:
        issues.append("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ")
    
    # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ parseMode
    if 'parse_mode=ParseMode.MARKDOWN' in code:
        print("‚úÖ –ù–∞–π–¥–µ–Ω ParseMode.MARKDOWN")
    else:
        issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ParseMode.MARKDOWN")
    
    if 'parse_mode=ParseMode.HTML' in code:
        print("‚úÖ –ù–∞–π–¥–µ–Ω ParseMode.HTML")
    else:
        issues.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ParseMode.HTML")
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
    if '"""' in code:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    
    # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º markdown
    if '\\*\\*' in code:
        issues.append("‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown (\\*\\*)")
    
    if '\\*' in code and '\\*\\*' not in code:
        issues.append("‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∏–≤–∞ (\\*)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    lines = code.split('\n')
    for i, line in enumerate(lines):
        if '**' in line and 'text = ' in line:
            if '\\"' in line:
                issues.append(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+1}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º")
            else:
                print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {i+1}: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if issues:
        print("\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("\n‚úÖ –ü—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

if __name__ == "__main__":
    test_code_generation()