#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è inline –∫–Ω–æ–ø–æ–∫
"""

import json
import requests
import time

def create_test_bot_data():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "messageText": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç!\n\n–≠—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É inline –∫–Ω–æ–ø–æ–∫.",
                    "keyboardType": "inline",
                    "command": "/start",
                    "showInMenu": True,
                    "description": "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
                    "buttons": [
                        {
                            "id": "btn-info",
                            "text": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                            "action": "goto",
                            "target": "info-node"
                        },
                        {
                            "id": "btn-help",
                            "text": "‚ùì –ü–æ–º–æ—â—å",
                            "action": "goto", 
                            "target": "help-node"
                        },
                        {
                            "id": "btn-website",
                            "text": "üåê –°–∞–π—Ç",
                            "action": "url",
                            "url": "https://telegram.org"
                        }
                    ]
                }
            },
            {
                "id": "info-node",
                "type": "message",
                "data": {
                    "messageText": "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n‚Ä¢ –°–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è inline –∫–Ω–æ–ø–æ–∫\n‚Ä¢ –í—Å–µ callback_data –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n‚Ä¢ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –æ—à–∏–±–æ–∫",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-info",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "help-node", 
                "type": "message",
                "data": {
                    "messageText": "‚ùì –°–ø—Ä–∞–≤–∫–∞:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n–í—Å–µ inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-help",
                            "text": "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            }
        ],
        "connections": []
    }
    return bot_data

def test_bot_creation_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
    print("ü§ñ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ë–û–¢–ê –° INLINE –ö–ù–û–ü–ö–ê–ú–ò")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    bot_data = create_test_bot_data()
    print("1. ‚úÖ –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã")
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–¢–µ—Å—Ç Inline –ö–Ω–æ–ø–æ–∫",
        "description": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö inline –∫–Ω–æ–ø–æ–∫",
        "data": bot_data
    }
    
    try:
        print("2. üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API...")
        response = requests.post('http://localhost:5000/api/projects', 
                               json=project_data, 
                               timeout=10)
        
        if response.status_code == 201:
            project = response.json()
            project_id = project['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            print("3. üîß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Python –∫–æ–¥...")
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export',
                                          timeout=10)
            
            if export_response.status_code == 200:
                code_data = export_response.json()
                python_code = code_data['code']
                print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
                print("4. üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥...")
                
                analysis = {
                    "inline_buttons": python_code.count('InlineKeyboardBuilder()'),
                    "callback_handlers": python_code.count('@dp.callback_query'),
                    "empty_callback_data": python_code.count('callback_data=""'),
                    "valid_callback_data": python_code.count('callback_data="start-1"') + 
                                         python_code.count('callback_data="info-node"') + 
                                         python_code.count('callback_data="help-node"'),
                    "syntax_check": None
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                try:
                    compile(python_code, '<string>', 'exec')
                    analysis["syntax_check"] = True
                except SyntaxError:
                    analysis["syntax_check"] = False
                
                print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
                print("-" * 30)
                print(f"Inline –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {analysis['inline_buttons']}")
                print(f"Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {analysis['callback_handlers']}")
                print(f"–ü—É—Å—Ç—ã—Ö callback_data: {analysis['empty_callback_data']}")
                print(f"–í–∞–ª–∏–¥–Ω—ã—Ö callback_data: {analysis['valid_callback_data']}")
                print(f"–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {'‚úÖ' if analysis['syntax_check'] else '‚ùå'}")
                
                # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                filename = f"demo_inline_bot_{project_id}.py"
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(python_code)
                print(f"\nüíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
                
                # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                success = (analysis['empty_callback_data'] == 0 and 
                          analysis['valid_callback_data'] > 0 and
                          analysis['syntax_check'] == True and
                          analysis['callback_handlers'] > 0)
                
                print(f"\nüéØ –ò–¢–û–ì: {'‚úÖ –£–°–ü–ï–•' if success else '‚ùå –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò'}")
                
                if success:
                    print("\nüéâ INLINE –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                    print("‚Ä¢ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö callback_data")
                    print("‚Ä¢ –°–æ–∑–¥–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query")
                    print("‚Ä¢ –ö–æ–¥ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
                    print("‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º")
                
                return success, project_id
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                return False, None
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
            return False, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False, None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    success, project_id = test_bot_creation_api()
    
    if success:
        print(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print(f"2. –ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç '–¢–µ—Å—Ç Inline –ö–Ω–æ–ø–æ–∫' (ID: {project_id})")
        print("3. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ inline –∫–Ω–æ–ø–∫–∏ –≤ Telegram")
        print("\n–í—Å–µ inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.")

if __name__ == "__main__":
    main()