{"code":"\"\"\"\n–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ - Telegram Bot\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder\n\"\"\"\n\nimport asyncio\nimport logging\nfrom aiogram import Bot, Dispatcher, types\nfrom aiogram.filters import CommandStart, Command\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove\nfrom aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\nfrom aiogram.enums import ParseMode\n\n# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)\nBOT_TOKEN = \"YOUR_BOT_TOKEN_HERE\"\n\n# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\nlogging.basicConfig(level=logging.INFO)\n\n# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞\nbot = Bot(token=BOT_TOKEN)\ndp = Dispatcher()\n\n# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)\nADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)\nuser_data = {}\n\n\n# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\nasync def is_admin(user_id: int) -> bool:\n    return user_id in ADMIN_IDS\n\nasync def is_private_chat(message: types.Message) -> bool:\n    return message.chat.type == \"private\"\n\nasync def check_auth(user_id: int) -> bool:\n    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n    return user_id in user_data\n\n\n@dp.message(CommandStart())\nasync def start_handler(message: types.Message):\n\n    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ\n    user_data[message.from_user.id] = {\n        \"username\": message.from_user.username,\n        \"first_name\": message.from_user.first_name,\n        \"last_name\": message.from_user.last_name,\n        \"registered_at\": message.date\n    }\n\n    text = \"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é.\"\n    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—É–¥–∞–ª—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –±—ã–ª–∞)\n    await message.answer(text, reply_markup=ReplyKeyboardRemove())\n\n@dp.message(Command(\"menu\"))\nasync def menu_handler(message: types.Message):\n\n    text = \"üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\"\n    \n    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", callback_data=\"info-msg\"))\n    builder.add(InlineKeyboardButton(text=\"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\", callback_data=\"settings-msg\"))\n    builder.add(InlineKeyboardButton(text=\"üåê –°–∞–π—Ç\", url=\"https://example.com\"))\n    keyboard = builder.as_markup()\n    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏\n    await message.answer(text, reply_markup=keyboard)\n\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫\n\n@dp.callback_query(lambda c: c.data == \"info-msg\")\nasync def handle_callback_btn_1(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    text = \"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã inline –∫–Ω–æ–ø–æ–∫ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.\"\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"üîô –ù–∞–∑–∞–¥\", callback_data=\"menu-cmd\"))\n    keyboard = builder.as_markup()\n    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n@dp.callback_query(lambda c: c.data == \"settings-msg\")\nasync def handle_callback_btn_2(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    text = \"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\"\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é\", callback_data=\"menu-cmd\"))\n    keyboard = builder.as_markup()\n    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n@dp.callback_query(lambda c: c.data == \"menu-cmd\")\nasync def handle_callback_btn_back(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    text = \"üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\"\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\", callback_data=\"info-msg\"))\n    builder.add(InlineKeyboardButton(text=\"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\", callback_data=\"settings-msg\"))\n    builder.add(InlineKeyboardButton(text=\"üåê –°–∞–π—Ç\", url=\"https://example.com\"))\n    keyboard = builder.as_markup()\n    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n\n# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\nasync def main():\n    print(\"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\")\n    await dp.start_polling(bot)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"}