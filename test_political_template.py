#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram –±–æ—Ç–µ
"""

import requests
import json

def test_political_template():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω"""
    
    print("üèõÔ∏è –¢–ï–°–¢ –ü–û–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –®–ê–ë–õ–û–ù–ê")
    print("=" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    try:
        response = requests.get('http://localhost:5000/api/templates')
        if response.status_code == 200:
            templates = response.json()
            political_template = None
            
            for template in templates:
                if '–ü–æ–ª–∏—Ç–∏–∫–æ' in template['name']:
                    political_template = template
                    break
            
            if political_template:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {political_template['name']}")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
                project_data = {
                    "name": "–¢–µ—Å—Ç –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞",
                    "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º —à–∞–±–ª–æ–Ω–µ",
                    "data": political_template['data']
                }
                
                create_response = requests.post('http://localhost:5000/api/projects', 
                                              json=project_data)
                
                if create_response.status_code == 201:
                    project_id = create_response.json()['id']
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                    export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
                    
                    if export_response.status_code == 200:
                        generated_code = export_response.json()['code']
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
                        with open('test_political_template_result.py', 'w', encoding='utf-8') as f:
                            f.write(generated_code)
                        
                        print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_political_template_result.py'")
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
                        analyze_political_template(generated_code)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —É–∑–µ–ª
                        first_node = political_template['data']['nodes'][0]
                        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–ï–†–í–û–ì–û –£–ó–õ–ê:")
                        print(f"   ID: {first_node['id']}")
                        print(f"   –¢–∏–ø: {first_node['type']}")
                        print(f"   Markdown: {first_node['data'].get('markdown', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                        print(f"   FormatMode: {first_node['data'].get('formatMode', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                        print(f"   –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞: {first_node['data']['messageText'][:100]}...")
                        
                        return True
                        
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                        return False
                        
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
                    return False
                    
            else:
                print("‚ùå –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def analyze_political_template(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–û–î–ê –ü–û–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –®–ê–ë–õ–û–ù–ê:")
    print("-" * 45)
    
    lines = code.split('\n')
    
    # –ò—â–µ–º start_handler
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            print(f"üìç –ù–∞–π–¥–µ–Ω start_handler –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 50 —Å—Ç—Ä–æ–∫
            for j in range(i, min(i + 50, len(lines))):
                if 'text = ' in lines[j] and '**' in lines[j]:
                    print(f"üìù –ù–∞–π–¥–µ–Ω markdown —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ {j+1}:")
                    print(f"   {lines[j].strip()}")
                    
                    # –ò—â–µ–º parse_mode –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 15 —Å—Ç—Ä–æ–∫–∞—Ö
                    for k in range(j, min(j + 15, len(lines))):
                        if 'parse_mode=' in lines[k]:
                            print(f"üìä Parse mode –Ω–∞ —Å—Ç—Ä–æ–∫–µ {k+1}: {lines[k].strip()}")
                            
                            if 'ParseMode.MARKDOWN' in lines[k]:
                                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å ParseMode.MARKDOWN")
                                print("   –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç **–¥–æ–ª–∂–µ–Ω** –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram")
                            elif 'ParseMode.HTML' in lines[k]:
                                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å ParseMode.HTML")
                            break
                    break
            break
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    html_modes = code.count('ParseMode.HTML')
    markdown_modes = code.count('ParseMode.MARKDOWN')
    markdown_texts = 0
    html_texts = 0
    
    for line in lines:
        if 'text = ' in line or 'caption = ' in line:
            if '**' in line or '*' in line:
                markdown_texts += 1
            if '<b>' in line or '<i>' in line or '<u>' in line:
                html_texts += 1
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   Markdown —Ç–µ–∫—Å—Ç–æ–≤: {markdown_texts}")
    print(f"   HTML —Ç–µ–∫—Å—Ç–æ–≤: {html_texts}")
    print(f"   ParseMode.MARKDOWN: {markdown_modes}")
    print(f"   ParseMode.HTML: {html_modes}")
    
    if markdown_texts > 0 and markdown_modes > 0:
        print("‚úÖ Markdown —Ç–µ–∫—Å—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π parse mode")
        print("   –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç ** –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Telegram")
    elif markdown_texts > 0 and html_modes > 0:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: Markdown —Ç–µ–∫—Å—Ç—ã —Å HTML parse mode")
    else:
        print("‚ùì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—è—Å–Ω–∞")

if __name__ == "__main__":
    success = test_political_template()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–û–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –®–ê–ë–õ–û–ù–ê –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("   –ö–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å ParseMode.MARKDOWN")
        print("   Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å ** –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Telegram")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")