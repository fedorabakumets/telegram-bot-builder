#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º: –ø–æ—á–µ–º—É inline –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö
"""

import requests
import json

def test_template_vs_custom_difference():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏"""
    print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –®–ê–ë–õ–û–ù–ù–´–• –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ö–û–ú–ê–ù–î")
    print("=" * 55)
    
    # 1. –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å —à–∞–±–ª–æ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç)
    template_bot = {
        "nodes": [
            {
                "id": "start-1",  # –®–∞–±–ª–æ–Ω–Ω—ã–π ID
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —à–∞–±–ª–æ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "help-1"  # –®–∞–±–ª–æ–Ω–Ω—ã–π ID
                        }
                    ]
                }
            },
            {
                "id": "help-1",  # –®–∞–±–ª–æ–Ω–Ω—ã–π ID
                "type": "command",
                "position": {"x": 300, "y": 100},
                "data": {
                    "command": "/help",
                    "messageText": "–≠—Ç–æ –ø–æ–º–æ—â—å –æ—Ç —à–∞–±–ª–æ–Ω–∞",
                    "keyboardType": "none",
                    "buttons": []
                }
            }
        ],
        "connections": []
    }
    
    # 2. –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç?)
    custom_bot = {
        "nodes": [
            {
                "id": "start-1",  # –®–∞–±–ª–æ–Ω–Ω—ã–π ID  
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-custom-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "AbC123XyZ789Random"  # –°–ª—É—á–∞–π–Ω—ã–π ID
                        }
                    ]
                }
            },
            {
                "id": "AbC123XyZ789Random",  # –°–ª—É—á–∞–π–Ω—ã–π ID
                "type": "command",
                "position": {"x": 300, "y": 100},
                "data": {
                    "command": "/help",
                    "messageText": "–≠—Ç–æ –ø–æ–º–æ—â—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "keyboardType": "none", 
                    "buttons": []
                }
            }
        ],
        "connections": []
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    results = {}
    
    for name, bot_data in [("–®–∞–±–ª–æ–Ω–Ω—ã–π", template_bot), ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", custom_bot)]:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {name.lower()} –±–æ—Ç...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            response = requests.post('http://localhost:5000/api/projects', 
                                   json={
                                       "name": f"–¢–µ—Å—Ç {name.lower()} –∫–æ–º–∞–Ω–¥",
                                       "description": f"–¢–µ—Å—Ç {name.lower()} inline –∫–Ω–æ–ø–æ–∫",
                                       "data": bot_data
                                   })
            
            if response.status_code == 201:
                project_id = response.json()['id']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
                export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
                
                if export_response.status_code == 200:
                    code = export_response.json()['code']
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
                    analysis = analyze_generated_code(code, name)
                    results[name] = analysis
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    filename = f"generated_{name.lower()}_test.py"
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(code)
                    print(f"‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                    
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("-" * 30)
    
    if len(results) == 2:
        template_result = results["–®–∞–±–ª–æ–Ω–Ω—ã–π"]
        custom_result = results["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"]
        
        print(f"–®–∞–±–ª–æ–Ω–Ω—ã–π –±–æ—Ç:")
        print(f"  - Inline –∫–Ω–æ–ø–∫–∏: {template_result['inline_buttons']}")
        print(f"  - Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {template_result['callback_handlers']}")
        print(f"  - –í–∞–ª–∏–¥–Ω—ã–µ callback_data: {template_result['valid_callbacks']}")
        print(f"  - –ü—É—Å—Ç—ã–µ callback_data: {template_result['empty_callbacks']}")
        
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç:")
        print(f"  - Inline –∫–Ω–æ–ø–∫–∏: {custom_result['inline_buttons']}")
        print(f"  - Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {custom_result['callback_handlers']}")
        print(f"  - –í–∞–ª–∏–¥–Ω—ã–µ callback_data: {custom_result['valid_callbacks']}")
        print(f"  - –ü—É—Å—Ç—ã–µ callback_data: {custom_result['empty_callbacks']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        if (template_result['callback_handlers'] > 0 and 
            custom_result['callback_handlers'] > 0 and
            template_result['empty_callbacks'] == 0 and
            custom_result['empty_callbacks'] == 0):
            print(f"\n‚úÖ –û–ë–ê –í–ê–†–ò–ê–ù–¢–ê –í–´–ì–õ–Ø–î–Ø–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
            print("–ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–æ–¥–∞")
        else:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–´ –†–ê–ó–õ–ò–ß–ò–Ø!")
            if custom_result['empty_callbacks'] > 0:
                print("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –∏–º–µ–µ—Ç –ø—É—Å—Ç—ã–µ callback_data")
            if custom_result['callback_handlers'] == 0:
                print("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")

def analyze_generated_code(code, bot_type):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"""
    return {
        'inline_buttons': code.count('InlineKeyboardBuilder()'),
        'callback_handlers': code.count('@dp.callback_query'),
        'empty_callbacks': code.count('callback_data=""'),
        'valid_callbacks': len([line for line in code.split('\n') 
                               if 'callback_data=' in line and 'callback_data=""' not in line]),
        'syntax_valid': check_syntax(code)
    }

def check_syntax(code):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python –∫–æ–¥–∞"""
    try:
        compile(code, '<string>', 'exec')
        return True
    except SyntaxError as e:
        print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    test_template_vs_custom_difference()

if __name__ == "__main__":
    main()