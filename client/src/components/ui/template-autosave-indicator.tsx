import React from 'react';
import { Clock, Save, CheckCircle, AlertCircle, Loader2, Sparkles } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { cn } from '@/lib/utils';

interface TemplateAutoSaveIndicatorProps {
  isSaving: boolean;
  isCreating: boolean;
  lastSaved: Date | null;
  hasUnsavedChanges: boolean;
  templateId: number | null;
  className?: string;
  showLabel?: boolean;
  instantMode?: boolean;
}

export function TemplateAutoSaveIndicator({
  isSaving,
  isCreating,
  lastSaved,
  hasUnsavedChanges,
  templateId,
  className,
  showLabel = true,
  instantMode = false
}: TemplateAutoSaveIndicatorProps) {
  const formatTime = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    
    if (diff < 60000) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ'; // –º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`; // –º–µ–Ω–µ–µ —á–∞—Å–∞
    return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
  };

  const getStatus = () => {
    if (isCreating) {
      return {
        icon: <Sparkles className="h-3 w-3 opacity-70" />,
        text: '–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...',
        variant: 'secondary' as const,
        color: 'text-blue-600 dark:text-blue-400',
        bgColor: 'bg-blue-50 dark:bg-blue-950/30'
      };
    }
    
    if (isSaving) {
      return {
        icon: <Loader2 className="h-3 w-3 opacity-70" />,
        text: templateId ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...',
        variant: 'secondary' as const,
        color: 'text-orange-600 dark:text-orange-400',
        bgColor: 'bg-orange-50 dark:bg-orange-950/30'
      };
    }
    
    if (hasUnsavedChanges) {
      return {
        icon: <AlertCircle className="h-3 w-3" />,
        text: instantMode ? '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è',
        variant: 'destructive' as const,
        color: 'text-amber-600 dark:text-amber-400',
        bgColor: 'bg-amber-50 dark:bg-amber-950/30'
      };
    }
    
    if (lastSaved) {
      return {
        icon: <CheckCircle className="h-3 w-3" />,
        text: templateId ? '–®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω' : '–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        variant: 'default' as const,
        color: 'text-green-600 dark:text-green-400',
        bgColor: 'bg-green-50 dark:bg-green-950/30'
      };
    }
    
    return {
      icon: <Save className="h-3 w-3" />,
      text: '–ì–æ—Ç–æ–≤ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é',
      variant: 'outline' as const,
      color: 'text-muted-foreground',
      bgColor: 'bg-muted/30'
    };
  };

  const status = getStatus();
  
  const tooltipContent = () => {
    if (isCreating) return '–°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω...';
    if (isSaving) return '–°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏—è...';
    if (hasUnsavedChanges) return instantMode ? '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ' : '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è';
    if (lastSaved) return `–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${formatTime(lastSaved)}`;
    return '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤';
  };

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div className={cn("flex items-center space-x-2", className)}>
            <Badge 
              variant={status.variant}
              className={cn(
                "flex items-center space-x-1.5 transition-all duration-300",
                status.bgColor,
                status.color,
                "border-0 shadow-sm"
              )}
            >
              {status.icon}
              {showLabel && <span className="text-xs font-medium">{status.text}</span>}
            </Badge>
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
            {isCreating && (
              <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                <div className="flex space-x-1">
                  <div className="w-1 h-1 bg-blue-400 rounded-full opacity-40"></div>
                  <div className="w-1 h-1 bg-blue-400 rounded-full opacity-60"></div>
                  <div className="w-1 h-1 bg-blue-400 rounded-full opacity-80"></div>
                </div>
              </div>
            )}
            
            {/* –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            {lastSaved && !hasUnsavedChanges && !isSaving && !isCreating && (
              <div className="flex items-center space-x-1 text-xs text-muted-foreground">
                <Clock className="h-3 w-3" />
                <span>{formatTime(lastSaved)}</span>
              </div>
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */}
            {instantMode && !isSaving && !isCreating && (
              <Badge 
                variant="outline" 
                className="text-xs px-1 py-0 h-5 bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-950/30 dark:to-pink-950/30 text-purple-600 dark:text-purple-400 border-purple-200 dark:border-purple-800"
              >
                ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
              </Badge>
            )}
          </div>
        </TooltipTrigger>
        <TooltipContent side="bottom" className="max-w-xs">
          <div className="space-y-1">
            <p className="font-medium">{tooltipContent()}</p>
            {templateId && (
              <p className="text-xs text-muted-foreground">ID —à–∞–±–ª–æ–Ω–∞: {templateId}</p>
            )}
            {instantMode && (
              <p className="text-xs text-purple-600 dark:text-purple-400">
                üöÄ –†–µ–∂–∏–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              </p>
            )}
          </div>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}

// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
export function CompactTemplateAutoSaveIndicator({
  isSaving,
  isCreating,
  hasUnsavedChanges,
  lastSaved,
  className
}: Pick<TemplateAutoSaveIndicatorProps, 'isSaving' | 'isCreating' | 'hasUnsavedChanges' | 'lastSaved' | 'className'>) {
  const getStatusIcon = () => {
    if (isCreating) return <Sparkles className="h-4 w-4 text-blue-500 opacity-70" />;
    if (isSaving) return <Loader2 className="h-4 w-4 text-orange-500 opacity-70" />;
    if (hasUnsavedChanges) return <AlertCircle className="h-4 w-4 text-amber-500" />;
    if (lastSaved) return <CheckCircle className="h-4 w-4 text-green-500" />;
    return <Save className="h-4 w-4 text-muted-foreground" />;
  };

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <div className={cn("p-1.5 rounded-full hover:bg-muted/50 transition-colors", className)}>
            {getStatusIcon()}
          </div>
        </TooltipTrigger>
        <TooltipContent>
          <p className="text-xs">
            {isCreating && "–°–æ–∑–¥–∞–µ—Ç—Å—è —à–∞–±–ª–æ–Ω..."}
            {isSaving && !isCreating && "–°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è..."}
            {hasUnsavedChanges && !isSaving && !isCreating && "–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
            {!hasUnsavedChanges && !isSaving && !isCreating && lastSaved && "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ"}
            {!hasUnsavedChanges && !isSaving && !isCreating && !lastSaved && "–ì–æ—Ç–æ–≤–æ"}
          </p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  );
}