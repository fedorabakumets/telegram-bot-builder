import { useState, useRef, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';
import { 
  Bold, 
  Italic, 
  Underline, 
  Strikethrough, 
  Code, 
  Link, 
  Type,
  Eye,
  Copy,
  Sparkles,
  Palette,
  List,
  ListOrdered,
  Quote,
  Hash,
  Smile,
  RotateCcw,
  RotateCw,
  WrapText,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Font,
  Search,
  Save,
  Download,
  Upload,
  Settings,
  Zap,
  Star,
  Heart,
  CheckSquare,
  Code2,
  Maximize,
  Minimize,
  Phone,
  AlertTriangle
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface RichTextEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  enableMarkdown?: boolean;
  onMarkdownToggle?: (enabled: boolean) => void;
  enablePresets?: boolean;
  enableAdvancedFeatures?: boolean;
}

export function RichTextEditor({
  value,
  onChange,
  placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...",
  enableMarkdown = false,
  onMarkdownToggle,
  enablePresets = true,
  enableAdvancedFeatures = true
}: RichTextEditorProps) {
  const [activeTab, setActiveTab] = useState<'edit' | 'preview'>('edit');
  const [isExpanded, setIsExpanded] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [undoStack, setUndoStack] = useState<string[]>([]);
  const [redoStack, setRedoStack] = useState<string[]>([]);
  const [savedTemplates, setSavedTemplates] = useState<{name: string, content: string}[]>([]);
  const [wordCount, setWordCount] = useState(0);
  const [charCount, setCharCount] = useState(0);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const { toast } = useToast();

  // Update counts when value changes
  useEffect(() => {
    setWordCount(value.trim().split(/\s+/).filter(word => word.length > 0).length);
    setCharCount(value.length);
  }, [value]);

  // Save to undo stack
  const saveToUndoStack = useCallback(() => {
    setUndoStack(prev => [...prev.slice(-19), value]);
    setRedoStack([]);
  }, [value]);

  const formatOptions = [
    { 
      icon: Bold, 
      name: '–ñ–∏—Ä–Ω—ã–π', 
      markdown: '**—Ç–µ–∫—Å—Ç**', 
      html: '<b>—Ç–µ–∫—Å—Ç</b>',
      description: '–í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º',
      shortcut: 'Ctrl+B',
      category: 'basic'
    },
    { 
      icon: Italic, 
      name: '–ö—É—Ä—Å–∏–≤', 
      markdown: '_—Ç–µ–∫—Å—Ç_', 
      html: '<i>—Ç–µ–∫—Å—Ç</i>',
      description: '–í—ã–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫—É—Ä—Å–∏–≤–æ–º',
      shortcut: 'Ctrl+I',
      category: 'basic'
    },
    { 
      icon: Underline, 
      name: '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π', 
      markdown: '__—Ç–µ–∫—Å—Ç__', 
      html: '<u>—Ç–µ–∫—Å—Ç</u>',
      description: '–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç',
      shortcut: 'Ctrl+U',
      category: 'basic'
    },
    { 
      icon: Strikethrough, 
      name: '–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π', 
      markdown: '~—Ç–µ–∫—Å—Ç~', 
      html: '<s>—Ç–µ–∫—Å—Ç</s>',
      description: '–ó–∞—á–µ—Ä–∫–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç',
      shortcut: 'Ctrl+Shift+X',
      category: 'basic'
    },
    { 
      icon: Code, 
      name: '–ö–æ–¥', 
      markdown: '`–∫–æ–¥`', 
      html: '<code>–∫–æ–¥</code>',
      description: '–í—ã–¥–µ–ª—è–µ—Ç –∫–æ–¥ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º',
      shortcut: 'Ctrl+E',
      category: 'basic'
    },
    { 
      icon: Link, 
      name: '–°—Å—ã–ª–∫–∞', 
      markdown: '[—Ç–µ–∫—Å—Ç](url)', 
      html: '<a href="url">—Ç–µ–∫—Å—Ç</a>',
      description: '–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',
      shortcut: 'Ctrl+K',
      category: 'basic'
    },
    { 
      icon: Code2, 
      name: '–ë–ª–æ–∫ –∫–æ–¥–∞', 
      markdown: '```\n–∫–æ–¥\n```', 
      html: '<pre><code>–∫–æ–¥</code></pre>',
      description: '–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –∫–æ–¥–∞',
      shortcut: 'Ctrl+Shift+C',
      category: 'advanced'
    },
    { 
      icon: Quote, 
      name: '–¶–∏—Ç–∞—Ç–∞', 
      markdown: '> —Ü–∏—Ç–∞—Ç–∞', 
      html: '<blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote>',
      description: '–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã',
      shortcut: 'Ctrl+Shift+Q',
      category: 'advanced'
    },
    { 
      icon: List, 
      name: '–°–ø–∏—Å–æ–∫', 
      markdown: '‚Ä¢ –ø—É–Ω–∫—Ç\n‚Ä¢ –ø—É–Ω–∫—Ç\n‚Ä¢ –ø—É–Ω–∫—Ç', 
      html: '<ul><li>–ø—É–Ω–∫—Ç</li><li>–ø—É–Ω–∫—Ç</li><li>–ø—É–Ω–∫—Ç</li></ul>',
      description: '–°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫',
      shortcut: 'Ctrl+Shift+L',
      category: 'advanced'
    },
    { 
      icon: ListOrdered, 
      name: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', 
      markdown: '1. –ø—É–Ω–∫—Ç\n2. –ø—É–Ω–∫—Ç\n3. –ø—É–Ω–∫—Ç', 
      html: '<ol><li>–ø—É–Ω–∫—Ç</li><li>–ø—É–Ω–∫—Ç</li><li>–ø—É–Ω–∫—Ç</li></ol>',
      description: '–°–æ–∑–¥–∞–µ—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫',
      shortcut: 'Ctrl+Shift+O',
      category: 'advanced'
    },
    { 
      icon: Hash, 
      name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 
      markdown: '# –ó–∞–≥–æ–ª–æ–≤–æ–∫', 
      html: '<h3>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h3>',
      description: '–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫',
      shortcut: 'Ctrl+H',
      category: 'advanced'
    }
  ];

  const messagePresets = [
    {
      name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
      icon: Smile,
      content: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ. –ö–∞–∫ –¥–µ–ª–∞?'
    },
    {
      name: '–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
      icon: Heart,
      content: '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.'
    },
    {
      name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      icon: Phone,
      content: 'üìû **–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:**\n\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n‚Ä¢ Email: support@example.com\n‚Ä¢ –°–∞–π—Ç: https://example.com'
    },
    {
      name: '–ú–µ–Ω—é',
      icon: List,
      content: 'üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:**\n\n1. –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤\n2. –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n4. –û –∫–æ–º–ø–∞–Ω–∏–∏'
    },
    {
      name: '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
      icon: CheckSquare,
      content: 'üìù **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n\n‚úÖ –®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n‚úÖ –®–∞–≥ 2: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n‚úÖ –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑'
    },
    {
      name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      icon: AlertTriangle,
      content: '‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å.'
    }
  ];

  // Undo/Redo functionality
  const undo = useCallback(() => {
    if (undoStack.length > 0) {
      const previousValue = undoStack[undoStack.length - 1];
      setRedoStack(prev => [value, ...prev.slice(0, 19)]);
      setUndoStack(prev => prev.slice(0, -1));
      onChange(previousValue);
      toast({
        title: "–û—Ç–º–µ–Ω–µ–Ω–æ",
        description: "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
      });
    }
  }, [undoStack, value, onChange, toast]);

  const redo = useCallback(() => {
    if (redoStack.length > 0) {
      const nextValue = redoStack[0];
      setUndoStack(prev => [...prev.slice(-19), value]);
      setRedoStack(prev => prev.slice(1));
      onChange(nextValue);
      toast({
        title: "–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ",
        description: "–î–µ–π—Å—Ç–≤–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
      });
    }
  }, [redoStack, value, onChange, toast]);

  // Template management
  const saveTemplate = useCallback(() => {
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:');
    if (name && value.trim()) {
      setSavedTemplates(prev => [...prev, { name, content: value }]);
      toast({
        title: "–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        description: `–®–∞–±–ª–æ–Ω "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É`
      });
    }
  }, [value, toast]);

  const loadTemplate = useCallback((template: { name: string, content: string }) => {
    saveToUndoStack();
    onChange(template.content);
    toast({
      title: "–®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω",
      description: `–ó–∞–≥—Ä—É–∂–µ–Ω —à–∞–±–ª–æ–Ω "${template.name}"`
    });
  }, [onChange, saveToUndoStack, toast]);

  // Insert preset message
  const insertPreset = (preset: typeof messagePresets[0]) => {
    saveToUndoStack();
    const newContent = value ? value + '\n\n' + preset.content : preset.content;
    onChange(newContent);
    toast({
      title: "–®–∞–±–ª–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω",
      description: `–î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω "${preset.name}"`
    });
  };

  // Keyboard shortcuts - only work with selected text like in Telegram
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.ctrlKey || e.metaKey) {
        const textarea = textareaRef.current;
        if (!textarea) return;
        
        const hasSelection = textarea.selectionStart !== textarea.selectionEnd;
        
        const format = formatOptions.find(f => {
          const shortcut = f.shortcut?.toLowerCase();
          if (!shortcut) return false;
          
          if (shortcut.includes('shift') && !e.shiftKey) return false;
          if (!shortcut.includes('shift') && e.shiftKey) return false;
          
          const key = shortcut.split('+').pop();
          return e.key.toLowerCase() === key;
        });
        
        if (format) {
          e.preventDefault();
          if (hasSelection) {
            insertFormatting(format);
          } else {
            toast({
              title: "–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç",
              description: `–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è ${format.name.toLowerCase()} —Å–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç`,
              variant: "default"
            });
          }
        } else if (e.key === 'z' && !e.shiftKey) {
          e.preventDefault();
          undo();
        } else if ((e.key === 'y') || (e.key === 'z' && e.shiftKey)) {
          e.preventDefault();
          redo();
        }
      }
    };

    const textarea = textareaRef.current;
    if (textarea) {
      textarea.addEventListener('keydown', handleKeyDown);
      return () => textarea.removeEventListener('keydown', handleKeyDown);
    }
  }, [formatOptions, undo, redo, toast]);

  const insertFormatting = (format: typeof formatOptions[0]) => {
    const textarea = textareaRef.current;
    if (!textarea) return;

    saveToUndoStack();
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = value.substring(start, end);
    
    if (!selectedText) {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ –≤ Telegram
      toast({
        title: "–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç",
        description: "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å",
        variant: "default"
      });
      return;
    }
    
    let newText = '';
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∫–∞–∫ –≤ Telegram
    if (enableMarkdown) {
      switch (format.name) {
        case '–ñ–∏—Ä–Ω—ã–π':
          newText = `**${selectedText}**`;
          break;
        case '–ö—É—Ä—Å–∏–≤':
          newText = `_${selectedText}_`;
          break;
        case '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π':
          newText = `__${selectedText}__`;
          break;
        case '–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π':
          newText = `~${selectedText}~`;
          break;
        case '–ö–æ–¥':
          newText = `\`${selectedText}\``;
          break;
        case '–ë–ª–æ–∫ –∫–æ–¥–∞':
          newText = `\`\`\`\n${selectedText}\n\`\`\``;
          break;
        case '–°—Å—ã–ª–∫–∞':
          const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL:') || 'https://example.com';
          newText = `[${selectedText}](${url})`;
          break;
        case '–¶–∏—Ç–∞—Ç–∞':
          newText = `> ${selectedText}`;
          break;
        case '–ó–∞–≥–æ–ª–æ–≤–æ–∫':
          newText = `# ${selectedText}`;
          break;
        default:
          newText = selectedText;
      }
    } else {
      switch (format.name) {
        case '–ñ–∏—Ä–Ω—ã–π':
          newText = `<b>${selectedText}</b>`;
          break;
        case '–ö—É—Ä—Å–∏–≤':
          newText = `<i>${selectedText}</i>`;
          break;
        case '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π':
          newText = `<u>${selectedText}</u>`;
          break;
        case '–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π':
          newText = `<s>${selectedText}</s>`;
          break;
        case '–ö–æ–¥':
          newText = `<code>${selectedText}</code>`;
          break;
        case '–ë–ª–æ–∫ –∫–æ–¥–∞':
          newText = `<pre><code>${selectedText}</code></pre>`;
          break;
        case '–°—Å—ã–ª–∫–∞':
          const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL:') || 'https://example.com';
          newText = `<a href="${url}">${selectedText}</a>`;
          break;
        case '–¶–∏—Ç–∞—Ç–∞':
          newText = `<blockquote>${selectedText}</blockquote>`;
          break;
        case '–ó–∞–≥–æ–ª–æ–≤–æ–∫':
          newText = `<h3>${selectedText}</h3>`;
          break;
        default:
          newText = selectedText;
      }
    }
    
    const newValue = value.substring(0, start) + newText + value.substring(end);
    onChange(newValue);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    setTimeout(() => {
      textarea.setSelectionRange(start + newText.length, start + newText.length);
      textarea.focus();
    }, 0);

    toast({
      title: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ",
      description: `–ü—Ä–∏–º–µ–Ω–µ–Ω–æ: ${format.name}`,
      variant: "default"
    });
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!",
        description: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
      });
    } catch (err) {
      console.error('Failed to copy text: ', err);
    }
  };

  const renderPreview = () => {
    if (!enableMarkdown) {
      // For HTML mode, just show the raw text with HTML tags
      return (
        <div className="p-3 bg-muted/50 rounded-lg border min-h-[100px] whitespace-pre-wrap">
          <div className="text-sm text-muted-foreground mb-2">HTML –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</div>
          <div dangerouslySetInnerHTML={{ __html: value }} />
        </div>
      );
    }
    
    // For Markdown mode, convert common markdown to HTML for preview
    let htmlContent = value
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/_(.*?)_/g, '<em>$1</em>')
      .replace(/__(.*?)__/g, '<u>$1</u>')
      .replace(/~(.*?)~/g, '<s>$1</s>')
      .replace(/`(.*?)`/g, '<code>$1</code>')
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>')
      .replace(/\n/g, '<br>');
    
    return (
      <div className="p-3 bg-muted/50 rounded-lg border min-h-[100px]">
        <div className="text-sm text-muted-foreground mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</div>
        <div dangerouslySetInnerHTML={{ __html: htmlContent }} />
      </div>
    );
  };

  // Filter formats based on search
  const filteredFormats = formatOptions.filter(format => 
    searchTerm === '' || format.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const basicFormats = filteredFormats.filter(f => f.category === 'basic');
  const advancedFormats = filteredFormats.filter(f => f.category === 'advanced');

  return (
    <Card className={`w-full transition-all duration-300 ${isExpanded ? 'col-span-2' : ''}`}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <CardTitle className="text-sm flex items-center gap-2">
            <Sparkles className="w-4 h-4 text-blue-500" />
            –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            {charCount > 0 && (
              <Badge variant="secondary" className="text-xs">
                {wordCount} —Å–ª–æ–≤ ‚Ä¢ {charCount} —Å–∏–º–≤–æ–ª–æ–≤
              </Badge>
            )}
          </CardTitle>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(!isExpanded)}
              className="h-8 w-8 p-0"
              title={isExpanded ? "–°–≤–µ—Ä–Ω—É—Ç—å" : "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"}
            >
              {isExpanded ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />}
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => onMarkdownToggle?.(!enableMarkdown)}
              className="text-xs"
            >
              {enableMarkdown ? 'Markdown' : 'HTML'}
            </Button>
          </div>
        </div>

        {/* Enhanced toolbar with undo/redo and actions */}
        <div className="flex items-center gap-2 pt-2">
          <div className="flex items-center gap-1">
            <Button
              variant="ghost"
              size="sm"
              onClick={undo}
              disabled={undoStack.length === 0}
              className="h-8 w-8 p-0"
              title="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl+Z)"
            >
              <RotateCcw className="w-3 h-3" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={redo}
              disabled={redoStack.length === 0}
              className="h-8 w-8 p-0"
              title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y)"
            >
              <RotateCw className="w-3 h-3" />
            </Button>
          </div>
          
          <Separator orientation="vertical" className="h-6" />
          
          <Button
            variant="ghost"
            size="sm"
            onClick={saveTemplate}
            disabled={!value.trim()}
            className="h-8 px-2 text-xs"
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —à–∞–±–ª–æ–Ω"
          >
            <Save className="w-3 h-3 mr-1" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={() => copyToClipboard(value)}
            disabled={!value.trim()}
            className="h-8 px-2 text-xs"
            title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç"
          >
            <Copy className="w-3 h-3 mr-1" />
            –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
          </Button>

          {enableAdvancedFeatures && (
            <div className="flex items-center gap-1 ml-auto">
              <Input
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="–ü–æ–∏—Å–∫..."
                className="h-8 w-24 text-xs"
              />
              <Search className="w-3 h-3 text-muted-foreground -ml-6" />
            </div>
          )}
        </div>
      </CardHeader>
      
      <CardContent className="space-y-4">
        {/* Message Presets */}
        {enablePresets && (
          <div className="space-y-3">
            <Label className="text-xs font-medium flex items-center gap-2">
              <Sparkles className="w-3 h-3" />
              –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            </Label>
            <div className="grid grid-cols-2 gap-2">
              {messagePresets.map((preset) => (
                <Button
                  key={preset.name}
                  variant="outline"
                  size="sm"
                  onClick={() => insertPreset(preset)}
                  className="justify-start gap-2 h-9 text-xs"
                  title={preset.content.slice(0, 50) + '...'}
                >
                  <preset.icon className="w-3 h-3 text-blue-500" />
                  {preset.name}
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* Basic Formatting Toolbar */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <Label className="text-xs font-medium flex items-center gap-2">
              <Type className="w-3 h-3" />
              –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            </Label>
            <Badge variant="secondary" className="text-xs">
              üìù –í—ã–¥–µ–ª–∏—Ç–µ ‚Üí –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
            </Badge>
          </div>
          
          <div className="bg-blue-50 dark:bg-blue-950/30 rounded-lg p-2 mb-3">
            <div className="text-xs text-blue-700 dark:text-blue-300 flex items-center gap-2">
              <span>üí°</span>
              <span>–ö–∞–∫ –≤ Telegram: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
            </div>
          </div>
          
          <div className="grid grid-cols-3 gap-2">
            {basicFormats.map((format) => (
              <Button
                key={format.name}
                variant="outline"
                size="sm"
                onClick={() => insertFormatting(format)}
                className="justify-start gap-2 h-8 text-xs hover:bg-blue-50 dark:hover:bg-blue-950/50"
                title={`–í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è (${format.shortcut})`}
              >
                <format.icon className="w-3 h-3" />
                {format.name}
              </Button>
            ))}
          </div>
        </div>

        {/* Advanced Formatting */}
        {enableAdvancedFeatures && advancedFormats.length > 0 && (
          <div className="space-y-3">
            <Label className="text-xs font-medium flex items-center gap-2">
              <Settings className="w-3 h-3" />
              –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            </Label>
            <div className="grid grid-cols-2 gap-2">
              {advancedFormats.map((format) => (
                <Button
                  key={format.name}
                  variant="outline"
                  size="sm"
                  onClick={() => insertFormatting(format)}
                  className="justify-start gap-2 h-8 text-xs"
                  title={`${format.description} (${format.shortcut})`}
                >
                  <format.icon className="w-3 h-3" />
                  {format.name}
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* Saved Templates */}
        {savedTemplates.length > 0 && (
          <div className="space-y-3">
            <Label className="text-xs font-medium flex items-center gap-2">
              <Star className="w-3 h-3" />
              –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            </Label>
            <ScrollArea className="h-20">
              <div className="space-y-1">
                {savedTemplates.map((template, index) => (
                  <div key={index} className="flex items-center gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => loadTemplate(template)}
                      className="flex-1 justify-start text-xs h-7"
                    >
                      {template.name}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setSavedTemplates(prev => prev.filter((_, i) => i !== index))}
                      className="h-7 w-7 p-0 text-red-500"
                    >
                      √ó
                    </Button>
                  </div>
                ))}
              </div>
            </ScrollArea>
          </div>
        )}

        <Separator />

        {/* Enhanced Text Editor with Tabs */}
        <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'edit' | 'preview')}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="edit" className="flex items-center gap-2">
              <Type className="w-3 h-3" />
              –†–µ–¥–∞–∫—Ç–æ—Ä {charCount > 0 && <Badge variant="outline" className="text-xs">{charCount}</Badge>}
            </TabsTrigger>
            <TabsTrigger value="preview" className="flex items-center gap-2">
              <Eye className="w-3 h-3" />
              –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            </TabsTrigger>
          </TabsList>

          <TabsContent value="edit" className="space-y-3">
            <div className="relative">
              <Textarea
                ref={textareaRef}
                value={value}
                onChange={(e) => {
                  saveToUndoStack();
                  onChange(e.target.value);
                }}
                placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è... 
üìù –°–æ–≤–µ—Ç: –í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—à–µ!"
                className={`min-h-[120px] resize-none transition-all duration-200 ${
                  isExpanded ? 'min-h-[200px]' : ''
                }`}
                rows={isExpanded ? 10 : 6}
                onSelect={(e) => {
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏ –∫–∞–∫ –≤ Telegram
                  const textarea = e.target as HTMLTextAreaElement;
                  if (textarea && textarea.selectionStart !== textarea.selectionEnd) {
                    const selectedText = value.substring(textarea.selectionStart, textarea.selectionEnd);
                    if (selectedText.length > 0 && selectedText.length <= 200) {
                      // Debounce –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                      setTimeout(() => {
                        if (textarea.selectionStart !== textarea.selectionEnd) {
                          const currentSelection = value.substring(textarea.selectionStart, textarea.selectionEnd);
                          if (currentSelection === selectedText) {
                            toast({
                              title: `‚úÖ –í—ã–¥–µ–ª–µ–Ω–æ: "${selectedText.slice(0, 20)}${selectedText.length > 20 ? '...' : ''}"`,
                              description: "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ B/I/U –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –≤—ã—à–µ",
                              duration: 3000
                            });
                          }
                        }
                      }, 500);
                    }
                  }
                }}
              />
              
              {/* Character count overlay */}
              {charCount > 0 && (
                <div className="absolute bottom-2 right-2 text-xs text-muted-foreground bg-background/80 px-2 py-1 rounded">
                  {charCount}/4096
                </div>
              )}
              
              {/* Selection helper overlay */}
              {value && (
                <div className="absolute top-2 left-2 text-xs text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-950/50 px-2 py-1 rounded">
                  üí° –í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                </div>
              )}
            </div>
            
            <div className="flex items-center justify-between text-xs text-muted-foreground">
              <div className="flex items-center gap-4">
                <span>
                  {enableMarkdown ? 'üìù Markdown' : 'üè∑Ô∏è HTML'} —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                </span>
                <span>üìä {wordCount} —Å–ª–æ–≤, {charCount} —Å–∏–º–≤–æ–ª–æ–≤</span>
              </div>
              <div className="flex items-center gap-2">
                <span>‚å®Ô∏è –í—ã–¥–µ–ª–µ–Ω–∏–µ + Ctrl+B/I/U</span>
              </div>
            </div>
            
            {/* Usage instructions */}
            <div className="bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950/20 dark:to-blue-950/20 rounded-lg p-3 border border-green-200 dark:border-green-800">
              <div className="text-xs space-y-1">
                <div className="font-medium text-green-700 dark:text-green-300 mb-2">üéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</div>
                <div className="space-y-1 text-green-600 dark:text-green-400">
                  <div>1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç</div>
                  <div>2Ô∏è‚É£ –í—ã–¥–µ–ª–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –º—ã—à–∫–æ–π</div>
                  <div>3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
                  <div className="text-blue-600 dark:text-blue-400 mt-2">‚ö° –ë—ã—Å—Ç—Ä–æ: Ctrl+B (–∂–∏—Ä–Ω—ã–π), Ctrl+I (–∫—É—Ä—Å–∏–≤), Ctrl+U (–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π)</div>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="preview" className="space-y-3">
            <div className="flex items-center justify-between mb-2">
              <Label className="text-xs font-medium">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∫ –≤ Telegram</Label>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="text-xs">
                  {enableMarkdown ? 'Markdown' : 'HTML'}
                </Badge>
                {charCount > 4096 && (
                  <Badge variant="destructive" className="text-xs">
                    –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                  </Badge>
                )}
              </div>
            </div>
            {renderPreview()}
            
            {charCount > 0 && (
              <div className="flex items-center gap-4 text-xs text-muted-foreground pt-2 border-t">
                <span>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {wordCount} —Å–ª–æ–≤, {charCount} —Å–∏–º–≤–æ–ª–æ–≤</span>
                <span>üì± –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {charCount <= 4096 ? '‚úÖ' : '‚ùå'} Telegram</span>
              </div>
            )}
          </TabsContent>
        </Tabs>

        {/* Enhanced Quick Reference with expandable content */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/30 dark:to-purple-950/30 rounded-lg p-3 space-y-2 border border-blue-200 dark:border-blue-800">
          <div className="flex items-center justify-between">
            <Label className="text-xs font-medium flex items-center gap-2">
              <Zap className="w-3 h-3 text-blue-500" />
              –ë—ã—Å—Ç—Ä–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
            </Label>
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => copyToClipboard(formatOptions.map(f => 
                  `${f.name}: ${enableMarkdown ? f.markdown : f.html}`
                ).join('\n'))}
                className="h-6 px-2"
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
              >
                <Copy className="w-3 h-3" />
              </Button>
            </div>
          </div>
          
          <div className="grid grid-cols-1 gap-1 text-xs">
            {(searchTerm ? filteredFormats : formatOptions).slice(0, 6).map((format) => (
              <div key={format.name} className="flex items-center justify-between py-1">
                <div className="flex items-center gap-2">
                  <format.icon className="w-3 h-3 text-blue-500" />
                  <span className="text-muted-foreground">{format.name}:</span>
                </div>
                <code className="bg-white dark:bg-gray-800 px-2 py-1 rounded text-xs border">
                  {enableMarkdown ? format.markdown : format.html}
                </code>
              </div>
            ))}
          </div>
          
          {formatOptions.length > 6 && (
            <div className="text-center pt-1">
              <Button
                variant="ghost"
                size="sm"
                className="text-xs h-6"
                onClick={() => setSearchTerm('')}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ ({formatOptions.length}) –∫–æ–º–∞–Ω–¥
              </Button>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}