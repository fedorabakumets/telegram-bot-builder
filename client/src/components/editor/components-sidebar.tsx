import { ComponentDefinition, BotTemplate, BotData } from '@shared/schema';
import { cn } from '@/lib/utils';
import { useState } from 'react';
import { Link } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Crown, Star, User, ExternalLink } from 'lucide-react';

interface ComponentsSidebarProps {
  onComponentDrag: (component: ComponentDefinition) => void;
  onLoadTemplate?: () => void;
  onSelectTemplate?: (template: BotTemplate) => void;
}

const components: ComponentDefinition[] = [
  {
    id: 'text-message',
    name: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ Markdown',
    icon: 'fas fa-comment',
    color: 'bg-blue-100 text-blue-600',
    type: 'message',
    defaultData: {
      messageText: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'photo-message',
    name: '–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º',
    description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –æ–ø–∏—Å–∞–Ω–∏–µ',
    icon: 'fas fa-image',
    color: 'bg-green-100 text-green-600',
    type: 'photo',
    defaultData: {
      messageText: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      imageUrl: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ç–æ
      sendAsDocument: false,
      hasContentProtection: true,
      disableWebPagePreview: false
    }
  },
  {
    id: 'reply-keyboard',
    name: 'Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
    description: '–ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
    icon: 'fas fa-keyboard',
    color: 'bg-purple-100 text-purple-600',
    type: 'keyboard',
    defaultData: {
      messageText: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboardType: 'reply',
      buttons: [
        { id: 'btn-1', text: '–ö–Ω–æ–ø–∫–∞ 1', action: 'goto', target: '' },
        { id: 'btn-2', text: '–ö–Ω–æ–ø–∫–∞ 2', action: 'goto', target: '' }
      ],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'inline-keyboard',
    name: 'Inline –∫–Ω–æ–ø–∫–∏',
    description: '–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
    icon: 'fas fa-mouse',
    color: 'bg-amber-100 text-amber-600',
    type: 'keyboard',
    defaultData: {
      messageText: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboardType: 'inline',
      buttons: [
        { id: 'btn-1', text: '–ö–Ω–æ–ø–∫–∞ 1', action: 'goto', target: '' },
        { id: 'btn-2', text: '–ö–Ω–æ–ø–∫–∞ 2', action: 'goto', target: '' }
      ],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'condition',
    name: '–£—Å–ª–æ–≤–∏–µ',
    description: 'If/else –ª–æ–≥–∏–∫–∞',
    icon: 'fas fa-code-branch',
    color: 'bg-red-100 text-red-600',
    type: 'condition',
    defaultData: {
      messageText: '–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'user-input',
    name: '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö',
    description: '–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
    icon: 'fas fa-edit',
    color: 'bg-cyan-100 text-cyan-600',
    type: 'input',
    defaultData: {
      messageText: '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'start-command',
    name: '/start –∫–æ–º–∞–Ω–¥–∞',
    description: '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞',
    icon: 'fas fa-play',
    color: 'bg-green-100 text-green-600',
    type: 'start',
    defaultData: {
      command: '/start',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
      messageText: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'help-command',
    name: '/help –∫–æ–º–∞–Ω–¥–∞',
    description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
    icon: 'fas fa-question-circle',
    color: 'bg-blue-100 text-blue-600',
    type: 'command',
    defaultData: {
      command: '/help',
      description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
      messageText: 'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      keyboardType: 'none',
      buttons: [],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'settings-command',
    name: '/settings –∫–æ–º–∞–Ω–¥–∞',
    description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
    icon: 'fas fa-cog',
    color: 'bg-gray-100 text-gray-600',
    type: 'command',
    defaultData: {
      command: '/settings',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
      messageText: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:',
      keyboardType: 'inline',
      buttons: [
        { id: 'btn-1', text: 'üìã –Ø–∑—ã–∫', action: 'command', target: '/language' },
        { id: 'btn-2', text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', action: 'command', target: '/notifications' }
      ],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'menu-command',
    name: '/menu –∫–æ–º–∞–Ω–¥–∞',
    description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    icon: 'fas fa-bars',
    color: 'bg-purple-100 text-purple-600',
    type: 'command',
    defaultData: {
      command: '/menu',
      description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      messageText: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      keyboardType: 'reply',
      buttons: [
        { id: 'btn-1', text: 'üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', action: 'command', target: '/info' },
        { id: 'btn-2', text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', action: 'command', target: '/settings' },
        { id: 'btn-3', text: '‚ùì –ü–æ–º–æ—â—å', action: 'command', target: '/help' },
        { id: 'btn-4', text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', action: 'command', target: '/support' }
      ],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'custom-command',
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞',
    description: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞',
    icon: 'fas fa-terminal',
    color: 'bg-indigo-100 text-indigo-600',
    type: 'command',
    defaultData: {
      command: '/custom',
      description: '–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞',
      messageText: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  }
];

const componentCategories = [
  {
    title: '–°–æ–æ–±—â–µ–Ω–∏—è',
    components: components.filter(c => ['message', 'photo'].includes(c.type))
  },
  {
    title: '–ö–Ω–æ–ø–∫–∏',
    components: components.filter(c => c.type === 'keyboard')
  },
  {
    title: '–õ–æ–≥–∏–∫–∞',
    components: components.filter(c => ['condition', 'input'].includes(c.type))
  },
  {
    title: '–ö–æ–º–∞–Ω–¥—ã',
    components: components.filter(c => ['start', 'command'].includes(c.type))
  }
];

export function ComponentsSidebar({ onComponentDrag, onLoadTemplate, onSelectTemplate }: ComponentsSidebarProps) {
  const [currentTab, setCurrentTab] = useState<'elements' | 'my-templates' | 'templates'>('elements');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã
  const { data: myTemplates = [], isLoading: isMyTemplatesLoading } = useQuery<BotTemplate[]>({
    queryKey: ['/api/templates/category/custom'],
    enabled: currentTab === 'my-templates'
  });

  const handleDragStart = (e: React.DragEvent, component: ComponentDefinition) => {
    e.dataTransfer.setData('application/json', JSON.stringify(component));
    onComponentDrag(component);
  };

  const handleSelectTemplate = (template: BotTemplate) => {
    if (onSelectTemplate) {
      onSelectTemplate(template);
    }
  };

  return (
    <aside className="w-full h-full bg-background border-r border-border flex flex-col">
      {/* Sidebar Header */}
      <div className="p-4 border-b border-border">
        <h2 className="text-sm font-semibold text-foreground mb-3">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
        <div className="flex space-x-1 bg-muted rounded-lg p-1">
          <button 
            onClick={() => setCurrentTab('elements')}
            className={`flex-1 px-2 py-1.5 text-xs font-medium rounded-md transition-colors ${
              currentTab === 'elements' 
                ? 'bg-background text-foreground shadow-sm' 
                : 'text-muted-foreground hover:text-foreground'
            }`}
          >
            –≠–ª–µ–º–µ–Ω—Ç—ã
          </button>
          <button 
            onClick={() => setCurrentTab('my-templates')}
            className={`flex-1 px-2 py-1.5 text-xs font-medium rounded-md transition-colors ${
              currentTab === 'my-templates' 
                ? 'bg-background text-foreground shadow-sm' 
                : 'text-muted-foreground hover:text-foreground'
            }`}
          >
            –ú–æ–∏
          </button>
          <Link href="/templates">
            <button 
              className="flex-1 px-2 py-1.5 text-xs font-medium rounded-md transition-colors text-muted-foreground hover:text-foreground hover:bg-background"
            >
              –í—Å–µ
            </button>
          </Link>
        </div>
      </div>
      
      {/* Content Area */}
      <div className="flex-1 overflow-y-auto">
        {currentTab === 'elements' && (
          <div className="p-4 space-y-4">
            {componentCategories.map((category) => (
              <div key={category.title}>
                <h3 className="text-xs font-medium text-muted-foreground uppercase tracking-wider mb-2">
                  {category.title}
                </h3>
                <div className="space-y-2">
                  {category.components.map((component) => (
                    <div
                      key={component.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, component)}
                      className="flex items-center p-3 bg-muted/50 hover:bg-muted rounded-lg cursor-move transition-colors"
                    >
                      <div className={cn("w-8 h-8 rounded-lg flex items-center justify-center mr-3", component.color)}>
                        <i className={`${component.icon} text-sm`}></i>
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-foreground">{component.name}</p>
                        <p className="text-xs text-muted-foreground">{component.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )}

        {currentTab === 'my-templates' && (
          <div className="p-4">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-sm font-medium text-foreground">–ú–æ–∏ —à–∞–±–ª–æ–Ω—ã</h3>
              <Badge variant="secondary" className="text-xs">
                {myTemplates.length}
              </Badge>
            </div>
            
            {isMyTemplatesLoading ? (
              <div className="space-y-3">
                {[1, 2, 3].map((i) => (
                  <div key={i} className="animate-pulse">
                    <div className="h-16 bg-muted rounded-lg"></div>
                  </div>
                ))}
              </div>
            ) : myTemplates.length === 0 ? (
              <div className="text-center py-8">
                <User className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
                <p className="text-sm text-muted-foreground mb-2">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤</p>
                <p className="text-xs text-muted-foreground">–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –∫–∞–∫ —à–∞–±–ª–æ–Ω</p>
              </div>
            ) : (
              <ScrollArea className="h-full">
                <div className="space-y-2">
                  {myTemplates.map((template) => (
                    <div
                      key={template.id}
                      onClick={() => handleSelectTemplate(template)}
                      className="group p-3 bg-muted/50 hover:bg-muted rounded-lg cursor-pointer transition-colors border border-transparent hover:border-border"
                    >
                      <div className="flex items-start justify-between mb-2">
                        <h4 className="text-sm font-medium text-foreground group-hover:text-primary transition-colors line-clamp-1">
                          {template.name}
                        </h4>
                        <div className="flex items-center gap-1 ml-2 flex-shrink-0">
                          {template.featured && (
                            <Crown className="h-3 w-3 text-yellow-500" />
                          )}
                          {template.rating && template.rating > 0 && (
                            <div className="flex items-center gap-1">
                              <Star className="h-3 w-3 text-yellow-500 fill-current" />
                              <span className="text-xs text-muted-foreground">
                                {template.rating.toFixed(1)}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      {template.description && (
                        <p className="text-xs text-muted-foreground mb-2 line-clamp-2">
                          {template.description}
                        </p>
                      )}
                      
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          {template.difficulty && (
                            <Badge 
                              variant="outline" 
                              className={cn(
                                "text-xs",
                                template.difficulty === 'easy' && "border-green-200 text-green-700 dark:border-green-800 dark:text-green-300",
                                template.difficulty === 'medium' && "border-yellow-200 text-yellow-700 dark:border-yellow-800 dark:text-yellow-300",
                                template.difficulty === 'hard' && "border-red-200 text-red-700 dark:border-red-800 dark:text-red-300"
                              )}
                            >
                              {template.difficulty === 'easy' && '–õ–µ–≥–∫–∏–π'}
                              {template.difficulty === 'medium' && '–°—Ä–µ–¥–Ω–∏–π'}
                              {template.difficulty === 'hard' && '–°–ª–æ–∂–Ω—ã–π'}
                            </Badge>
                          )}
                          {template.useCount && template.useCount > 0 && (
                            <span className="text-xs text-muted-foreground">
                              {template.useCount} –∏—Å–ø.
                            </span>
                          )}
                        </div>
                        
                        <ExternalLink className="h-3 w-3 text-muted-foreground group-hover:text-primary transition-colors" />
                      </div>
                    </div>
                  ))}
                </div>
              </ScrollArea>
            )}
            
            <div className="mt-4 pt-4 border-t border-border">
              <Link href="/templates?tab=my-templates">
                <Button variant="outline" size="sm" className="w-full text-xs">
                  <ExternalLink className="h-3 w-3 mr-1" />
                  –û—Ç–∫—Ä—ã—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ
                </Button>
              </Link>
            </div>
          </div>
        )}
      </div>
    </aside>
  );
}
