import { ComponentDefinition, BotProject } from '@shared/schema';
import { cn } from '@/lib/utils';
import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { SheetsManager } from '@/utils/sheets-manager';

import QuickLayoutSwitcher from '@/components/layout/quick-layout-switcher';
import DragLayoutManager from '@/components/layout/drag-layout-manager';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';

import { Layout, Settings, Grid, Home, Plus, Edit, Trash2, Calendar, User, GripVertical, FileText, Copy, MoreHorizontal, ChevronDown, ChevronRight, Menu, X } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { LayoutButtons } from '@/components/layout/layout-buttons';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { useIsMobile } from '@/hooks/use-mobile';



interface ComponentsSidebarProps {
  onComponentDrag: (component: ComponentDefinition) => void;
  onComponentAdd?: (component: ComponentDefinition) => void;
  onLoadTemplate?: () => void;
  onOpenLayoutCustomizer?: () => void;
  onLayoutChange?: (config: any) => void;
  onGoToProjects?: () => void;
  onProjectSelect?: (projectId: number) => void;
  currentProjectId?: number;
  headerContent?: React.ReactNode;
  sidebarContent?: React.ReactNode;
  canvasContent?: React.ReactNode;
  propertiesContent?: React.ReactNode;
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–∫–µ—Ç–æ–º
  onToggleCanvas?: () => void;
  onToggleHeader?: () => void;
  onToggleProperties?: () => void;
  onShowFullLayout?: () => void;
  canvasVisible?: boolean;
  headerVisible?: boolean;
  propertiesVisible?: boolean;
  showLayoutButtons?: boolean;
  // –ü—Ä–æ–ø—Å—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞–º–∏
  onSheetAdd?: (name: string) => void;
  onSheetDelete?: (sheetId: string) => void;
  onSheetRename?: (sheetId: string, name: string) => void;
  onSheetDuplicate?: (sheetId: string) => void;
  onSheetSelect?: (sheetId: string) => void;
  // –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
  isMobile?: boolean;
}

const components: ComponentDefinition[] = [
  {
    id: 'text-message',
    name: '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ Markdown',
    icon: 'fas fa-comment',
    color: 'bg-blue-100 text-blue-600',
    type: 'message',
    defaultData: {
      messageText: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'photo-message',
    name: '–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º',
    description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –æ–ø–∏—Å–∞–Ω–∏–µ',
    icon: 'fas fa-image',
    color: 'bg-green-100 text-green-600',
    type: 'photo',
    defaultData: {
      messageText: '–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      imageUrl: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'video-message',
    name: '–í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–í–∏–¥–µ–æ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é',
    icon: 'fas fa-video',
    color: 'bg-red-100 text-red-600',
    type: 'video',
    defaultData: {
      messageText: '–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ',
      videoUrl: '',
      mediaCaption: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'audio-message',
    name: '–ê—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é',
    icon: 'fas fa-music',
    color: 'bg-yellow-100 text-yellow-600',
    type: 'audio',
    defaultData: {
      messageText: '–û–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏–æ',
      audioUrl: '',
      mediaCaption: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'document-message',
    name: '–î–æ–∫—É–º–µ–Ω—Ç',
    description: '–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞',
    icon: 'fas fa-file',
    color: 'bg-gray-100 text-gray-600',
    type: 'document',
    defaultData: {
      messageText: '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      documentUrl: '',
      documentName: 'document.pdf',
      mediaCaption: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'sticker-message',
    name: '–°—Ç–∏–∫–µ—Ä',
    description: '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä',
    icon: 'fas fa-laugh',
    color: 'bg-pink-100 text-pink-600',
    type: 'sticker',
    defaultData: {
      messageText: '–°—Ç–∏–∫–µ—Ä',
      stickerUrl: '',
      stickerFileId: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'voice-message',
    name: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
    icon: 'fas fa-microphone',
    color: 'bg-teal-100 text-teal-600',
    type: 'voice',
    defaultData: {
      messageText: '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
      voiceUrl: '',
      duration: 0,
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'animation-message',
    name: 'GIF –∞–Ω–∏–º–∞—Ü–∏—è',
    description: '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    icon: 'fas fa-film',
    color: 'bg-orange-100 text-orange-600',
    type: 'animation',
    defaultData: {
      messageText: 'GIF –∞–Ω–∏–º–∞—Ü–∏—è',
      animationUrl: '',
      duration: 0,
      width: 0,
      height: 0,
      mediaCaption: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'location-message',
    name: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è',
    description: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç',
    icon: 'fas fa-map-marker',
    color: 'bg-green-100 text-green-600',
    type: 'location',
    defaultData: {
      messageText: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
      latitude: 55.7558,
      longitude: 37.6176,
      title: '–ú–æ—Å–∫–≤–∞',
      address: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
      foursquareId: '',
      foursquareType: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'contact-message',
    name: '–ö–æ–Ω—Ç–∞–∫—Ç',
    description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º',
    icon: 'fas fa-address-book',
    color: 'bg-blue-100 text-blue-600',
    type: 'contact',
    defaultData: {
      messageText: '–ö–æ–Ω—Ç–∞–∫—Ç',
      phoneNumber: '+7 (999) 123-45-67',
      firstName: '–ò–º—è',
      lastName: '–§–∞–º–∏–ª–∏—è',
      userId: 0,
      vcard: '',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },

  {
    id: 'reply-keyboard',
    name: 'Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
    description: '–ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
    icon: 'fas fa-keyboard',
    color: 'bg-purple-100 text-purple-600',
    type: 'keyboard',
    defaultData: {
      messageText: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboardType: 'reply',
      buttons: [
        { id: 'btn-1', text: '–ö–Ω–æ–ø–∫–∞ 1', action: 'goto', target: '' },
        { id: 'btn-2', text: '–ö–Ω–æ–ø–∫–∞ 2', action: 'goto', target: '' }
      ],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },
  {
    id: 'inline-keyboard',
    name: 'Inline –∫–Ω–æ–ø–∫–∏',
    description: '–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
    icon: 'fas fa-mouse',
    color: 'bg-amber-100 text-amber-600',
    type: 'keyboard',
    defaultData: {
      messageText: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      keyboardType: 'inline',
      buttons: [
        { id: 'btn-1', text: '–ö–Ω–æ–ø–∫–∞ 1', action: 'goto', target: '' },
        { id: 'btn-2', text: '–ö–Ω–æ–ø–∫–∞ 2', action: 'goto', target: '' }
      ],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true
    }
  },

  {
    id: 'start-command',
    name: '/start –∫–æ–º–∞–Ω–¥–∞',
    description: '–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞',
    icon: 'fas fa-play',
    color: 'bg-green-100 text-green-600',
    type: 'start',
    defaultData: {
      command: '/start',
      description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
      messageText: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'help-command',
    name: '/help –∫–æ–º–∞–Ω–¥–∞',
    description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
    icon: 'fas fa-question-circle',
    color: 'bg-blue-100 text-blue-600',
    type: 'command',
    defaultData: {
      command: '/help',
      description: '–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É',
      messageText: 'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
      keyboardType: 'none',
      buttons: [],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'settings-command',
    name: '/settings –∫–æ–º–∞–Ω–¥–∞',
    description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
    icon: 'fas fa-cog',
    color: 'bg-gray-100 text-gray-600',
    type: 'command',
    defaultData: {
      command: '/settings',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞',
      messageText: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:',
      keyboardType: 'inline',
      buttons: [
        { id: 'btn-1', text: 'üìã –Ø–∑—ã–∫', action: 'command', target: '/language' },
        { id: 'btn-2', text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', action: 'command', target: '/notifications' }
      ],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'menu-command',
    name: '/menu –∫–æ–º–∞–Ω–¥–∞',
    description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    icon: 'fas fa-bars',
    color: 'bg-purple-100 text-purple-600',
    type: 'command',
    defaultData: {
      command: '/menu',
      description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      messageText: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
      keyboardType: 'reply',
      buttons: [
        { id: 'btn-1', text: 'üìñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', action: 'command', target: '/info' },
        { id: 'btn-2', text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', action: 'command', target: '/settings' },
        { id: 'btn-3', text: '‚ùì –ü–æ–º–æ—â—å', action: 'command', target: '/help' },
        { id: 'btn-4', text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', action: 'command', target: '/support' }
      ],
      markdown: true,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'custom-command',
    name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞',
    description: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞',
    icon: 'fas fa-terminal',
    color: 'bg-indigo-100 text-indigo-600',
    type: 'command',
    defaultData: {
      command: '/custom',
      description: '–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞',
      messageText: '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
      keyboardType: 'none',
      buttons: [],
      markdown: false,
      oneTimeKeyboard: false,
      resizeKeyboard: true,
      showInMenu: true,
      isPrivateOnly: false,
      requiresAuth: false,
      adminOnly: false
    }
  },
  {
    id: 'pin-message',
    name: '–ó–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ',
    icon: 'fas fa-thumbtack',
    color: 'bg-cyan-100 text-cyan-600',
    type: 'pin_message',
    defaultData: {
      command: '/pin_message',
      targetMessageId: '',
      messageIdSource: 'last_message',
      variableName: '',
      disableNotification: false
    }
  },
  {
    id: 'unpin-message',
    name: '–û—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–°–Ω—è—Ç–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è',
    icon: 'fas fa-times',
    color: 'bg-slate-100 text-slate-600',
    type: 'unpin_message',
    defaultData: {
      command: '/unpin_message',
      targetMessageId: '',
      messageIdSource: 'last_message',
      variableName: ''
    }
  },
  {
    id: 'delete-message',
    name: '–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
    description: '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ',
    icon: 'fas fa-trash',
    color: 'bg-red-100 text-red-600',
    type: 'delete_message',
    defaultData: {
      command: '/delete_message',
      targetMessageId: '',
      messageIdSource: 'last_message',
      variableName: ''
    }
  },
  {
    id: 'ban-user',
    name: '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã',
    icon: 'fas fa-ban',
    color: 'bg-red-100 text-red-600',
    type: 'ban_user',
    defaultData: {
      command: '/ban_user',
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: '',
      reason: '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã',
      untilDate: 0
    }
  },
  {
    id: 'unban-user',
    name: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–°–Ω—è—Ç—å –±–∞–Ω —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã',
    icon: 'fas fa-user-check',
    color: 'bg-green-100 text-green-600',
    type: 'unban_user',
    defaultData: {
      command: '/unban_user',
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: ''
    }
  },
  {
    id: 'mute-user',
    name: '–ó–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
    icon: 'fas fa-volume-mute',
    color: 'bg-orange-100 text-orange-600',
    type: 'mute_user',
    defaultData: {
      command: '/mute_user',
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: '',
      duration: 3600,
      reason: '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã',
      canSendMessages: false,
      canSendMediaMessages: false,
      canSendPolls: false,
      canSendOtherMessages: false,
      canAddWebPagePreviews: false,
      canChangeGroupInfo: false,
      canInviteUsers2: false,
      canPinMessages2: false
    }
  },
  {
    id: 'unmute-user',
    name: '–°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è',
    description: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
    icon: 'fas fa-volume-up',
    color: 'bg-green-100 text-green-600',
    type: 'unmute_user',
    defaultData: {
      command: '/unmute_user',
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: ''
    }
  },
  {
    id: 'kick-user',
    name: '–ò—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    description: '–£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã',
    icon: 'fas fa-user-times',
    color: 'bg-red-100 text-red-600',
    type: 'kick_user',
    defaultData: {
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: '',
      reason: '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã'
    }
  },
  {
    id: 'promote-user',
    name: '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
    description: '–î–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    icon: 'fas fa-crown',
    color: 'bg-yellow-100 text-yellow-600',
    type: 'promote_user',
    defaultData: {
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: '',
      canChangeInfo: false,
      canDeleteMessages: true,
      canBanUsers: false,
      canInviteUsers: true,
      canPinMessages: true,
      canAddAdmins: false,
      canRestrictMembers: false,
      canPromoteMembers: false,
      canManageVideoChats: false,
      canManageTopics: false,
      isAnonymous: false
    }
  },
  {
    id: 'demote-user',
    name: '–°–Ω—è—Ç—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    description: '–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
    icon: 'fas fa-user-minus',
    color: 'bg-gray-100 text-gray-600',
    type: 'demote_user',
    defaultData: {
      targetUserId: '',
      userIdSource: 'last_message',
      userVariableName: ''
    }
  }
];

const componentCategories = [
  {
    title: '–°–æ–æ–±—â–µ–Ω–∏—è',
    components: components.filter(c => ['message', 'photo', 'video', 'audio', 'document', 'sticker', 'voice', 'animation', 'location', 'contact'].includes(c.type))
  },
  {
    title: '–ö–Ω–æ–ø–∫–∏',
    components: components.filter(c => c.type === 'keyboard')
  },
  {
    title: '–ö–æ–º–∞–Ω–¥—ã',
    components: components.filter(c => ['start', 'command'].includes(c.type))
  },
  {
    title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
    components: components.filter(c => ['pin_message', 'unpin_message', 'delete_message'].includes(c.type))
  },
  {
    title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏',
    components: components.filter(c => ['ban_user', 'unban_user', 'mute_user', 'unmute_user', 'kick_user', 'promote_user', 'demote_user'].includes(c.type))
  }
];

export function ComponentsSidebar({ 
  onComponentDrag, 
  onComponentAdd,
  onLoadTemplate, 
  onOpenLayoutCustomizer, 
  onLayoutChange,
  onGoToProjects,
  onProjectSelect,
  currentProjectId,
  headerContent,
  sidebarContent,
  canvasContent,
  propertiesContent,
  onToggleCanvas,
  onToggleHeader,
  onToggleProperties,
  onShowFullLayout,
  canvasVisible = false,
  headerVisible = false,
  propertiesVisible = false,
  showLayoutButtons = false,
  onSheetAdd,
  onSheetDelete,
  onSheetRename,
  onSheetDuplicate,
  onSheetSelect,
  isMobile = false
}: ComponentsSidebarProps) {
  const [currentTab, setCurrentTab] = useState<'elements' | 'projects'>('elements');
  const [draggedProject, setDraggedProject] = useState<BotProject | null>(null);
  const [dragOverProject, setDragOverProject] = useState<number | null>(null);
  const [selectedSheetId, setSelectedSheetId] = useState<string | null>(null);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
  const [editingSheetId, setEditingSheetId] = useState<string | null>(null);
  const [editingSheetName, setEditingSheetName] = useState('');
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [collapsedCategories, setCollapsedCategories] = useState<Set<string>>(new Set());
  // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const isActuallyMobile = useIsMobile();
  const queryClient = useQueryClient();
  const { toast } = useToast();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategory = (categoryTitle: string) => {
    setCollapsedCategories(prev => {
      const newSet = new Set(prev);
      if (newSet.has(categoryTitle)) {
        newSet.delete(categoryTitle);
      } else {
        newSet.add(categoryTitle);
      }
      return newSet;
    });
  };
  
  const handleDragStart = (e: React.DragEvent, component: ComponentDefinition) => {
    e.dataTransfer.setData('application/json', JSON.stringify(component));
    onComponentDrag(component);
  };

  // Touch —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const [touchedComponent, setTouchedComponent] = useState<ComponentDefinition | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 });
  const [touchStartElement, setTouchStartElement] = useState<HTMLElement | null>(null);

  const handleTouchStart = (e: React.TouchEvent, component: ComponentDefinition) => {
    console.log('Touch start on component:', component.name);
    e.preventDefault();
    e.stopPropagation();
    
    const touch = e.touches[0];
    const element = e.currentTarget as HTMLElement;
    
    setTouchedComponent(component);
    setIsDragging(true);
    setTouchStartElement(element);
    
    const rect = element.getBoundingClientRect();
    setDragOffset({
      x: touch.clientX - rect.left,
      y: touch.clientY - rect.top
    });
    onComponentDrag(component);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    element.style.opacity = '0.7';
    element.style.transform = 'scale(0.95)';
    element.style.transition = 'all 0.2s ease';
    
    console.log('Touch drag started for:', component.name, {
      touchPos: { x: touch.clientX, y: touch.clientY },
      elementRect: rect
    });
  };

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!isDragging || !touchedComponent) return;
    e.preventDefault();
    e.stopPropagation();
    console.log('Touch move:', { x: e.touches[0].clientX, y: e.touches[0].clientY });
  };

  const handleTouchEnd = (e: React.TouchEvent) => {
    if (!isDragging || !touchedComponent) {
      console.log('Touch end ignored - not dragging or no component');
      return;
    }
    
    console.log('Touch end for component:', touchedComponent.name);
    const touch = e.changedTouches[0];
    const element = document.elementFromPoint(touch.clientX, touch.clientY);
    
    console.log('Touch end position:', { x: touch.clientX, y: touch.clientY });
    console.log('Element at touch point:', element);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
    const currentTarget = e.currentTarget as HTMLElement;
    currentTarget.style.opacity = '';
    currentTarget.style.transform = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –Ω–∞ —Ö–æ–ª—Å—Ç –∏–ª–∏ –≤ –æ–±–ª–∞—Å—Ç—å —Ö–æ–ª—Å—Ç–∞
    const canvas = document.querySelector('[data-canvas-drop-zone]');
    console.log('Canvas element found:', canvas);
    
    if (canvas && element) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ canvas –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∏–º canvas
      const isInCanvas = canvas.contains(element) || element === canvas || 
                        element.closest('[data-canvas-drop-zone]') === canvas;
      
      console.log('Is in canvas:', isInCanvas);
      
      if (isInCanvas) {
        const canvasRect = canvas.getBoundingClientRect();
        const dropPosition = {
          x: touch.clientX - canvasRect.left,
          y: touch.clientY - canvasRect.top
        };
        
        // Dispatching canvas-drop event
        
        // –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ drop
        const dropEvent = new CustomEvent('canvas-drop', {
          detail: {
            component: touchedComponent,
            position: dropPosition
          }
        });
        canvas.dispatchEvent(dropEvent);
      } else {
        // Touch ended outside canvas
      }
    } else {
      // Canvas not found
    }
    
    setTouchedComponent(null);
    setIsDragging(false);
    setDragOffset({ x: 0, y: 0 });
    setTouchStartElement(null);
  };

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ touch –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  useEffect(() => {
    const handleGlobalTouchMove = (e: TouchEvent) => {
      if (isDragging && touchedComponent) {
        e.preventDefault();
        // Global touch move
      }
    };

    const handleGlobalTouchEnd = (e: TouchEvent) => {
      if (!isDragging || !touchedComponent) return;
      
      // Global touch end
      const touch = e.changedTouches[0];
      const element = document.elementFromPoint(touch.clientX, touch.clientY);
      
      // Global touch end position
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
      if (touchStartElement) {
        touchStartElement.style.opacity = '';
        touchStartElement.style.transform = '';
        touchStartElement.style.transition = '';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –Ω–∞ —Ö–æ–ª—Å—Ç
      const canvas = document.querySelector('[data-canvas-drop-zone]');
      // Canvas element check
      
      if (canvas && element) {
        const isInCanvas = canvas.contains(element) || element === canvas || 
                          element.closest('[data-canvas-drop-zone]') === canvas;
        
        // Is in canvas check
        
        if (isInCanvas) {
          const canvasRect = canvas.getBoundingClientRect();
          const dropPosition = {
            x: touch.clientX - canvasRect.left,
            y: touch.clientY - canvasRect.top
          };
          
          // Dispatching global canvas-drop event
          
          const dropEvent = new CustomEvent('canvas-drop', {
            detail: {
              component: touchedComponent,
              position: dropPosition
            }
          });
          canvas.dispatchEvent(dropEvent);
        }
      }
      
      setTouchedComponent(null);
      setIsDragging(false);
      setDragOffset({ x: 0, y: 0 });
      setTouchStartElement(null);
    };

    if (isDragging) {
      document.addEventListener('touchmove', handleGlobalTouchMove, { passive: false });
      document.addEventListener('touchend', handleGlobalTouchEnd, { passive: false });
    }

    return () => {
      document.removeEventListener('touchmove', handleGlobalTouchMove);
      document.removeEventListener('touchend', handleGlobalTouchEnd);
    };
  }, [isDragging, touchedComponent, touchStartElement]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const { data: projects = [], isLoading } = useQuery<BotProject[]>({
    queryKey: ['/api/projects'],
  });

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  const createProjectMutation = useMutation({
    mutationFn: () => {
      const projectCount = projects.length;
      return apiRequest('POST', '/api/projects', {
        name: `–ù–æ–≤—ã–π –±–æ—Ç ${projectCount + 1}`,
        description: '',
        data: {
          nodes: [{
            id: 'start',
            type: 'start',
            position: { x: 400, y: 300 }, // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            data: {
              messageText: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –Ω–æ–≤—ã–π –±–æ—Ç. –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.',
              keyboardType: 'none',
              buttons: [],
              command: '/start',
              description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
              showInMenu: true,
              isPrivateOnly: false,
              requiresAuth: false,
              adminOnly: false
            }
          }],
          connections: []
        }
      });
    },
    onSuccess: (newProject: BotProject) => {
      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });
      toast({
        title: "–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω",
        description: `–ü—Ä–æ–µ–∫—Ç "${newProject.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
      });
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
      if (onProjectSelect) {
        onProjectSelect(newProject.id);
      }
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
        variant: "destructive",
      });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
  const deleteProjectMutation = useMutation({
    mutationFn: (projectId: number) => apiRequest('DELETE', `/api/projects/${projectId}`),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });
      toast({
        title: "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª–µ–Ω",
        description: "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      });
    },
    onError: () => {
      toast({
        title: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
        variant: "destructive",
      });
    }
  });



  const handleCreateProject = () => {
    createProjectMutation.mutate();
  };

  const handleDeleteProject = (projectId: number) => {
    const project = projects.find(p => p.id === projectId);
    if (project && confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç "${project.name}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      deleteProjectMutation.mutate(project.id);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤
  const handleStartEditingSheet = (sheetId: string, currentName: string) => {
    setEditingSheetId(sheetId);
    setEditingSheetName(currentName);
  };

  const handleSaveSheetName = () => {
    if (editingSheetId && editingSheetName.trim() && onSheetRename) {
      onSheetRename(editingSheetId, editingSheetName.trim());
    }
    setEditingSheetId(null);
    setEditingSheetName('');
  };

  const handleCancelEditingSheet = () => {
    setEditingSheetId(null);
    setEditingSheetName('');
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag-and-drop –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  const handleProjectDragStart = (e: React.DragEvent, project: BotProject) => {
    e.stopPropagation();
    setDraggedProject(project);
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', project.id.toString());
  };

  const handleProjectDragOver = (e: React.DragEvent, projectId: number) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverProject(projectId);
  };

  const handleProjectDragLeave = () => {
    setDragOverProject(null);
  };

  const handleProjectDrop = (e: React.DragEvent, targetProject: BotProject) => {
    e.preventDefault();
    setDragOverProject(null);
    
    if (!draggedProject || draggedProject.id === targetProject.id) {
      setDraggedProject(null);
      return;
    }

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    toast({
      title: "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤",
      description: `–ü—Ä–æ–µ–∫—Ç "${draggedProject.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω`,
    });
    
    setDraggedProject(null);
  };

  const handleProjectDragEnd = () => {
    setDraggedProject(null);
    setDragOverProject(null);
  };

  const formatDate = (dateString: string | Date | null) => {
    if (!dateString) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getNodeCount = (project: BotProject) => {
    if (!project.data || typeof project.data !== 'object') return 0;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ª–∏—Å—Ç–∞–º–∏ –∏–ª–∏ —Å—Ç–∞—Ä—ã–π
      if (SheetsManager.isNewFormat(project.data)) {
        const sheets = (project.data as any).sheets || [];
        const nodeCount = sheets.reduce((total: number, sheet: any) => total + (sheet.nodes?.length || 0), 0);
        console.log(`[${project.name}] –§–æ—Ä–º–∞—Ç —Å –ª–∏—Å—Ç–∞–º–∏. –õ–∏—Å—Ç–æ–≤: ${sheets.length}, –£–∑–ª–æ–≤: ${nodeCount}`);
        return nodeCount;
      } else {
        const data = project.data as { nodes?: any[] };
        const nodeCount = data.nodes?.length || 0;
        console.log(`[${project.name}] –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∑–ª–æ–≤: ${nodeCount}`);
        return nodeCount;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —É–∑–ª–æ–≤:', error);
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —É–∑–ª—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –¥–∞–Ω–Ω—ã—Ö
      const fallbackData = project.data as any;
      if (fallbackData.nodes && Array.isArray(fallbackData.nodes)) {
        return fallbackData.nodes.length;
      }
      if (fallbackData.sheets && Array.isArray(fallbackData.sheets)) {
        return fallbackData.sheets.reduce((total: number, sheet: any) => 
          total + (sheet.nodes ? sheet.nodes.length : 0), 0);
      }
      return 0;
    }
  };

  const getSheetsInfo = (project: BotProject) => {
    if (!project.data || typeof project.data !== 'object') return { count: 0, names: [] };
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –ª–∏—Å—Ç–∞–º–∏ –∏–ª–∏ —Å—Ç–∞—Ä—ã–π
      if (SheetsManager.isNewFormat(project.data)) {
        const sheets = (project.data as any).sheets || [];
        const sheetsInfo = {
          count: sheets.length,
          names: sheets.map((sheet: any) => sheet.name || '–õ–∏—Å—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        };
        console.log(`[${project.name}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∞—Ö:`, sheetsInfo);
        return sheetsInfo;
      } else {
        // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–∏–Ω –ª–∏—Å—Ç
        console.log(`[${project.name}] –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç`);
        return {
          count: 1,
          names: ['–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫']
        };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö:', error);
      return {
        count: 1,
        names: ['–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫']
      };
    }
  };

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∞–Ω–µ–ª–∏
  const SidebarContent = () => (
    <div className="h-full flex flex-col overflow-hidden">
      {/* Sidebar Header */}
      <div className="p-4 border-b border-border">
        <div className="flex items-center justify-between mb-3">
          <h2 className="text-sm font-semibold text-foreground">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</h2>
          {/* –ö–Ω–æ–ø–∫–∏ –º–∞–∫–µ—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –ø–∞–Ω–µ–ª—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–∏–¥–Ω–∞ */}
          {showLayoutButtons && (
            <LayoutButtons
              onToggleCanvas={onToggleCanvas}
              onToggleHeader={onToggleHeader}
              onToggleProperties={onToggleProperties}
              onShowFullLayout={onShowFullLayout}
              canvasVisible={canvasVisible}
              headerVisible={headerVisible}
              propertiesVisible={propertiesVisible}
              className="scale-75 -mr-2"
            />
          )}
        </div>
        <div className="flex space-x-1 bg-muted rounded-lg p-1">
          <button 
            onClick={() => setCurrentTab('elements')}
            className={`flex-1 px-1 py-1.5 text-xs font-medium rounded-md transition-colors ${
              currentTab === 'elements' 
                ? 'bg-background text-foreground shadow-sm' 
                : 'text-muted-foreground hover:text-foreground'
            }`}
          >
            –≠–ª–µ–º–µ–Ω—Ç—ã
          </button>
          <button 
            onClick={() => setCurrentTab('projects')}
            className={`flex-1 px-1 py-1.5 text-xs font-medium rounded-md transition-colors ${
              currentTab === 'projects' 
                ? 'bg-background text-foreground shadow-sm' 
                : 'text-muted-foreground hover:text-foreground'
            }`}
          >
            –ü—Ä–æ–µ–∫—Ç—ã
          </button>
        </div>
      </div>
      
      {/* Components List */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {currentTab === 'projects' && (
          <div className="space-y-4">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <div className="space-y-3 mb-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-semibold text-foreground">
                  –ü—Ä–æ–µ–∫—Ç—ã ({projects.length})
                </h3>
                <Button 
                  size="default" 
                  variant="outline" 
                  className="h-8 px-3 flex items-center gap-1"
                  onClick={handleCreateProject}
                  disabled={createProjectMutation.isPending}
                >
                  <Plus className="h-4 w-4" />
                  <span className="text-sm">–ù–æ–≤—ã–π</span>
                </Button>
              </div>
              
            </div>

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
            {isLoading ? (
              <div className="text-center py-4">
                <div className="w-6 h-6 bg-muted rounded-lg flex items-center justify-center mx-auto mb-2">
                  <i className="fas fa-spinner fa-spin text-muted-foreground text-xs"></i>
                </div>
                <p className="text-xs text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
              </div>
            ) : projects.length === 0 ? (
              <div className="text-center py-8">
                <div className="bg-muted/30 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                  <Home className="h-8 w-8 text-muted-foreground" />
                </div>
                <h4 className="text-sm font-medium text-foreground mb-2">–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</h4>
                <p className="text-xs text-muted-foreground mb-4">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                <Button size="default" onClick={handleCreateProject} disabled={createProjectMutation.isPending} className="h-10 px-6">
                  <Plus className="h-4 w-4 mr-2" />
                  {createProjectMutation.isPending ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'}
                </Button>
              </div>
            ) : (
              <div className="space-y-3">
                {projects.map((project: BotProject) => (
                  <div
                    key={project.id}
                    draggable
                    onDragStart={(e) => handleProjectDragStart(e, project)}
                    onDragOver={(e) => handleProjectDragOver(e, project.id)}
                    onDragLeave={handleProjectDragLeave}
                    onDrop={(e) => handleProjectDrop(e, project)}
                    onDragEnd={handleProjectDragEnd}
                    className={`group p-4 rounded-xl cursor-pointer transition-all duration-200 border-2 hover:shadow-lg ${
                      currentProjectId === project.id 
                        ? 'bg-primary/10 border-primary/30 shadow-md' 
                        : 'bg-background border-border/50 hover:bg-muted/30 hover:border-border'
                    } ${
                      dragOverProject === project.id ? 'border-primary border-2 scale-105 shadow-lg' : ''
                    } ${
                      draggedProject?.id === project.id ? 'opacity-50 scale-95' : ''
                    }`}
                    onClick={() => onProjectSelect && onProjectSelect(project.id)}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center flex-1 min-w-0">
                        <div className="cursor-grab active:cursor-grabbing mr-3 opacity-0 group-hover:opacity-100 transition-opacity">
                          <GripVertical className="h-5 w-5 text-muted-foreground" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <h4 className="text-base font-semibold text-foreground truncate mb-1">
                            {project.name}
                          </h4>
                          {project.description && (
                            <p className="text-sm text-muted-foreground truncate">
                              {project.description}
                            </p>
                          )}
                        </div>
                      </div>
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleDeleteProject(project.id);
                        }}
                        className="h-8 w-8 p-0 text-muted-foreground hover:text-destructive opacity-0 group-hover:opacity-100 transition-opacity hover:bg-destructive/10"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                    
                    <div className="space-y-3 text-sm text-muted-foreground">
                      <div className="flex items-center justify-between gap-3">
                        <span className="flex items-center bg-muted/50 px-2 py-1 rounded-md">
                          <User className="h-4 w-4 mr-2" />
                          <span className="font-medium">{getNodeCount(project)}</span>
                          <span className="ml-1">—É–∑–ª–æ–≤</span>
                        </span>
                        <span className="flex items-center text-xs">
                          <Calendar className="h-3 w-3 mr-1" />
                          {formatDate(project.updatedAt)}
                        </span>
                      </div>
                      
                      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∞—Ö */}
                      {(() => {
                        const sheetsInfo = getSheetsInfo(project);
                        return (
                          <div className="space-y-1">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center text-sm text-muted-foreground">
                                <FileText className="h-4 w-4 mr-2" />
                                <span className="font-medium">{sheetsInfo.count}</span>
                                <span className="ml-1">{sheetsInfo.count === 1 ? '–ª–∏—Å—Ç' : sheetsInfo.count < 5 ? '–ª–∏—Å—Ç–∞' : '–ª–∏—Å—Ç–æ–≤'}</span>
                              </div>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity hover:bg-muted"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  if (currentProjectId === project.id && onSheetAdd) {
                                    const sheetsInfo = getSheetsInfo(project);
                                    const newSheetName = `–õ–∏—Å—Ç ${sheetsInfo.count + 1}`;
                                    onSheetAdd(newSheetName);
                                  }
                                }}
                                title="–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç"
                              >
                                <Plus className="h-3 w-3" />
                              </Button>
                            </div>
                            <div className="space-y-1">
                              {sheetsInfo.names.slice(0, 3).map((name: string, index: number) => {
                                const projectData = project.data as any;
                                const isActive = SheetsManager.isNewFormat(projectData) && 
                                  projectData.sheets && 
                                  projectData.sheets[index]?.id === projectData.activeSheetId;
                                
                                const sheetId = SheetsManager.isNewFormat(projectData) ? projectData.sheets[index]?.id : null;
                                const isEditing = editingSheetId === sheetId;
                                
                                return (
                                  <div key={index} className="flex items-center gap-2 group/sheet">
                                    {isEditing ? (
                                      <Input
                                        value={editingSheetName}
                                        onChange={(e) => setEditingSheetName(e.target.value)}
                                        onKeyDown={(e) => {
                                          if (e.key === 'Enter') {
                                            handleSaveSheetName();
                                          } else if (e.key === 'Escape') {
                                            handleCancelEditingSheet();
                                          }
                                        }}
                                        onBlur={handleSaveSheetName}
                                        autoFocus
                                        className="text-xs px-3 py-1.5 h-7 flex-1 font-medium"
                                      />
                                    ) : (
                                      <Badge 
                                        variant={isActive ? "default" : "secondary"} 
                                        className={`text-xs px-3 py-1.5 h-7 cursor-pointer hover:opacity-80 transition-all flex-1 font-medium ${
                                          isActive ? 'bg-primary text-primary-foreground shadow-sm' : ''
                                        }`}
                                        onClick={() => {
                                          if (currentProjectId === project.id && onSheetSelect && SheetsManager.isNewFormat(projectData)) {
                                            const sheetId = projectData.sheets[index]?.id;
                                            if (sheetId) {
                                              onSheetSelect(sheetId);
                                            }
                                          }
                                        }}
                                        onDoubleClick={() => {
                                          // –í–∫–ª—é—á–∞–µ–º inline —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                                          if (currentProjectId === project.id && SheetsManager.isNewFormat(projectData)) {
                                            const sheetId = projectData.sheets[index]?.id;
                                            if (sheetId) {
                                              handleStartEditingSheet(sheetId, name);
                                            }
                                          }
                                        }}
                                        title={name}
                                      >
                                        <span className="block text-center w-full truncate">{name}</span>
                                      </Badge>
                                    )}
                                    
                                    {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–æ–º */}
                                    {currentProjectId === project.id && (
                                      <div className="flex gap-1 opacity-0 group-hover/sheet:opacity-100 transition-opacity">
                                        <Button
                                          variant="ghost"
                                          size="sm"
                                          className="h-6 w-6 p-0 hover:bg-muted"
                                          onClick={(e) => {
                                            e.stopPropagation();
                                            if (SheetsManager.isNewFormat(projectData)) {
                                              const sheetId = projectData.sheets[index]?.id;
                                              if (sheetId && onSheetDuplicate) {
                                                onSheetDuplicate(sheetId);
                                              }
                                            }
                                          }}
                                          title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç"
                                        >
                                          <Copy className="h-3 w-3" />
                                        </Button>
                                        {sheetsInfo.count > 1 && (
                                          <Button
                                            variant="ghost"
                                            size="sm"
                                            className="h-6 w-6 p-0 text-destructive hover:text-destructive hover:bg-muted"
                                            onClick={(e) => {
                                              e.stopPropagation();
                                              if (SheetsManager.isNewFormat(projectData)) {
                                                const sheetId = projectData.sheets[index]?.id;
                                                if (sheetId && onSheetDelete) {
                                                  onSheetDelete(sheetId);
                                                }
                                              }
                                            }}
                                            title="–£–¥–∞–ª–∏—Ç—å –ª–∏—Å—Ç"
                                          >
                                            <Trash2 className="h-3 w-3" />
                                          </Button>
                                        )}
                                      </div>
                                    )}
                                  </div>
                                );
                              })}
                              {sheetsInfo.names.length > 3 && (
                                <div className="flex items-center gap-2">
                                  <Badge variant="secondary" className="text-xs px-2 py-1 h-6">
                                    +{sheetsInfo.names.length - 3}
                                  </Badge>
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })()}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
        
        {currentTab === 'elements' && componentCategories.map((category) => {
          const isCollapsed = collapsedCategories.has(category.title);
          
          return (
            <div key={category.title}>
              <button
                onClick={() => toggleCategory(category.title)}
                className="w-full flex items-center justify-between text-xs font-medium text-muted-foreground uppercase tracking-wider mb-2 hover:text-foreground transition-colors group"
              >
                <span>{category.title}</span>
                <div className="flex items-center gap-1">
                  <span className="text-xs normal-case bg-muted/50 px-2 py-0.5 rounded-full">
                    {category.components.length}
                  </span>
                  {isCollapsed ? (
                    <ChevronRight className="h-3 w-3 group-hover:text-foreground transition-colors" />
                  ) : (
                    <ChevronDown className="h-3 w-3 group-hover:text-foreground transition-colors" />
                  )}
                </div>
              </button>
              
              {!isCollapsed && (
                <div className="space-y-2 transition-all duration-200 ease-in-out">
                  {category.components.map((component) => (
                    <div
                      key={component.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, component)}
                      onTouchStart={(e) => handleTouchStart(e, component)}
                      onTouchMove={handleTouchMove}
                      onTouchEnd={handleTouchEnd}
                      className={`component-item group flex items-center p-3 bg-muted/50 hover:bg-muted rounded-lg cursor-move transition-colors touch-action-none no-select ${
                        touchedComponent?.id === component.id && isDragging ? 'opacity-50 scale-95' : ''
                      }`}
                    >
                      <div className={cn("w-8 h-8 rounded-lg flex items-center justify-center mr-3", component.color)}>
                        <i className={`${component.icon} text-sm`}></i>
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-foreground">{component.name}</p>
                        <p className="text-xs text-muted-foreground">{component.description}</p>
                      </div>
                      {onComponentAdd && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            onComponentAdd(component);
                          }}
                          className="ml-2 w-6 h-6 rounded-full bg-primary/10 hover:bg-primary/20 text-primary flex items-center justify-center transition-colors opacity-0 group-hover:opacity-100 focus:opacity-100"
                          title={`–î–æ–±–∞–≤–∏—Ç—å ${component.name} –Ω–∞ —Ö–æ–ª—Å—Ç`}
                        >
                          <Plus className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );

  // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Sheet –∏–∑ editor.tsx
  if (isActuallyMobile || isMobile) {
    return <SidebarContent />;
  }

  // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è
  return (
    <aside className="w-full bg-background h-full flex flex-col overflow-hidden">
      <SidebarContent />
    </aside>
  );
}
