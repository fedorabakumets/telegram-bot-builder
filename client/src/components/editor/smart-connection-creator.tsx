import React, { useState, useCallback, useMemo } from 'react';
import { Node, Connection, Button } from '@/types/bot';
import { Badge } from '@/components/ui/badge';
import { Button as UIButton } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Plus, 
  Zap, 
  Target, 
  Link, 
  ArrowRight,
  Lightbulb,
  CheckCircle,
  XCircle,
  Settings,
  Network,
  Brain,
  Wand2,
  Sparkles
} from 'lucide-react';
import { ConnectionManager, ConnectionSuggestion } from '@/utils/connection-manager';
import { cn } from '@/lib/utils';

interface SmartConnectionCreatorProps {
  nodes: Node[];
  connections: Connection[];
  onConnectionAdd: (connection: Connection) => void;
  onNodesChange: (nodes: Node[]) => void;
  autoButtonCreation: boolean;
  selectedNodeId?: string;
}

interface ConnectionTemplate {
  id: string;
  name: string;
  description: string;
  sourceTypes: Node['type'][];
  targetTypes: Node['type'][];
  buttonTemplate: Partial<Button>;
  priority: number;
  useCase: string;
}

const connectionTemplates: ConnectionTemplate[] = [
  {
    id: 'start-welcome',
    name: '–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    description: '–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é',
    sourceTypes: ['start'],
    targetTypes: ['message'],
    buttonTemplate: {
      text: 'üëã –ù–∞—á–∞—Ç—å',
      action: 'goto'
    },
    priority: 1,
    useCase: '–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
  },
  {
    id: 'menu-navigation',
    name: '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é',
    description: '–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é',
    sourceTypes: ['message'],
    targetTypes: ['keyboard'],
    buttonTemplate: {
      text: 'üìã –ú–µ–Ω—é',
      action: 'goto'
    },
    priority: 2,
    useCase: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞'
  },
  {
    id: 'command-response',
    name: '–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É',
    description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    sourceTypes: ['command'],
    targetTypes: ['message', 'photo'],
    buttonTemplate: {
      text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å',
      action: 'command'
    },
    priority: 3,
    useCase: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
  },
  {
    id: 'input-processing',
    name: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞',
    description: '–ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –≤–≤–æ–¥–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö',
    sourceTypes: ['input'],
    targetTypes: ['message', 'condition'],
    buttonTemplate: {
      text: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
      action: 'goto'
    },
    priority: 4,
    useCase: '–°–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
  },
  {
    id: 'media-showcase',
    name: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞',
    description: '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ñ–æ—Ç–æ –∏–ª–∏ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞',
    sourceTypes: ['message', 'keyboard'],
    targetTypes: ['photo'],
    buttonTemplate: {
      text: 'üñºÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å',
      action: 'goto'
    },
    priority: 5,
    useCase: '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
  }
];

export function SmartConnectionCreator({
  nodes,
  connections,
  onConnectionAdd,
  onNodesChange,
  autoButtonCreation,
  selectedNodeId
}: SmartConnectionCreatorProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<'manual' | 'templates' | 'smart'>('smart');
  const [selectedSourceId, setSelectedSourceId] = useState<string>(selectedNodeId || '');
  const [selectedTargetId, setSelectedTargetId] = useState<string>('');
  const [buttonText, setButtonText] = useState('');
  const [buttonAction, setButtonAction] = useState<'goto' | 'command' | 'url'>('goto');
  const [smartSuggestions, setSmartSuggestions] = useState<ConnectionSuggestion[]>([]);
  const [isGeneratingSmartSuggestions, setIsGeneratingSmartSuggestions] = useState(false);

  const connectionManager = useMemo(() => 
    new ConnectionManager({
      nodes,
      connections,
      autoButtonCreation
    }),
    [nodes, connections, autoButtonCreation]
  );

  // –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–≤—è–∑–µ–π
  const missingConnections = useMemo(() => {
    const orphanedNodes = nodes.filter(node => {
      const hasIncoming = connections.some(conn => conn.target === node.id);
      const hasOutgoing = connections.some(conn => conn.source === node.id);
      
      if (node.type === 'start') return !hasOutgoing;
      if (node.type === 'command') return !hasOutgoing;
      return !hasIncoming && !hasOutgoing;
    });

    return orphanedNodes;
  }, [nodes, connections]);

  // –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞
  const applicableTemplates = useMemo(() => {
    if (!selectedSourceId) return connectionTemplates;
    
    const sourceNode = nodes.find(n => n.id === selectedSourceId);
    if (!sourceNode) return [];
    
    return connectionTemplates.filter(template => 
      template.sourceTypes.includes(sourceNode.type)
    );
  }, [selectedSourceId, nodes]);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —É–∑–ª—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const availableTargets = useMemo(() => {
    if (!selectedSourceId) return nodes;
    
    const existingTargets = new Set(
      connections
        .filter(conn => conn.source === selectedSourceId)
        .map(conn => conn.target)
    );
    
    return nodes.filter(node => 
      node.id !== selectedSourceId && !existingTargets.has(node.id)
    );
  }, [selectedSourceId, nodes, connections]);

  const getNodeName = useCallback((nodeId: string) => {
    const node = nodes.find(n => n.id === nodeId);
    if (!node) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª';
    
    const typeNames = {
      start: '–°—Ç–∞—Ä—Ç',
      command: node.data.command || '–ö–æ–º–∞–Ω–¥–∞',
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      keyboard: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
      photo: '–§–æ—Ç–æ',
      condition: '–£—Å–ª–æ–≤–∏–µ',
      input: '–í–≤–æ–¥'
    };
    
    return typeNames[node.type] || node.type;
  }, [nodes]);

  const generateSmartSuggestions = useCallback(async () => {
    setIsGeneratingSmartSuggestions(true);
    try {
      connectionManager.updateState({ nodes, connections });
      const suggestions = connectionManager.generateConnectionSuggestions();
      setSmartSuggestions(suggestions.slice(0, 10)); // –¢–æ–ø 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    } finally {
      setIsGeneratingSmartSuggestions(false);
    }
  }, [connectionManager, nodes, connections]);

  const createManualConnection = useCallback(() => {
    if (!selectedSourceId || !selectedTargetId) return;
    
    try {
      const { connection, updatedNodes } = connectionManager.createConnection(
        selectedSourceId,
        selectedTargetId,
        {
          autoCreateButton: autoButtonCreation,
          buttonText: buttonText || undefined,
          buttonAction: buttonAction
        }
      );
      
      onConnectionAdd(connection);
      onNodesChange(updatedNodes);
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setSelectedTargetId('');
      setButtonText('');
      setIsDialogOpen(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤—è–∑–∏:', error);
    }
  }, [
    selectedSourceId,
    selectedTargetId,
    buttonText,
    buttonAction,
    connectionManager,
    autoButtonCreation,
    onConnectionAdd,
    onNodesChange
  ]);

  const applyTemplate = useCallback((template: ConnectionTemplate) => {
    if (!selectedSourceId) return;
    
    const sourceNode = nodes.find(n => n.id === selectedSourceId);
    if (!sourceNode) return;
    
    const suitableTargets = availableTargets.filter(node => 
      template.targetTypes.includes(node.type)
    );
    
    if (suitableTargets.length === 0) return;
    
    const targetNode = suitableTargets[0]; // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π
    
    try {
      const { connection, updatedNodes } = connectionManager.createConnection(
        selectedSourceId,
        targetNode.id,
        {
          autoCreateButton: true,
          buttonText: template.buttonTemplate.text,
          buttonAction: template.buttonTemplate.action
        }
      );
      
      onConnectionAdd(connection);
      onNodesChange(updatedNodes);
      setIsDialogOpen(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
    }
  }, [selectedSourceId, nodes, availableTargets, connectionManager, onConnectionAdd, onNodesChange]);

  const applySuggestion = useCallback((suggestion: ConnectionSuggestion) => {
    try {
      const { connection, updatedNodes } = connectionManager.createConnection(
        suggestion.connection.source,
        suggestion.connection.target,
        {
          autoCreateButton: autoButtonCreation,
          buttonText: suggestion.suggestedButton.text,
          buttonAction: suggestion.suggestedButton.action
        }
      );
      
      onConnectionAdd(connection);
      onNodesChange(updatedNodes);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
      setSmartSuggestions(prev => prev.filter(s => s.id !== suggestion.id));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', error);
    }
  }, [connectionManager, autoButtonCreation, onConnectionAdd, onNodesChange]);

  const getConfidenceColor = useCallback((confidence: number) => {
    if (confidence >= 0.8) return 'bg-green-100 text-green-800 border-green-200';
    if (confidence >= 0.6) return 'bg-yellow-100 text-yellow-800 border-yellow-200';
    return 'bg-red-100 text-red-800 border-red-200';
  }, []);

  return (
    <div className="space-y-4">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5" />
            –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
          </CardTitle>
          <CardDescription>
            –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
          </CardDescription>
        </CardHeader>
        <CardContent>
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-3 gap-4 mb-4">
            <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <div className="text-2xl font-bold text-blue-600 dark:text-blue-400">
                {connections.length}
              </div>
              <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π</div>
            </div>
            <div className="text-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
              <div className="text-2xl font-bold text-orange-600 dark:text-orange-400">
                {missingConnections.length}
              </div>
              <div className="text-sm text-muted-foreground">–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤</div>
            </div>
            <div className="text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
              <div className="text-2xl font-bold text-purple-600 dark:text-purple-400">
                {smartSuggestions.length}
              </div>
              <div className="text-sm text-muted-foreground">–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</div>
            </div>
          </div>

          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex gap-2 mb-4">
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <UIButton>
                  <Plus className="h-4 w-4 mr-2" />
                  –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
                </UIButton>
              </DialogTrigger>
              <DialogContent className="max-w-2xl">
                <DialogHeader>
                  <DialogTitle>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–≤—è–∑–∏</DialogTitle>
                  <DialogDescription>
                    –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
                  </DialogDescription>
                </DialogHeader>
                
                <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as typeof activeTab)}>
                  <TabsList className="grid w-full grid-cols-3">
                    <TabsTrigger value="smart">
                      <Sparkles className="h-4 w-4 mr-2" />
                      –£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    </TabsTrigger>
                    <TabsTrigger value="templates">
                      <Wand2 className="h-4 w-4 mr-2" />
                      –®–∞–±–ª–æ–Ω—ã
                    </TabsTrigger>
                    <TabsTrigger value="manual">
                      <Settings className="h-4 w-4 mr-2" />
                      –í—Ä—É—á–Ω—É—é
                    </TabsTrigger>
                  </TabsList>

                  <TabsContent value="smart" className="space-y-4">
                    <div className="flex items-center justify-between">
                      <p className="text-sm text-muted-foreground">
                        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞
                      </p>
                      <UIButton
                        onClick={generateSmartSuggestions}
                        disabled={isGeneratingSmartSuggestions}
                        variant="outline"
                      >
                        {isGeneratingSmartSuggestions ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                      </UIButton>
                    </div>
                    
                    <div className="space-y-2 max-h-80 overflow-y-auto">
                      {smartSuggestions.map((suggestion) => (
                        <div
                          key={suggestion.id}
                          className="p-3 border rounded-lg space-y-2"
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Target className="h-4 w-4" />
                              <span className="font-medium text-sm">
                                {getNodeName(suggestion.connection.source)} ‚Üí {getNodeName(suggestion.connection.target)}
                              </span>
                            </div>
                            <Badge className={cn("text-xs", getConfidenceColor(suggestion.confidence))}>
                              {Math.round(suggestion.confidence * 100)}%
                            </Badge>
                          </div>
                          
                          <p className="text-xs text-muted-foreground">
                            {suggestion.reason}
                          </p>
                          
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <Badge variant="outline" className="text-xs">
                                {suggestion.suggestedButton.text}
                              </Badge>
                              <Badge variant="secondary" className="text-xs">
                                {suggestion.suggestedButton.action}
                              </Badge>
                            </div>
                            
                            <UIButton
                              size="sm"
                              onClick={() => applySuggestion(suggestion)}
                              disabled={suggestion.confidence < 0.5}
                            >
                              <CheckCircle className="h-3 w-3 mr-1" />
                              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                            </UIButton>
                          </div>
                        </div>
                      ))}
                    </div>
                  </TabsContent>

                  <TabsContent value="templates" className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="template-source">–ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª</Label>
                      <Select value={selectedSourceId} onValueChange={setSelectedSourceId}>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª" />
                        </SelectTrigger>
                        <SelectContent>
                          {nodes.map(node => (
                            <SelectItem key={node.id} value={node.id}>
                              {getNodeName(node.id)}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2 max-h-80 overflow-y-auto">
                      {applicableTemplates.map((template) => (
                        <div
                          key={template.id}
                          className="p-3 border rounded-lg space-y-2"
                        >
                          <div className="flex items-center justify-between">
                            <h4 className="font-medium">{template.name}</h4>
                            <Badge variant="outline" className="text-xs">
                              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {template.priority}
                            </Badge>
                          </div>
                          
                          <p className="text-sm text-muted-foreground">
                            {template.description}
                          </p>
                          
                          <div className="flex items-center gap-2">
                            <Badge variant="secondary" className="text-xs">
                              {template.useCase}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {template.buttonTemplate.text}
                            </Badge>
                          </div>
                          
                          <UIButton
                            size="sm"
                            onClick={() => applyTemplate(template)}
                            disabled={!selectedSourceId}
                            className="w-full"
                          >
                            <Zap className="h-3 w-3 mr-1" />
                            –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
                          </UIButton>
                        </div>
                      ))}
                    </div>
                  </TabsContent>

                  <TabsContent value="manual" className="space-y-4">
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="source-node">–ò—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª</Label>
                        <Select value={selectedSourceId} onValueChange={setSelectedSourceId}>
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π —É–∑–µ–ª" />
                          </SelectTrigger>
                          <SelectContent>
                            {nodes.map(node => (
                              <SelectItem key={node.id} value={node.id}>
                                {getNodeName(node.id)}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="target-node">–¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª</Label>
                        <Select value={selectedTargetId} onValueChange={setSelectedTargetId}>
                          <SelectTrigger>
                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª" />
                          </SelectTrigger>
                          <SelectContent>
                            {availableTargets.map(node => (
                              <SelectItem key={node.id} value={node.id}>
                                {getNodeName(node.id)}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <Separator />
                      
                      <div className="space-y-2">
                        <Label htmlFor="button-text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
                        <Input
                          id="button-text"
                          value={buttonText}
                          onChange={(e) => setButtonText(e.target.value)}
                          placeholder="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è"
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="button-action">–¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏</Label>
                        <Select value={buttonAction} onValueChange={(value: typeof buttonAction) => setButtonAction(value)}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="goto">–ü–µ—Ä–µ—Ö–æ–¥</SelectItem>
                            <SelectItem value="command">–ö–æ–º–∞–Ω–¥–∞</SelectItem>
                            <SelectItem value="url">–°—Å—ã–ª–∫–∞</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <UIButton
                        onClick={createManualConnection}
                        disabled={!selectedSourceId || !selectedTargetId}
                        className="w-full"
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        –°–æ–∑–¥–∞—Ç—å —Å–≤—è–∑—å
                      </UIButton>
                    </div>
                  </TabsContent>
                </Tabs>
              </DialogContent>
            </Dialog>
            
            <UIButton
              onClick={generateSmartSuggestions}
              disabled={isGeneratingSmartSuggestions}
              variant="outline"
            >
              <Lightbulb className="h-4 w-4 mr-2" />
              –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            </UIButton>
          </div>

          {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
          {missingConnections.length > 0 && (
            <div className="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 rounded-lg">
              <div className="flex items-center gap-2 mb-2">
                <XCircle className="h-4 w-4 text-yellow-600" />
                <span className="font-medium text-yellow-800 dark:text-yellow-200">
                  –ù–∞–π–¥–µ–Ω—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–∑–ª—ã
                </span>
              </div>
              <p className="text-sm text-yellow-700 dark:text-yellow-300 mb-2">
                {missingConnections.length} —É–∑–ª–æ–≤ –Ω–µ –∏–º–µ—é—Ç —Å–≤—è–∑–µ–π –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              </p>
              <div className="flex flex-wrap gap-1">
                {missingConnections.map(node => (
                  <Badge key={node.id} variant="outline" className="text-xs">
                    {getNodeName(node.id)}
                  </Badge>
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}