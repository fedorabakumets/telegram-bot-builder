import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { 
  Bold, 
  Italic, 
  Underline, 
  Strikethrough, 
  Code, 
  Link, 
  List,
  ListOrdered,
  Quote,
  Smile,
  Zap,
  Star,
  CheckSquare,
  AlertTriangle,
  Heart,
  Phone,
  Mail,
  MapPin,
  Calendar,
  Clock,
  Settings,
  Sparkles,
  Plus
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface QuickFormatToolbarProps {
  onInsert: (text: string) => void;
  isMarkdown?: boolean;
}

export function QuickFormatToolbar({ onInsert, isMarkdown = false }: QuickFormatToolbarProps) {
  const { toast } = useToast();

  const formatButtons = [
    { 
      icon: Bold, 
      name: '–ñ–∏—Ä–Ω—ã–π', 
      markdown: '**—Ç–µ–∫—Å—Ç**', 
      html: '<b>—Ç–µ–∫—Å—Ç</b>',
      shortcut: 'Ctrl+B'
    },
    { 
      icon: Italic, 
      name: '–ö—É—Ä—Å–∏–≤', 
      markdown: '_—Ç–µ–∫—Å—Ç_', 
      html: '<i>—Ç–µ–∫—Å—Ç</i>',
      shortcut: 'Ctrl+I'
    },
    { 
      icon: Underline, 
      name: '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π', 
      markdown: '__—Ç–µ–∫—Å—Ç__', 
      html: '<u>—Ç–µ–∫—Å—Ç</u>',
      shortcut: 'Ctrl+U'
    },
    { 
      icon: Strikethrough, 
      name: '–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π', 
      markdown: '~—Ç–µ–∫—Å—Ç~', 
      html: '<s>—Ç–µ–∫—Å—Ç</s>',
      shortcut: 'Ctrl+Shift+X'
    },
    { 
      icon: Code, 
      name: '–ö–æ–¥', 
      markdown: '`–∫–æ–¥`', 
      html: '<code>–∫–æ–¥</code>',
      shortcut: 'Ctrl+E'
    },
    { 
      icon: Link, 
      name: '–°—Å—ã–ª–∫–∞', 
      markdown: '[—Ç–µ–∫—Å—Ç](url)', 
      html: '<a href="url">—Ç–µ–∫—Å—Ç</a>',
      shortcut: 'Ctrl+K'
    }
  ];

  const quickEmojis = [
    { emoji: 'üëç', name: '–õ–∞–π–∫' },
    { emoji: '‚ù§Ô∏è', name: '–°–µ—Ä–¥—Ü–µ' },
    { emoji: 'üî•', name: '–û–≥–æ–Ω—å' },
    { emoji: '‚≠ê', name: '–ó–≤–µ–∑–¥–∞' },
    { emoji: '‚úÖ', name: '–ì–∞–ª–æ—á–∫–∞' },
    { emoji: '‚ö†Ô∏è', name: '–í–Ω–∏–º–∞–Ω–∏–µ' },
    { emoji: 'üìû', name: '–¢–µ–ª–µ—Ñ–æ–Ω' },
    { emoji: 'üìß', name: 'Email' },
    { emoji: 'üìç', name: '–õ–æ–∫–∞—Ü–∏—è' },
    { emoji: '‚è∞', name: '–í—Ä–µ–º—è' },
    { emoji: 'üöÄ', name: '–†–∞–∫–µ—Ç–∞' },
    { emoji: 'üí°', name: '–ò–¥–µ—è' }
  ];

  const quickSymbols = [
    { symbol: '‚Ä¢', name: '–ú–∞—Ä–∫–µ—Ä' },
    { symbol: '‚Üí', name: '–°—Ç—Ä–µ–ª–∫–∞' },
    { symbol: '‚úì', name: '–ì–∞–ª–æ—á–∫–∞' },
    { symbol: '‚úó', name: '–ö—Ä–µ—Å—Ç–∏–∫' },
    { symbol: '‚Äî', name: '–¢–∏—Ä–µ' },
    { symbol: '‚Ä¶', name: '–ú–Ω–æ–≥–æ—Ç–æ—á–∏–µ' },
    { symbol: '¬´¬ª', name: '–ö–∞–≤—ã—á–∫–∏' },
    { symbol: '‚Ññ', name: '–ù–æ–º–µ—Ä' },
    { symbol: '¬©', name: '–ö–æ–ø–∏—Ä–∞–π—Ç' },
    { symbol: '¬Æ', name: '–¢–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫' },
    { symbol: '‚Ñ¢', name: '–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∫–∞' },
    { symbol: '¬ß', name: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ' }
  ];

  const quickTemplates = [
    {
      name: '–°–ø–∏—Å–æ–∫',
      icon: List,
      template: isMarkdown ? '‚Ä¢ –ü—É–Ω–∫—Ç 1\n‚Ä¢ –ü—É–Ω–∫—Ç 2\n‚Ä¢ –ü—É–Ω–∫—Ç 3' : '‚Ä¢ –ü—É–Ω–∫—Ç 1<br>‚Ä¢ –ü—É–Ω–∫—Ç 2<br>‚Ä¢ –ü—É–Ω–∫—Ç 3'
    },
    {
      name: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫',
      icon: ListOrdered,
      template: isMarkdown ? '1. –ü—É–Ω–∫—Ç 1\n2. –ü—É–Ω–∫—Ç 2\n3. –ü—É–Ω–∫—Ç 3' : '1. –ü—É–Ω–∫—Ç 1<br>2. –ü—É–Ω–∫—Ç 2<br>3. –ü—É–Ω–∫—Ç 3'
    },
    {
      name: '–¶–∏—Ç–∞—Ç–∞',
      icon: Quote,
      template: isMarkdown ? '> –≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞' : '<blockquote>–≠—Ç–æ —Ü–∏—Ç–∞—Ç–∞</blockquote>'
    },
    {
      name: '–ó–∞–¥–∞—á–∏',
      icon: CheckSquare,
      template: '‚òê –ó–∞–¥–∞—á–∞ 1\n‚òê –ó–∞–¥–∞—á–∞ 2\n‚òë –í—ã–ø–æ–ª–Ω–µ–Ω–æ'
    },
    {
      name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
      icon: AlertTriangle,
      template: '‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
    },
    {
      name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
      icon: Phone,
      template: 'üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\nüìß Email: example@email.com'
    }
  ];

  const handleInsert = (text: string, name: string) => {
    onInsert(text);
    toast({
      title: "–î–æ–±–∞–≤–ª–µ–Ω–æ",
      description: `${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–∫—Å—Ç`
    });
  };

  return (
    <div className="flex flex-wrap gap-2 p-3 bg-muted/30 rounded-lg border">
      {/* Format buttons */}
      <div className="flex gap-1">
        {formatButtons.map((format) => (
          <Button
            key={format.name}
            variant="ghost"
            size="sm"
            onClick={() => handleInsert(isMarkdown ? format.markdown : format.html, format.name)}
            className="h-8 w-8 p-0"
            title={`${format.name} (${format.shortcut})`}
          >
            <format.icon className="w-3 h-3" />
          </Button>
        ))}
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Quick emojis */}
      <div className="flex gap-1">
        {quickEmojis.slice(0, 6).map((item) => (
          <Button
            key={item.emoji}
            variant="ghost"
            size="sm"
            onClick={() => handleInsert(item.emoji, item.name)}
            className="h-8 w-8 p-0"
            title={item.name}
          >
            {item.emoji}
          </Button>
        ))}
        
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="sm" className="h-8 w-8 p-0" title="–ë–æ–ª—å—à–µ —ç–º–æ–¥–∑–∏">
              <Plus className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64 p-3" align="start">
            <div className="grid grid-cols-6 gap-1">
              {quickEmojis.map((item) => (
                <Button
                  key={item.emoji}
                  variant="ghost"
                  size="sm"
                  onClick={() => handleInsert(item.emoji, item.name)}
                  className="h-8 w-8 p-0"
                  title={item.name}
                >
                  {item.emoji}
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Quick symbols */}
      <div className="flex gap-1">
        {quickSymbols.slice(0, 4).map((item) => (
          <Button
            key={item.symbol}
            variant="ghost"
            size="sm"
            onClick={() => handleInsert(item.symbol, item.name)}
            className="h-8 w-8 p-0 text-xs"
            title={item.name}
          >
            {item.symbol}
          </Button>
        ))}
        
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="ghost" size="sm" className="h-8 w-8 p-0" title="–ë–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤">
              <Sparkles className="w-3 h-3" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64 p-3" align="start">
            <div className="grid grid-cols-4 gap-1">
              {quickSymbols.map((item) => (
                <Button
                  key={item.symbol}
                  variant="ghost"
                  size="sm"
                  onClick={() => handleInsert(item.symbol, item.name)}
                  className="h-8 justify-start text-xs"
                  title={item.name}
                >
                  {item.symbol}
                </Button>
              ))}
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <Separator orientation="vertical" className="h-6" />

      {/* Quick templates */}
      <Popover>
        <PopoverTrigger asChild>
          <Button variant="ghost" size="sm" className="h-8 px-2 text-xs" title="–®–∞–±–ª–æ–Ω—ã">
            <Settings className="w-3 h-3 mr-1" />
            –®–∞–±–ª–æ–Ω—ã
          </Button>
        </PopoverTrigger>
        <PopoverContent className="w-64 p-3" align="start">
          <div className="space-y-1">
            {quickTemplates.map((template) => (
              <Button
                key={template.name}
                variant="ghost"
                size="sm"
                onClick={() => handleInsert(template.template, template.name)}
                className="w-full justify-start h-8 text-xs"
              >
                <template.icon className="w-3 h-3 mr-2" />
                {template.name}
              </Button>
            ))}
          </div>
        </PopoverContent>
      </Popover>

      {/* Format mode indicator */}
      <div className="ml-auto flex items-center">
        <Badge variant="outline" className="text-xs">
          {isMarkdown ? 'Markdown' : 'HTML'}
        </Badge>
      </div>
    </div>
  );
}