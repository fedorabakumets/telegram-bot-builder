import { BotData, Node, BotGroup } from '@shared/schema';
import { generateBotFatherCommands } from './commands';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ Python –∫–æ–¥–µ
function escapeForPython(text: string): string {
  return text.replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è HTML —Ç–µ–≥–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
function stripHtmlTags(text: string): string {
  if (!text) return text;
  return text.replace(/<[^>]*>/g, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç–∏
function formatTextForPython(text: string): string {
  if (!text) return '""';
  
  // –î–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
  if (text.includes('\n')) {
    return `"""${text}"""`;
  } else {
    // –î–ª—è –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–≤—ã—á–∫–∏
    return `"${text.replace(/"/g, '\\"')}"`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
function getParseMode(formatMode: string): string {
  if (formatMode === 'html') {
    return ', parse_mode=ParseMode.HTML';
  } else if (formatMode === 'markdown') {
    return ', parse_mode=ParseMode.MARKDOWN';
  }
  return '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ JavaScript boolean –≤ Python boolean
function toPythonBoolean(value: any): string {
  return value ? 'True' : 'False';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö ID –¥–ª—è —É–∑–ª–æ–≤
function generateUniqueShortId(nodeId: string, allNodeIds: string[]): string {
  if (!nodeId) return 'node';
  
  // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–∑–ª–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  if (nodeId.endsWith('_interests')) {
    const prefix = nodeId.replace('_interests', '');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 5-6 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    return prefix.substring(0, Math.min(6, prefix.length));
  }
  
  // –î–ª—è –º–µ—Ç—Ä–æ –∏ –¥—Ä—É–≥–∏—Ö —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
  const baseShortId = nodeId.slice(-10).replace(/^_+/, '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É–∑–ª–æ–≤
  const conflicts = allNodeIds.filter(id => {
    const otherShortId = id.slice(-10).replace(/^_+/, '');
    return otherShortId === baseShortId && id !== nodeId;
  });
  
  // –ï—Å–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π ID
  if (conflicts.length === 0) {
    return baseShortId;
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –±–µ—Ä–µ–º –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
  return nodeId.replace(/[^a-zA-Z0-9]/g, '').slice(-8);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ JSON –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
function escapeForJsonString(text: string): string {
  if (!text) return '';
  return text.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
function calculateOptimalColumns(buttons: any[], nodeData?: any): number {
  if (!buttons || buttons.length === 0) return 1;
  
  const totalButtons = buttons.length;
  
  // –ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–¥–∞
  if (nodeData?.multiSelectEnabled || nodeData?.allowMultipleSelection) {
    return 2;
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  if (totalButtons >= 6) {
    return 2; // –î–ª—è 6+ –∫–Ω–æ–ø–æ–∫ - 2 –∫–æ–ª–æ–Ω–∫–∏
  } else if (totalButtons >= 3) {
    return 1; // –î–ª—è 3-5 –∫–Ω–æ–ø–æ–∫ - 1 –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  } else {
    return 1; // –î–ª—è 1-2 –∫–Ω–æ–ø–æ–∫ - 1 –∫–æ–ª–æ–Ω–∫–∞
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–ª–æ–Ω–æ–∫
function generateInlineKeyboardCode(buttons: any[], indentLevel: string, nodeId?: string, nodeData?: any, allNodeIds?: string[]): string {
  if (!buttons || buttons.length === 0) return '';
  
  let code = '';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ (selection) - –µ—Å–ª–∏ –¥–∞, —Ç–æ —ç—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
  const hasSelectionButtons = buttons.some(button => button.action === 'selection');
  const isMultipleSelection = nodeData?.allowMultipleSelection === true;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
  if (hasSelectionButtons && isMultipleSelection) {
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–∑–ª–∞ ${nodeId}`);
    const multiSelectVariable = nodeData?.multiSelectVariable || 'user_interests';
    
    code += `${indentLevel}# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
    code += `${indentLevel}if user_id not in user_data:\n`;
    code += `${indentLevel}    user_data[user_id] = {}\n`;
    code += `${indentLevel}\n`;
    code += `${indentLevel}# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n`;
    code += `${indentLevel}saved_selections = []\n`;
    code += `${indentLevel}if user_vars:\n`;
    code += `${indentLevel}    for var_name, var_data in user_vars.items():\n`;
    code += `${indentLevel}        if var_name == "${multiSelectVariable}":\n`;
    code += `${indentLevel}            if isinstance(var_data, dict) and "value" in var_data:\n`;
    code += `${indentLevel}                selections_str = var_data["value"]\n`;
    code += `${indentLevel}            elif isinstance(var_data, str):\n`;
    code += `${indentLevel}                selections_str = var_data\n`;
    code += `${indentLevel}            else:\n`;
    code += `${indentLevel}                continue\n`;
    code += `${indentLevel}            if selections_str and selections_str.strip():\n`;
    code += `${indentLevel}                saved_selections = [sel.strip() for sel in selections_str.split(",") if sel.strip()]\n`;
    code += `${indentLevel}                break\n`;
    code += `${indentLevel}\n`;
    code += `${indentLevel}# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç\n`;
    code += `${indentLevel}if "multi_select_${nodeId}" not in user_data[user_id]:\n`;
    code += `${indentLevel}    user_data[user_id]["multi_select_${nodeId}"] = saved_selections.copy()\n`;
    code += `${indentLevel}user_data[user_id]["multi_select_node"] = "${nodeId}"\n`;
    code += `${indentLevel}user_data[user_id]["multi_select_type"] = "inline"\n`;
    code += `${indentLevel}user_data[user_id]["multi_select_variable"] = "${multiSelectVariable}"\n`;
    code += `${indentLevel}logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å {len(saved_selections)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")\n`;
    code += `${indentLevel}\n`;
  }
  
  code += `${indentLevel}builder = InlineKeyboardBuilder()\n`;
  
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: generateInlineKeyboardCode –¥–ª—è —É–∑–ª–∞ ${nodeId}`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: nodeData.allowMultipleSelection = ${nodeData?.allowMultipleSelection}`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: hasSelectionButtons = ${hasSelectionButtons}, isMultipleSelection = ${isMultipleSelection}`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: continueButtonTarget = ${nodeData?.continueButtonTarget}`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç nodeData:`, JSON.stringify(nodeData, null, 2));
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: hasSelectionButtons=${hasSelectionButtons} && isMultipleSelection=${isMultipleSelection}`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${hasSelectionButtons && isMultipleSelection}`);
  
  buttons.forEach((button, index) => {
    if (button.action === "url") {
      code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
    } else if (button.action === 'goto') {
      const baseCallbackData = button.target || button.id || 'no_action';
      // –î–ª—è –∫–Ω–æ–ø–æ–∫ goto –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º target –∫–∞–∫ callback_data –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤
      code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${baseCallbackData}"))\n`;
    } else if (button.action === 'command') {
      const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
      code += `${indentLevel}logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${button.text} -> ${commandCallback}")\n`;
      code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
    } else if (button.action === 'selection') {
      // –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º callback_data –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ Telegram –≤ 64 –±–∞–π—Ç–∞
      const shortNodeId = nodeId ? generateUniqueShortId(nodeId, allNodeIds || []) : 'sel';
      const shortTarget = button.target || button.id || 'btn'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π target –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
      const callbackData = `ms_${shortNodeId}_${shortTarget}`;
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û! –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ selection: ${button.text} -> ${callbackData} (shortNodeId: ${shortNodeId}) (–¥–ª–∏–Ω–∞: ${callbackData.length})`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: üîç –ü–†–û–í–ï–†–Ø–ï–ú –≥–∞–ª–æ—á–∫–∏ –¥–ª—è ${button.text}: isMultipleSelection=${isMultipleSelection}`);
      if (isMultipleSelection) {
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–ê–õ–û–ß–ö–ò –¥–ª—è –∫–Ω–æ–ø–∫–∏ selection: ${button.text} (—É–∑–µ–ª: ${nodeId})`);
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: üìã –î–ê–ù–ù–´–ï –ö–ù–û–ü–ö–ò: text="${button.text}", target="${button.target}", id="${button.id}"`);
        code += `${indentLevel}# –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Å –≥–∞–ª–æ—á–∫–∞–º–∏: ${button.text}\n`;
        code += `${indentLevel}logging.info(f"üîß –ü–†–û–í–ï–†–Ø–ï–ú –ì–ê–õ–û–ß–ö–£: –∏—â–µ–º '${button.text}' –≤ —Å–ø–∏—Å–∫–µ: {user_data[user_id]['multi_select_${nodeId}']}")\n`;
        code += `${indentLevel}selected_mark = "‚úÖ " if "${button.text}" in user_data[user_id]["multi_select_${nodeId}"] else ""\n`;
        code += `${indentLevel}logging.info(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ê–õ–û–ß–ö–ò –¥–ª—è '${button.text}': selected_mark='{selected_mark}'")\n`;
        code += `${indentLevel}final_text = f"{selected_mark}${button.text}"\n`;
        code += `${indentLevel}logging.info(f"üì± –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–£: text='{final_text}', callback_data='${callbackData}'")\n`;
        code += `${indentLevel}builder.add(InlineKeyboardButton(text=final_text, callback_data="${callbackData}"))\n`;
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –ö–û–î –ì–ê–õ–û–ß–ï–ö –¥–ª—è ${button.text} —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º`);
      } else {
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚ùå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫–∏ –¥–ª—è ${button.text} (isMultipleSelection=${isMultipleSelection})`);
        code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
      }
    } else {
      const callbackData = button.target || button.id || 'no_action';
      code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
    }
  });
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–û–ë–ê–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  if (hasSelectionButtons && isMultipleSelection) {
    const continueText = nodeData?.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
    const callbackData = `multi_select_done_${nodeId}`;
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É "${continueText}" –¥–ª—è —É–∑–ª–∞ ${nodeId} —Å callback_data: ${callbackData}`);
    code += `${indentLevel}# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
    code += `${indentLevel}builder.add(InlineKeyboardButton(text="${continueText}", callback_data="${callbackData}"))\n`;
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞ –∏ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
  let allButtons = [...buttons];
  if (hasSelectionButtons && isMultipleSelection) {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–æ–Ω–æ–∫
    allButtons.push({ text: nodeData?.continueButtonText || '–ì–æ—Ç–æ–≤–æ' });
  }
  const columns = calculateOptimalColumns(allButtons, nodeData);
  code += `${indentLevel}builder.adjust(${columns})\n`;
  code += `${indentLevel}keyboard = builder.as_markup()\n`;
  
  return code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ
function generateVariableReplacement(variableName: string, indentLevel: string): string {
  let code = '';
  code += `${indentLevel}    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
  code += `${indentLevel}    if "{${variableName}}" in text:\n`;
  code += `${indentLevel}        if variable_value is not None:\n`;
  code += `${indentLevel}            text = text.replace("{${variableName}}", str(variable_value))\n`;
  code += `${indentLevel}        else:\n`;
  code += `${indentLevel}            # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç\n`;
  code += `${indentLevel}            text = text.replace("{${variableName}}", "${variableName}")\n`;
  return code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–º–µ–Ω—ã –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ
function generateUniversalVariableReplacement(indentLevel: string): string {
  let code = '';
  code += `${indentLevel}# –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç\n`;
  code += `${indentLevel}user_vars = await get_user_from_db(user_id)\n`;
  code += `${indentLevel}if not user_vars:\n`;
  code += `${indentLevel}    user_vars = user_data.get(user_id, {})\n`;
  code += `${indentLevel}\n`;
  code += `${indentLevel}# get_user_from_db —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ user_data\n`;
  code += `${indentLevel}if not isinstance(user_vars, dict):\n`;
  code += `${indentLevel}    user_vars = {}\n`;
  code += `${indentLevel}\n`;
  code += `${indentLevel}# –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ\n`;
  code += `${indentLevel}import re\n`;
  code += `${indentLevel}def replace_variables_in_text(text_content, variables_dict):\n`;
  code += `${indentLevel}    if not text_content or not variables_dict:\n`;
  code += `${indentLevel}        return text_content\n`;
  code += `${indentLevel}    \n`;
  code += `${indentLevel}    for var_name, var_data in variables_dict.items():\n`;
  code += `${indentLevel}        placeholder = "{" + var_name + "}"\n`;
  code += `${indentLevel}        if placeholder in text_content:\n`;
  code += `${indentLevel}            if isinstance(var_data, dict) and "value" in var_data:\n`;
  code += `${indentLevel}                var_value = str(var_data["value"]) if var_data["value"] is not None else var_name\n`;
  code += `${indentLevel}            elif var_data is not None:\n`;
  code += `${indentLevel}                var_value = str(var_data)\n`;
  code += `${indentLevel}            else:\n`;
  code += `${indentLevel}                var_value = var_name  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç\n`;
  code += `${indentLevel}            text_content = text_content.replace(placeholder, var_value)\n`;
  code += `${indentLevel}    return text_content\n`;
  code += `${indentLevel}\n`;
  code += `${indentLevel}text = replace_variables_in_text(text, user_vars)\n`;
  return code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function generateConditionalKeyboard(condition: any, indentLevel: string, nodeData?: any): string {
  if (!condition.keyboardType || condition.keyboardType === 'none' || !condition.buttons || condition.buttons.length === 0) {
    return '';
  }

  let code = '';
  
  if (condition.keyboardType === 'inline') {
    code += `${indentLevel}# –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
    code += `${indentLevel}builder = InlineKeyboardBuilder()\n`;
    
    condition.buttons.forEach((button: any) => {
      if (button.action === "url") {
        code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
      } else if (button.action === 'goto') {
        const callbackData = button.target || button.id || 'no_action';
        code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
      } else if (button.action === 'command') {
        // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const conditionalVariableName = condition.variableName || condition.variableNames?.[0] || (nodeData && nodeData.inputVariable);
        if (conditionalVariableName) {
          const conditionalCallback = `conditional_${conditionalVariableName}_${button.text}`;
          code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${conditionalCallback}"))\n`;
        } else {
          const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
          code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
        }
      } else {
        const callbackData = button.target || button.id || 'no_action';
        code += `${indentLevel}builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
      }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const columns = calculateOptimalColumns(condition.buttons, nodeData);
    code += `${indentLevel}builder.adjust(${columns})\n`;
    code += `${indentLevel}keyboard = builder.as_markup()\n`;
    code += `${indentLevel}conditional_keyboard = keyboard\n`;
    
  } else if (condition.keyboardType === 'reply') {
    code += `${indentLevel}# –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
    code += `${indentLevel}builder = ReplyKeyboardBuilder()\n`;
    
    condition.buttons.forEach((button: any) => {
      if (button.action === "contact" && button.requestContact) {
        code += `${indentLevel}builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
      } else if (button.action === "location" && button.requestLocation) {
        code += `${indentLevel}builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
      } else {
        code += `${indentLevel}builder.add(KeyboardButton(text="${button.text}"))\n`;
      }
    });
    
    code += `${indentLevel}keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)\n`;
    code += `${indentLevel}conditional_keyboard = keyboard\n`;
  }
  
  return code;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function generateConditionalMessageLogic(conditionalMessages: any[], indentLevel: string = '    ', nodeData?: any): string {
  if (!conditionalMessages || conditionalMessages.length === 0) {
    return '';
  }

  let code = '';
  const sortedConditions = [...conditionalMessages].sort((a, b) => (b.priority || 0) - (a.priority || 0));
  
  // Add variables to track conditional parse mode and keyboard
  code += `${indentLevel}conditional_parse_mode = None\n`;
  code += `${indentLevel}conditional_keyboard = None\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
  code += `${indentLevel}# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `${indentLevel}def check_user_variable(var_name, user_data_dict):\n`;
  code += `${indentLevel}    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""\n`;
  code += `${indentLevel}    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ–ª–µ user_data (–∏–∑ –ë–î)\n`;
  code += `${indentLevel}    if "user_data" in user_data_dict and user_data_dict["user_data"]:\n`;
  code += `${indentLevel}        try:\n`;
  code += `${indentLevel}            import json\n`;
  code += `${indentLevel}            parsed_data = json.loads(user_data_dict["user_data"]) if isinstance(user_data_dict["user_data"], str) else user_data_dict["user_data"]\n`;
  code += `${indentLevel}            if var_name in parsed_data:\n`;
  code += `${indentLevel}                raw_value = parsed_data[var_name]\n`;
  code += `${indentLevel}                if isinstance(raw_value, dict) and "value" in raw_value:\n`;
  code += `${indentLevel}                    var_value = raw_value["value"]\n`;
  code += `${indentLevel}                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n`;
  code += `${indentLevel}                    if var_value is not None and str(var_value).strip() != "":\n`;
  code += `${indentLevel}                        return True, str(var_value)\n`;
  code += `${indentLevel}                else:\n`;
  code += `${indentLevel}                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n`;
  code += `${indentLevel}                    if raw_value is not None and str(raw_value).strip() != "":\n`;
  code += `${indentLevel}                        return True, str(raw_value)\n`;
  code += `${indentLevel}        except (json.JSONDecodeError, TypeError):\n`;
  code += `${indentLevel}            pass\n`;
  code += `${indentLevel}    \n`;
  code += `${indentLevel}    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ user_data)\n`;
  code += `${indentLevel}    if var_name in user_data_dict:\n`;
  code += `${indentLevel}        variable_data = user_data_dict.get(var_name)\n`;
  code += `${indentLevel}        if isinstance(variable_data, dict) and "value" in variable_data:\n`;
  code += `${indentLevel}            var_value = variable_data["value"]\n`;
  code += `${indentLevel}            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n`;
  code += `${indentLevel}            if var_value is not None and str(var_value).strip() != "":\n`;
  code += `${indentLevel}                return True, str(var_value)\n`;
  code += `${indentLevel}        elif variable_data is not None and str(variable_data).strip() != "":\n`;
  code += `${indentLevel}            return True, str(variable_data)\n`;
  code += `${indentLevel}    \n`;
  code += `${indentLevel}    return False, None\n`;
  code += `${indentLevel}\n`;
  
  // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é if/elif/else —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
  for (let i = 0; i < sortedConditions.length; i++) {
    const condition = sortedConditions[i];
    const cleanedConditionText = stripHtmlTags(condition.messageText);
    const conditionText = formatTextForPython(cleanedConditionText);
    const conditionKeyword = i === 0 ? 'if' : 'elif';
    
    // Get variable names - support both new array format and legacy single variable
    const variableNames = condition.variableNames && condition.variableNames.length > 0 
      ? condition.variableNames 
      : (condition.variableName ? [condition.variableName] : []);
    
    const logicOperator = condition.logicOperator || 'AND';
    
    code += `${indentLevel}# –£—Å–ª–æ–≤–∏–µ ${i + 1}: ${condition.condition} –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${variableNames.join(', ')}\n`;
    
    switch (condition.condition) {
      case 'user_data_exists':
        if (variableNames.length === 0) {
          code += `${indentLevel}${conditionKeyword} False:  # –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
          code += `${indentLevel}    pass\n`;
          break;
        }
        
        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ —É—Å–ª–æ–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –í–ù–£–¢–†–ò
        code += `${indentLevel}${conditionKeyword} (\n`;
        for (let j = 0; j < variableNames.length; j++) {
          const varName = variableNames[j];
          const operator = (j === variableNames.length - 1) ? '' : (logicOperator === 'AND' ? ' and' : ' or');
          code += `${indentLevel}    check_user_variable("${varName}", user_data_dict)[0]${operator}\n`;
        }
        code += `${indentLevel}):\n`;
        
        // –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        code += `${indentLevel}    # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
        code += `${indentLevel}    variable_values = {}\n`;
        for (const varName of variableNames) {
          code += `${indentLevel}    _, variable_values["${varName}"] = check_user_variable("${varName}", user_data_dict)\n`;
        }
        
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode1 = getParseMode(condition.formatMode || 'text');
        if (parseMode1) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode1}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
        for (const varName of variableNames) {
          code += `${indentLevel}    if "{${varName}}" in text and variable_values["${varName}"] is not None:\n`;
          code += `${indentLevel}        text = text.replace("{${varName}}", variable_values["${varName}"])\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {variable_values} (${logicOperator})")\n`;
        break;
        
      case 'user_data_not_exists':
        if (variableNames.length === 0) {
          code += `${indentLevel}${conditionKeyword} False:  # –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
          code += `${indentLevel}    pass\n`;
          break;
        }
        
        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ —É—Å–ª–æ–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –í–ù–£–¢–†–ò (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏)
        code += `${indentLevel}${conditionKeyword} (\n`;
        for (let j = 0; j < variableNames.length; j++) {
          const varName = variableNames[j];
          const operator = (j === variableNames.length - 1) ? '' : (logicOperator === 'AND' ? ' and' : ' or');
          if (logicOperator === 'AND') {
            code += `${indentLevel}    not check_user_variable("${varName}", user_data_dict)[0]${operator}\n`;
          } else {
            code += `${indentLevel}    not check_user_variable("${varName}", user_data_dict)[0]${operator}\n`;
          }
        }
        code += `${indentLevel}):\n`;
        
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode2 = getParseMode(condition.formatMode || 'text');
        if (parseMode2) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode2}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è user_data_not_exists
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ${variableNames} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${logicOperator})")\n`;
        break;
        
      case 'user_data_equals':
        if (variableNames.length === 0) {
          code += `${indentLevel}${conditionKeyword} False:  # –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
          code += `${indentLevel}    pass\n`;
          break;
        }
        
        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ —É—Å–ª–æ–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –í–ù–£–¢–†–ò
        code += `${indentLevel}${conditionKeyword} (\n`;
        for (let j = 0; j < variableNames.length; j++) {
          const varName = variableNames[j];
          const operator = (j === variableNames.length - 1) ? '' : (logicOperator === 'AND' ? ' and' : ' or');
          code += `${indentLevel}    check_user_variable("${varName}", user_data_dict)[1] == "${condition.expectedValue || ''}"${operator}\n`;
        }
        code += `${indentLevel}):\n`;
        
        // –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        code += `${indentLevel}    # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
        code += `${indentLevel}    variable_values = {}\n`;
        for (const varName of variableNames) {
          code += `${indentLevel}    _, variable_values["${varName}"] = check_user_variable("${varName}", user_data_dict)\n`;
        }
        
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode3 = getParseMode(condition.formatMode || 'text');
        if (parseMode3) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode3}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
        for (const varName of variableNames) {
          code += `${indentLevel}    if "{${varName}}" in text and variable_values["${varName}"] is not None:\n`;
          code += `${indentLevel}        text = text.replace("{${varName}}", variable_values["${varName}"])\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è user_data_equals
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {variable_values} —Ä–∞–≤–Ω—ã '${condition.expectedValue || ''}' (${logicOperator})")\n`;
        break;
        
      case 'user_data_contains':
        if (variableNames.length === 0) {
          code += `${indentLevel}${conditionKeyword} False:  # –ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`;
          code += `${indentLevel}    pass\n`;
          break;
        }
        
        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ —É—Å–ª–æ–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –í–ù–£–¢–†–ò
        code += `${indentLevel}${conditionKeyword} (\n`;
        for (let j = 0; j < variableNames.length; j++) {
          const varName = variableNames[j];
          const operator = (j === variableNames.length - 1) ? '' : (logicOperator === 'AND' ? ' and' : ' or');
          code += `${indentLevel}    (check_user_variable("${varName}", user_data_dict)[1] is not None and "${condition.expectedValue || ''}" in str(check_user_variable("${varName}", user_data_dict)[1]))${operator}\n`;
        }
        code += `${indentLevel}):\n`;
        
        // –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        code += `${indentLevel}    # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
        code += `${indentLevel}    variable_values = {}\n`;
        for (const varName of variableNames) {
          code += `${indentLevel}    _, variable_values["${varName}"] = check_user_variable("${varName}", user_data_dict)\n`;
        }
        
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode4 = getParseMode(condition.formatMode || 'text');
        if (parseMode4) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode4}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
        for (const varName of variableNames) {
          code += `${indentLevel}    if "{${varName}}" in text and variable_values["${varName}"] is not None:\n`;
          code += `${indentLevel}        text = text.replace("{${varName}}", variable_values["${varName}"])\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è user_data_contains
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info(f"–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ {variable_values} —Å–æ–¥–µ—Ä–∂–∞—Ç '${condition.expectedValue || ''}' (${logicOperator})")\n`;
        break;
        
      case 'first_time':
        code += `${indentLevel}${conditionKeyword} user_record.get("interaction_count", 0) <= 1:\n`;
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode5 = getParseMode(condition.formatMode || 'text');
        if (parseMode5) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode5}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è first_time
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info("–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
        break;
        
      case 'returning_user':
        code += `${indentLevel}${conditionKeyword} user_record.get("interaction_count", 0) > 1:\n`;
        code += `${indentLevel}    text = ${conditionText}\n`;
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parseMode6 = getParseMode(condition.formatMode || 'text');
        if (parseMode6) {
          code += `${indentLevel}    conditional_parse_mode = "${parseMode6}"\n`;
        } else {
          code += `${indentLevel}    conditional_parse_mode = None\n`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        code += generateConditionalKeyboard(condition, indentLevel + '    ', nodeData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        code += `${indentLevel}    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
        code += `${indentLevel}    conditional_message_config = {\n`;
        code += `${indentLevel}        "condition_id": "${condition.id}",\n`;
        code += `${indentLevel}        "wait_for_input": ${toPythonBoolean(condition.waitForTextInput)},\n`;
        code += `${indentLevel}        "input_variable": "${condition.textInputVariable || ''}",\n`;
        code += `${indentLevel}        "next_node_id": "${condition.nextNodeAfterInput || ''}",\n`;
        code += `${indentLevel}        "source_type": "conditional_message"\n`;
        code += `${indentLevel}    }\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è returning_user
        if (condition.waitForTextInput) {
          code += `${indentLevel}    \n`;
          code += `${indentLevel}    # –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –≤–≤–æ–¥–∞\n`;
          code += `${indentLevel}    if conditional_message_config and conditional_message_config.get("wait_for_input"):\n`;
          code += `${indentLevel}        user_data[user_id]["waiting_for_conditional_input"] = conditional_message_config\n`;
          code += `${indentLevel}        logging.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞: {conditional_message_config}")\n`;
        }
        
        code += `${indentLevel}    logging.info("–£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")\n`;
        break;
        
      default:
        code += `${indentLevel}${conditionKeyword} False:  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: ${condition.condition}\n`;
        code += `${indentLevel}    pass\n`;
        break;
    }
  }
  
  // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º else –±–ª–æ–∫ –∑–¥–µ—Å—å - –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
  return code;
}

export function generatePythonCode(botData: BotData, botName: string = "MyBot", groups: BotGroup[] = []): string {
  const { nodes, connections } = botData;
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID —É–∑–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö ID
  const allNodeIds = nodes ? nodes.map(node => node.id) : [];
  
  // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¢–û–†–ê: –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–† –ù–ê–ß–ê–õ –†–ê–ë–û–¢–£: —É–∑–ª–æ–≤ - ${nodes?.length || 0}, —Å–≤—è–∑–µ–π - ${connections?.length || 0}`);
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —É–∑–ª—ã —Å –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
  if (nodes && nodes.length > 0) {
    console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —É–∑–ª—ã:');
    nodes.forEach((node, index) => {
      const hasMultiSelect = node.data.allowMultipleSelection || node.data.multiSelectEnabled;
      const hasButtons = node.data.buttons && node.data.buttons.length > 0;
      const continueTarget = node.data.continueButtonTarget;
      
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${index + 1}: "${node.id}" (—Ç–∏–ø: ${node.type})`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - allowMultipleSelection: ${node.data.allowMultipleSelection}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - multiSelectEnabled: ${node.data.multiSelectEnabled}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - hasMultiSelect: ${hasMultiSelect}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - –∫–Ω–æ–ø–æ–∫: ${node.data.buttons?.length || 0}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - keyboardType: ${node.data.keyboardType || '–Ω–µ—Ç'}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†:   - continueButtonTarget: ${continueTarget || '–Ω–µ—Ç'}`);
      
      if (node.id === 'interests_result') {
        console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: –ù–ê–ô–î–ï–ù interests_result!`);
        console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: interests_result –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(node.data, null, 2));
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–≤—è–∑–∏
    if (connections && connections.length > 0) {
      console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏:');
      connections.forEach((conn, index) => {
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –°–≤—è–∑—å ${index + 1}: ${conn.sourceNodeId} -> ${conn.targetNodeId}`);
      });
    }
  }
  
  let code = '"""\n';
  code += `${botName} - Telegram Bot\n`;
  code += '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder\n';
  
  const botFatherCommands = generateBotFatherCommands(nodes);
  if (botFatherCommands) {
    code += '\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è @BotFather:\n';
    code += botFatherCommands;
  }
  
  code += '"""\n\n';
  
  code += 'import asyncio\n';
  code += 'import logging\n';
  code += 'import os\n';
  code += 'import sys\n';
  code += 'import locale\n';
  code += 'from aiogram import Bot, Dispatcher, types, F\n';
  code += 'from aiogram.filters import CommandStart, Command\n';
  code += 'from aiogram.exceptions import TelegramBadRequest\n';
  code += 'from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile\n';
  code += 'from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\n';
  code += 'from aiogram.enums import ParseMode\n';
  code += 'from typing import Optional\n';
  code += 'import asyncpg\n';
  code += 'from datetime import datetime, timezone, timedelta\n';
  code += 'import json\n\n';
  
  code += '# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows\n';
  code += 'if sys.platform.startswith("win"):\n';
  code += '    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è stdout –∏ stderr\n';
  code += '    import codecs\n';
  code += '    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())\n';
  code += '    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())\n';
  code += '    \n';
  code += '    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python\n';
  code += '    if hasattr(sys.stdout, "reconfigure"):\n';
  code += '        sys.stdout.reconfigure(encoding="utf-8")\n';
  code += '        sys.stderr.reconfigure(encoding="utf-8")\n';
  code += '    \n';
  code += '    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º locale –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å UTF-8\n';
  code += '    try:\n';
  code += '        locale.setlocale(locale.LC_ALL, "en_US.UTF-8")\n';
  code += '    except locale.Error:\n';
  code += '        try:\n';
  code += '            locale.setlocale(locale.LC_ALL, "C.UTF-8")\n';
  code += '        except locale.Error:\n';
  code += '            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ locale –Ω–∞ Windows\n\n';
  
  code += '# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n';
  code += 'def get_moscow_time():\n';
  code += '    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""\n';
  code += '    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã\n';
  code += '    return datetime.now(moscow_tz).isoformat()\n\n';
  
  code += '# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)\n';
  code += 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"\n\n';
  
  code += '# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n';
  code += 'logging.basicConfig(level=logging.INFO)\n\n';
  
  code += '# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞\n';
  code += 'bot = Bot(token=BOT_TOKEN)\n';
  code += 'dp = Dispatcher()\n\n';
  
  code += '# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)\n';
  code += 'ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø
  if (groups && groups.length > 0) {
    code += '# –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n';
    code += 'CONNECTED_GROUPS = {\n';
    groups.forEach((group, index) => {
      const groupId = group.groupId || 'None';
      const isLast = index === groups.length - 1;
      code += `    "${group.name}": {\n`;
      code += `        "id": ${groupId === 'None' ? 'None' : `"${groupId}"`},\n`;
      code += `        "url": "${group.url}",\n`;
      code += `        "is_admin": ${group.isAdmin ? 'True' : 'False'},\n`;
      code += `        "chat_type": "${group.chatType || 'group'}",\n`;
      if (group.adminRights) {
        code += `        "admin_rights": ${JSON.stringify(group.adminRights, null, 12).replace(/"/g, "'")},\n`;
      }
      code += `        "description": "${group.description || ''}"\n`;
      code += `    }${isLast ? '' : ','}\n`;
    });
    code += '}\n\n';
  }
  
  code += '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n';
  code += 'DATABASE_URL = os.getenv("DATABASE_URL")\n\n';
  
  code += '# –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n';
  code += 'db_pool = None\n\n';
  
  code += '# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ë–î)\n';
  code += 'user_data = {}\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
  code += '\n# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n';
  code += 'async def init_database():\n';
  code += '    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""\n';
  code += '    global db_pool\n';
  code += '    try:\n';
  code += '        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)\n';
  code += '        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç\n';
  code += '        async with db_pool.acquire() as conn:\n';
  code += '            await conn.execute("""\n';
  code += '                CREATE TABLE IF NOT EXISTS bot_users (\n';
  code += '                    user_id BIGINT PRIMARY KEY,\n';
  code += '                    username TEXT,\n';
  code += '                    first_name TEXT,\n';
  code += '                    last_name TEXT,\n';
  code += '                    registered_at TIMESTAMP DEFAULT NOW(),\n';
  code += '                    last_interaction TIMESTAMP DEFAULT NOW(),\n';
  code += '                    interaction_count INTEGER DEFAULT 0,\n';
  code += '                    user_data JSONB DEFAULT \'{}\',\n';
  code += '                    is_active BOOLEAN DEFAULT TRUE\n';
  code += '                );\n';
  code += '            """)\n';
  code += '        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")\n';
  code += '    except Exception as e:\n';
  code += '        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")\n';
  code += '        db_pool = None\n\n';

  code += 'async def save_user_to_db(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None):\n';
  code += '    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""\n';
  code += '    if not db_pool:\n';
  code += '        return False\n';
  code += '    try:\n';
  code += '        async with db_pool.acquire() as conn:\n';
  code += '            await conn.execute("""\n';
  code += '                INSERT INTO bot_users (user_id, username, first_name, last_name)\n';
  code += '                VALUES ($1, $2, $3, $4)\n';
  code += '                ON CONFLICT (user_id) DO UPDATE SET\n';
  code += '                    username = EXCLUDED.username,\n';
  code += '                    first_name = EXCLUDED.first_name,\n';
  code += '                    last_name = EXCLUDED.last_name,\n';
  code += '                    last_interaction = NOW(),\n';
  code += '                    interaction_count = bot_users.interaction_count + 1\n';
  code += '            """, user_id, username, first_name, last_name)\n';
  code += '        return True\n';
  code += '    except Exception as e:\n';
  code += '        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: {e}")\n';
  code += '        return False\n\n';

  code += 'async def get_user_from_db(user_id: int):\n';
  code += '    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""\n';
  code += '    if not db_pool:\n';
  code += '        return None\n';
  code += '    try:\n';
  code += '        async with db_pool.acquire() as conn:\n';
  code += '            row = await conn.fetchrow("SELECT * FROM bot_users WHERE user_id = $1", user_id)\n';
  code += '            if row:\n';
  code += '                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Record –≤ —Å–ª–æ–≤–∞—Ä—å\n';
  code += '                row_dict = {key: row[key] for key in row.keys()}\n';
  code += '                # –ï—Å–ª–∏ –µ—Å—Ç—å user_data, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\n';
  code += '                if "user_data" in row_dict and row_dict["user_data"]:\n';
  code += '                    user_data = row_dict["user_data"]\n';
  code += '                    if isinstance(user_data, str):\n';
  code += '                        try:\n';
  code += '                            import json\n';
  code += '                            return json.loads(user_data)\n';
  code += '                        except (json.JSONDecodeError, TypeError):\n';
  code += '                            return {}\n';
  code += '                    elif isinstance(user_data, dict):\n';
  code += '                        return user_data\n';
  code += '                    else:\n';
  code += '                        return {}\n';
  code += '                # –ï—Å–ª–∏ –Ω–µ—Ç user_data, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å\n';
  code += '                return row_dict\n';
  code += '        return None\n';
  code += '    except Exception as e:\n';
  code += '        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î: {e}")\n';
  code += '        return None\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_command_start –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è start_handler
  code += '# –ê–ª–∏–∞—Å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n';
  code += 'async def handle_command_start(message):\n';
  code += '    """–ê–ª–∏–∞—Å –¥–ª—è start_handler, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"""\n';
  code += '    await start_handler(message)\n\n';

  code += 'async def update_user_data_in_db(user_id: int, data_key: str, data_value):\n';
  code += '    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""\n';
  code += '    if not db_pool:\n';
  code += '        return False\n';
  code += '    try:\n';
  code += '        import json\n';
  code += '        async with db_pool.acquire() as conn:\n';
  code += '            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å\n';
  code += '            await conn.execute("""\n';
  code += '                INSERT INTO bot_users (user_id) \n';
  code += '                VALUES ($1) \n';
  code += '                ON CONFLICT (user_id) DO NOTHING\n';
  code += '            """, user_id)\n';
  code += '            \n';
  code += '            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
  code += '            update_data = {data_key: data_value}\n';
  code += '            await conn.execute("""\n';
  code += '                UPDATE bot_users \n';
  code += '                SET user_data = COALESCE(user_data, \'{}\'::jsonb) || $2::jsonb,\n';
  code += '                    last_interaction = NOW()\n';
  code += '                WHERE user_id = $1\n';
  code += '            """, user_id, json.dumps(update_data))\n';
  code += '        return True\n';
  code += '    except Exception as e:\n';
  code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n';
  code += '        return False\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  code += 'async def save_user_data_to_db(user_id: int, data_key: str, data_value):\n';
  code += '    """–ê–ª–∏–∞—Å –¥–ª—è update_user_data_in_db –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""\n';
  code += '    return await update_user_data_in_db(user_id, data_key, data_value)\n\n';

  code += 'async def update_user_variable_in_db(user_id: int, variable_name: str, variable_value: str):\n';
  code += '    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""\n';
  code += '    if not db_pool:\n';
  code += '        return False\n';
  code += '    try:\n';
  code += '        import json\n';
  code += '        async with db_pool.acquire() as conn:\n';
  code += '            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å\n';
  code += '            await conn.execute("""\n';
  code += '                INSERT INTO bot_users (user_id) \n';
  code += '                VALUES ($1) \n';
  code += '                ON CONFLICT (user_id) DO NOTHING\n';
  code += '            """, user_id)\n';
  code += '            \n';
  code += '            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
  code += '            update_data = {variable_name: variable_value}\n';
  code += '            await conn.execute("""\n';
  code += '                UPDATE bot_users \n';
  code += '                SET user_data = COALESCE(user_data, \'{}\'::jsonb) || $2::jsonb,\n';
  code += '                    last_interaction = NOW()\n';
  code += '                WHERE user_id = $1\n';
  code += '            """, user_id, json.dumps(update_data))\n';
  code += '        return True\n';
  code += '    except Exception as e:\n';
  code += '        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n';
  code += '        return False\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  code += '\n# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n';
  code += 'async def is_admin(user_id: int) -> bool:\n';
  code += '    return user_id in ADMIN_IDS\n\n';
  
  code += 'async def is_private_chat(message: types.Message) -> bool:\n';
  code += '    return message.chat.type == "private"\n\n';
  
  code += 'async def check_auth(user_id: int) -> bool:\n';
  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n';
  code += '    if db_pool:\n';
  code += '        user = await get_user_from_db(user_id)\n';
  code += '        return user is not None\n';
  code += '    return user_id in user_data\n\n';
  
  code += 'def is_local_file(url: str) -> bool:\n';
  code += '    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ª–æ–∫–∞–ª—å–Ω—ã–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º"""\n';
  code += '    return url.startswith("/uploads/") or url.startswith("uploads/")\n\n';
  
  code += 'def get_local_file_path(url: str) -> str:\n';
  code += '    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL"""\n';
  code += '    if url.startswith("/"):\n';
  code += '        return url[1:]  # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à\n';
  code += '    return url\n\n';

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
  code += 'def extract_coordinates_from_yandex(url: str) -> tuple:\n';
  code += '    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""\n';
  code += '    import re\n';
  code += '    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ ll=longitude,latitude\n';
  code += '    match = re.search(r"ll=([\\d.-]+),([\\d.-]+)", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(2)), float(match.group(1))  # lat, lon\n';
  code += '    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /longitude,latitude/\n';
  code += '    match = re.search(r"/([\\d.-]+),([\\d.-]+)/", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(2)), float(match.group(1))  # lat, lon\n';
  code += '    return None, None\n\n';

  code += 'def extract_coordinates_from_google(url: str) -> tuple:\n';
  code += '    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ Google Maps"""\n';
  code += '    import re\n';
  code += '    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @latitude,longitude\n';
  code += '    match = re.search(r"@([\\d.-]+),([\\d.-]+)", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(1)), float(match.group(2))  # lat, lon\n';
  code += '    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ /latitude,longitude/\n';
  code += '    match = re.search(r"/([\\d.-]+),([\\d.-]+)/", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(1)), float(match.group(2))  # lat, lon\n';
  code += '    return None, None\n\n';

  code += 'def extract_coordinates_from_2gis(url: str) -> tuple:\n';
  code += '    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏ 2–ì–ò–°"""\n';
  code += '    import re\n';
  code += '    # –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö 2–ì–ò–°\n';
  code += '    # –§–æ—Ä–º–∞—Ç: center/longitude,latitude\n';
  code += '    match = re.search(r"center/([\\d.-]+),([\\d.-]+)", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(2)), float(match.group(1))  # lat, lon\n';
  code += '    # –§–æ—Ä–º–∞—Ç: /longitude,latitude/\n';
  code += '    match = re.search(r"/([\\d.-]+),([\\d.-]+)/", url)\n';
  code += '    if match:\n';
  code += '        return float(match.group(2)), float(match.group(1))  # lat, lon\n';
  code += '    return None, None\n\n';

  code += 'def generate_map_urls(latitude: float, longitude: float, title: str = "") -> dict:\n';
  code += '    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""\n';
  code += '    import urllib.parse\n';
  code += '    \n';
  code += '    encoded_title = urllib.parse.quote(title) if title else ""\n';
  code += '    \n';
  code += '    return {\n';
  code += '        "yandex": f"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15&l=map&pt={longitude},{latitude}",\n';
  code += '        "google": f"https://maps.google.com/?q={latitude},{longitude}",\n';
  code += '        "2gis": f"https://2gis.ru/geo/{longitude},{latitude}",\n';
  code += '        "openstreetmap": f"https://www.openstreetmap.org/?mlat={latitude}&mlon={longitude}&zoom=15"\n';
  code += '    }\n\n';

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è BotFather
  const menuCommands = (nodes || []).filter(node => 
    (node.type === 'start' || node.type === 'command') && 
    node.data.showInMenu && 
    node.data.command
  );

  if (menuCommands.length > 0) {
    code += '\n# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n';
    code += 'async def set_bot_commands():\n';
    code += '    commands = [\n';
    
    menuCommands.forEach(node => {
      const command = node.data.command?.replace('/', '') || '';
      const description = node.data.description || '–ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞';
      code += `        BotCommand(command="${command}", description="${description}"),\n`;
    });
    
    code += '    ]\n';
    code += '    await bot.set_my_commands(commands)\n\n';
  }

  // Generate handlers for each node
  (nodes || []).forEach((node: Node) => {
    if (node.type === "start") {
      code += generateStartHandler(node);
    } else if (node.type === "command") {
      code += generateCommandHandler(node);
    } else if (node.type === "photo") {
      code += generatePhotoHandler(node);
    } else if (node.type === "video") {
      code += generateVideoHandler(node);
    } else if (node.type === "audio") {
      code += generateAudioHandler(node);
    } else if (node.type === "document") {
      code += generateDocumentHandler(node);
    } else if (node.type === "sticker") {
      code += generateStickerHandler(node);
    } else if (node.type === "voice") {
      code += generateVoiceHandler(node);
    } else if (node.type === "animation") {
      code += generateAnimationHandler(node);
    } else if (node.type === "location") {
      code += generateLocationHandler(node);
    } else if (node.type === "contact") {
      code += generateContactHandler(node);
    } else if (node.type === "pin_message") {
      code += generatePinMessageHandler(node);
    } else if (node.type === "unpin_message") {
      code += generateUnpinMessageHandler(node);
    } else if (node.type === "delete_message") {
      code += generateDeleteMessageHandler(node);
    } else if (node.type === "ban_user") {
      code += generateBanUserHandler(node);
    } else if (node.type === "unban_user") {
      code += generateUnbanUserHandler(node);
    } else if (node.type === "mute_user") {
      code += generateMuteUserHandler(node);
    } else if (node.type === "unmute_user") {
      code += generateUnmuteUserHandler(node);
    } else if (node.type === "kick_user") {
      code += generateKickUserHandler(node);
    } else if (node.type === "promote_user") {
      code += generatePromoteUserHandler(node);
    } else if (node.type === "demote_user") {
      code += generateDemoteUserHandler(node);
    }
    // Note: user-input and message nodes are handled via callback handlers, not as separate command handlers
  });

  // Generate synonym handlers for all nodes
  const nodesWithSynonyms = (nodes || []).filter(node => 
    node.data.synonyms && 
    node.data.synonyms.length > 0
  );

  if (nodesWithSynonyms.length > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n';
    nodesWithSynonyms.forEach(node => {
      if (node.data.synonyms) {
        node.data.synonyms.forEach((synonym: string) => {
          if (node.type === 'start' || node.type === 'command') {
            code += generateSynonymHandler(node, synonym);
          } else if (node.type === 'ban_user' || node.type === 'unban_user' || node.type === 'mute_user' || node.type === 'unmute_user' || 
                     node.type === 'kick_user' || node.type === 'promote_user' || node.type === 'demote_user') {
            code += generateUserManagementSynonymHandler(node, synonym);
          } else {
            code += generateMessageSynonymHandler(node, synonym);
          }
        });
      }
    });
  }

  // Generate callback handlers for inline buttons AND input target nodes
  const inlineNodes = (nodes || []).filter(node => 
    node.data.keyboardType === 'inline' && node.data.buttons && node.data.buttons.length > 0
  );

  // Also collect all target nodes from user input collections
  const inputTargetNodeIds = new Set<string>();
  (nodes || []).forEach(node => {
    if (node.data.inputTargetNodeId) {
      inputTargetNodeIds.add(node.data.inputTargetNodeId);
    }
  });

  // Collect all referenced node IDs and conditional message buttons
  const allReferencedNodeIds = new Set<string>();
  const allConditionalButtons = new Set<string>();
  
  // Add nodes from inline buttons
  inlineNodes.forEach(node => {
    node.data.buttons.forEach(button => {
      if (button.action === 'goto' && button.target) {
        allReferencedNodeIds.add(button.target);
      }
    });
    
    // Also add continueButtonTarget for multi-select nodes
    if (node.data.continueButtonTarget) {
      allReferencedNodeIds.add(node.data.continueButtonTarget);
    }
  });
  
  // Collect buttons from conditional messages
  (nodes || []).forEach(node => {
    if (node.data.conditionalMessages) {
      node.data.conditionalMessages.forEach((condition: any) => {
        if (condition.buttons) {
          condition.buttons.forEach((button: any) => {
            if (button.action === 'goto' && button.target) {
              allConditionalButtons.add(button.target);
            }
          });
        }
      });
    }
  });
  
  // Add input target nodes
  inputTargetNodeIds.forEach(nodeId => {
    allReferencedNodeIds.add(nodeId);
  });

  // Add all connection targets to ensure every connected node gets a handler
  console.log(`üîó –ì–ï–ù–ï–†–ê–¢–û–†: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${connections.length} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
  connections.forEach((connection, index) => {
    console.log(`üîó –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${index}: source=${connection.source} -> target=${connection.target}`);
    if (connection.target) {
      allReferencedNodeIds.add(connection.target);
      console.log(`‚úÖ –ì–ï–ù–ï–†–ê–¢–û–†: –î–æ–±–∞–≤–ª–µ–Ω target ${connection.target} –≤ allReferencedNodeIds`);
    }
  });
  console.log(`üéØ –ì–ï–ù–ï–†–ê–¢–û–†: –§–∏–Ω–∞–ª—å–Ω—ã–π allReferencedNodeIds: ${Array.from(allReferencedNodeIds).join(', ')}`);

  if (inlineNodes.length > 0 || allReferencedNodeIds.size > 0 || allConditionalButtons.size > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫\n';
    const processedCallbacks = new Set<string>();
    
    // Skip conditional placeholder handlers - they conflict with main handlers
    // Main callback handlers below will handle all button interactions properly
    
    // Then, handle inline button nodes - create handlers for each unique button ID
    inlineNodes.forEach(node => {
      node.data.buttons.forEach(button => {
        if (button.action === 'goto' && button.id) {
          const callbackData = button.id; // Use button ID as callback_data
          
          // Avoid duplicate handlers for button IDs (not target IDs)
          if (processedCallbacks.has(callbackData)) return;
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è target —É–∑–ª–æ–≤
          if (button.target && processedCallbacks.has(button.target)) {
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: –ü–†–û–ü–£–°–ö–ê–ï–ú –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è target ${button.target} - —É–∂–µ —Å–æ–∑–¥–∞–Ω`);
            return;
          }
          
          // Find target node (–º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –Ω–µ—Ç target)
          const targetNode = button.target ? nodes.find(n => n.id === button.target) : null;
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è target –∫–∞–∫ callback_data
          const actualCallbackData = button.target || callbackData;
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º target —É–∑–µ–ª –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
          if (button.target && processedCallbacks.has(button.target)) {
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–† –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ: –ü–†–û–ü–£–°–ö–ê–ï–ú –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è target ${button.target} - —É–∂–µ —Å–æ–∑–¥–∞–Ω`);
            return;
          }
          
          // Mark this button ID as processed
          processedCallbacks.add(callbackData);
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º target –≤ processedCallbacks –°–†–ê–ó–£, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
          if (button.target) {
            processedCallbacks.add(button.target);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${button.target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ processedCallbacks –î–û —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞`);
          }
          
          // –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ interests_result –∏–ª–∏ metro_selection
          if (button.target === 'interests_result') {
            console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ–∑–¥–∞–µ–º –ü–ï–†–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è interests_result –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ');
            console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: processedCallbacks –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', Array.from(processedCallbacks));
          }
          if (button.target === 'metro_selection') {
            console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ–∑–¥–∞–µ–º –ü–ï–†–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è metro_selection –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ');
            console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: processedCallbacks –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:', Array.from(processedCallbacks));
          }
          
          // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "done_"
          const isDoneHandlerNeeded = targetNode && targetNode.data.allowMultipleSelection && targetNode.data.continueButtonTarget;
          const shortNodeIdForDone = isDoneHandlerNeeded ? actualCallbackData.slice(-10).replace(/^_+/, '') : '';
          
          // –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è interests_result
          if (actualCallbackData === 'interests_result') {
            console.log('üö® –ì–ï–ù–ï–†–ê–¢–û–† –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ: –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è interests_result!');
            console.log('üö® –ì–ï–ù–ï–†–ê–¢–û–†: –¢–µ–∫—É—â–∏–µ processedCallbacks:', Array.from(processedCallbacks));
          }
          
          if (isDoneHandlerNeeded) {
            code += `\n@dp.callback_query(lambda c: c.data == "${actualCallbackData}" or c.data.startswith("${actualCallbackData}_btn_") or c.data == "multi_select_done_${shortNodeIdForDone}")\n`;
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "multi_select_done_${shortNodeIdForDone}" –¥–ª—è —É–∑–ª–∞ ${actualCallbackData}`);
          } else {
            code += `\n@dp.callback_query(lambda c: c.data == "${actualCallbackData}" or c.data.startswith("${actualCallbackData}_btn_"))\n`;
          }
          // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ target –∏–ª–∏ button ID
          const safeFunctionName = actualCallbackData.replace(/[^a-zA-Z0-9_]/g, '_');
          
          if (actualCallbackData === 'interests_result') {
            console.log('üö® –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_callback_interests_result –≤ –û–°–ù–û–í–ù–û–ú –¶–ò–ö–õ–ï');
          }
          
          code += `async def handle_callback_${safeFunctionName}(callback_query: types.CallbackQuery):\n`;
          code += '    await callback_query.answer()\n';
          code += '    user_id = callback_query.from_user.id\n';
          code += '    callback_data = callback_query.data\n';
          code += '    \n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "done_" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
          if (isDoneHandlerNeeded) {
            code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
            code += `    if callback_data == "multi_select_done_${shortNodeIdForDone}":\n`;
            code += '        logging.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {callback_data}")\n';
            code += '        \n';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const multiSelectVariable = targetNode.data.multiSelectVariable || 'user_interests';
            code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
            code += `        selected_options = user_data.get(user_id, {}).get("multi_select_${actualCallbackData}", [])\n`;
            code += '        if selected_options:\n';
            code += '            selected_text = ", ".join(selected_options)\n';
            code += `            \n`;
            code += `            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤\n`;
            code += `            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è\n`;
            code += `            existing_data = await get_user_data_from_db(user_id, "${multiSelectVariable}")\n`;
            code += `            existing_selections = []\n`;
            code += `            if existing_data and existing_data.strip():\n`;
            code += `                existing_selections = [s.strip() for s in existing_data.split(",") if s.strip()]\n`;
            code += `            \n`;
            code += `            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –≤—ã–±–æ—Ä—ã (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏)\n`;
            code += `            all_selections = list(set(existing_selections + selected_options))\n`;
            code += `            final_text = ", ".join(all_selections)\n`;
            code += `            await update_user_data_in_db(user_id, "${multiSelectVariable}", final_text)\n`;
            code += `            logging.info(f"‚úÖ –ê–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${multiSelectVariable}: {final_text}")\n`;
            code += '        \n';
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            code += '        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
            code += '        if user_id in user_data:\n';
            code += `            user_data[user_id].pop("multi_select_${actualCallbackData}", None)\n`;
            code += '            user_data[user_id].pop("multi_select_node", None)\n';
            code += '            user_data[user_id].pop("multi_select_type", None)\n';
            code += '            user_data[user_id].pop("multi_select_variable", None)\n';
            code += '        \n';
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
            if (targetNode.data.continueButtonTarget) {
              const nextNodeId = targetNode.data.continueButtonTarget;
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–õ–ê–î–ö–ê
              console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–† CONTINUEBUTTON DEBUG:`);
              console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: targetNode.id = "${targetNode.id}"`);
              console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: targetNode.data.continueButtonTarget = "${targetNode.data.continueButtonTarget}"`);
              console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: nextNodeId = "${nextNodeId}"`);
              console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: actualCallbackData = "${actualCallbackData}"`);
              
              code += '        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n';
              code += `        next_node_id = "${nextNodeId}"\n`;
              code += `        logging.info(f"üöÄ DEBUG: targetNode.id=${targetNode.id}, continueButtonTarget=${targetNode.data.continueButtonTarget}, nextNodeId=${nextNodeId}")\n`;
              
              // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è metro_selection -> interests_result
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü—Ä–æ–≤–µ—Ä—è–µ–º metro_selection -> interests_result: targetNode.id="${targetNode.id}", nextNodeId="${nextNodeId}"`);
              if (targetNode.id.includes('metro_selection') && nextNodeId === 'interests_result') {
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É metro_selection -> interests_result`);
                code += '        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–æ –≤—ã–±–æ—Ä –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
                code += `        selected_metro = user_data.get(user_id, {}).get("multi_select_${actualCallbackData}", [])\n`;
                code += '        if user_id not in user_data:\n';
                code += '            user_data[user_id] = {}\n';
                code += '        user_data[user_id]["saved_metro_selection"] = selected_metro\n';
                code += '        user_data[user_id]["show_metro_keyboard"] = True\n';
                code += '        logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: targetNode.id={targetNode.id}, nextNodeId={nextNodeId}")\n';
                code += '        logging.info(f"üöá –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –º–µ—Ç—Ä–æ –≤—ã–±–æ—Ä: {selected_metro}, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ show_metro_keyboard=True")\n';
                code += '        \n';
              } else {
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚ùå –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É: targetNode.id="${targetNode.id}", nextNodeId="${nextNodeId}"`);
              }
              
              code += '        try:\n';
              code += `            await handle_callback_${nextNodeId.replace(/[^a-zA-Z0-9_]/g, '_')}(callback_query)\n`;
              code += '        except Exception as e:\n';
              code += '            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
              code += `            await callback_query.message.edit_text("–ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")\n`;
            } else {
              code += '        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
              code += `        await callback_query.message.edit_text("‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")\n`;
            }
            code += '        return\n';
            code += '    \n';
          }
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
          // –≠—Ç–∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ goto –∫–Ω–æ–ø–∫–∏ –∫ start —É–∑–ª—É
          
          // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–∫–∏
          code += `    button_text = "${button.text}"\n`;
          code += '    \n';
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞
          const parentNode = node; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É skipDataCollection –¥–ª—è –∫–Ω–æ–ø–∫–∏
          const shouldSkipDataCollection = button.skipDataCollection === true;
          
          if (!shouldSkipDataCollection) {
            if (parentNode && parentNode.data.inputVariable) {
              const variableName = parentNode.data.inputVariable;
              
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
              const variableValue = 'button_text';
              
              code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
              code += `    await update_user_data_in_db(user_id, "${variableName}", ${variableValue})\n`;
              code += `    logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${variableName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + str(${variableValue}) + f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
              code += '    \n';
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
              code += '    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n';
              code += '    if user_id in user_data:\n';
              code += '        # –£–¥–∞–ª—è–µ–º waiting_for_input —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–ª –¥–∞–Ω–Ω—ã–µ\n';
              code += '        if "waiting_for_input" in user_data[user_id]:\n';
              code += `            if user_data[user_id]["waiting_for_input"] == "${parentNode.id}":\n`;
              code += '                del user_data[user_id]["waiting_for_input"]\n';
              code += `                logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${variableName} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
              code += '    \n';
            } else {
              // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –µ—Å—Ç—å
              code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
              code += '    timestamp = get_moscow_time()\n';
              code += '    response_data = button_text  # –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n';
              code += '    await update_user_data_in_db(user_id, button_text, response_data)\n';
              code += '    logging.info(f"–ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {button_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
            }
          } else {
            code += '    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (skipDataCollection=true)\n';
            code += `    logging.info(f"–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞: {button_text} (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏–∑-–∑–∞ skipDataCollection)")\n`;
          }
          code += '    \n';
          
          if (targetNode) {
            
            // Handle callback nodes with variable saving
            if (targetNode.type === 'callback') {
              const action = targetNode.data.action || 'none';
              const variableName = targetNode.data.variableName || '';
              const variableValue = targetNode.data.variableValue || '';
              const successMessage = targetNode.data.successMessage || '–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!';
              
              if (action === 'save_variable' && variableName && variableValue) {
                code += `    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é "${variableName}" = "${variableValue}"\n`;
                code += `    user_data[user_id]["${variableName}"] = "${variableValue}"\n`;
                code += `    await update_user_variable_in_db(user_id, "${variableName}", "${variableValue}")\n`;
                code += `    logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${variableName} = ${variableValue} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
                code += '    \n';
                
                if (successMessage.includes('\n')) {
                  code += `    success_text = """${successMessage}"""\n`;
                } else {
                  const escapedMessage = successMessage.replace(/"/g, '\\"');
                  code += `    success_text = "${escapedMessage}"\n`;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± —É—Å–ø–µ—Ö–µ
                code += `    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
                code += `    if "{${variableName}}" in success_text:\n`;
                code += `        success_text = success_text.replace("{${variableName}}", "${variableValue}")\n`;
                
                code += '    await callback_query.message.edit_text(success_text)\n';
              }
            }
            // Handle regular message nodes (like source_friends, source_search, etc.)
            else if (targetNode.type === 'message') {
              const messageText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ";
              const cleanedMessageText = stripHtmlTags(messageText);
              const formattedText = formatTextForPython(cleanedMessageText);
              const parseMode = getParseMode(targetNode.data.formatMode);
              
              code += `    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
              code += `    text = ${formattedText}\n`;
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                
                // Use conditional message if available, otherwise use default
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                code += '    if "text" not in locals():\n';
                code += `        text = ${formattedText}\n`;
                code += '    \n';
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                code += '    if conditional_keyboard is not None:\n';
                code += '        keyboard = conditional_keyboard\n';
                code += '    else:\n';
                code += '        keyboard = None\n';
              } else {
                code += '    \n';
                code += '    # –ë–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
                code += '    keyboard = None\n';
              }
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ò–õ–ò –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏
              const hasMultipleSelection = targetNode.data.allowMultipleSelection && targetNode.data.buttons && targetNode.data.buttons.length > 0;
              const hasRegularInlineButtons = targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0;
              
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${targetNode.id} - allowMultipleSelection: ${targetNode.data.allowMultipleSelection}, –∫–Ω–æ–ø–æ–∫: ${targetNode.data.buttons?.length}, keyboardType: ${targetNode.data.keyboardType}`);
              
              if (hasMultipleSelection || hasRegularInlineButtons) {
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –°–û–ó–î–ê–ï–ú –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∑–ª–∞ ${targetNode.id} (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: ${hasMultipleSelection})`);
                code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n';
                code += '    if keyboard is None:\n';
                code += '        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é generateInlineKeyboardCode
                const keyboardCode = generateInlineKeyboardCode(targetNode.data.buttons, '        ', targetNode.id, targetNode.data, allNodeIds);
                code += keyboardCode;
              } else if (targetNode.data.keyboardType !== "inline") {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º keyboard = None —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                code += '    if keyboard is None:\n';
                code += '        keyboard = None\n';
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
                code += '    if "conditional_message_config" in locals():\n';
                code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞\n';
                code += '        wait_for_input = conditional_message_config.get("wait_for_input", False)\n';
                code += '        if wait_for_input:\n';
                code += '            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –∏–∑ —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n';
                code += '            conditional_next_node = conditional_message_config.get("next_node_id")\n';
                code += '            if conditional_next_node:\n';
                code += '                next_node_id = conditional_next_node\n';
                code += '            else:\n';
                const currentNodeConnections = connections.filter(conn => conn.source === targetNode.id);
                if (currentNodeConnections.length > 0) {
                  const nextNodeId = currentNodeConnections[0].target;
                  code += `                next_node_id = "${nextNodeId}"\n`;
                } else {
                  code += '                next_node_id = None\n';
                }
                code += '            \n';
                code += '            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞\n';
                code += '            input_variable = conditional_message_config.get("input_variable")\n';
                code += '            if not input_variable:\n';
                code += '                input_variable = f"conditional_response_{conditional_message_config.get(\'condition_id\', \'unknown\')}"\n';
                code += '            \n';
                code += '            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞\n';
                code += '            user_data[user_id]["waiting_for_conditional_input"] = {\n';
                code += '                "node_id": callback_query.data,\n';
                code += '                "condition_id": conditional_message_config.get("condition_id"),\n';
                code += '                "next_node_id": next_node_id,\n';
                code += '                "input_variable": input_variable,\n';
                code += '                "source_type": "conditional_message"\n';
                code += '            }\n';
                code += '            logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {conditional_message_config}")\n';
                code += '    \n';
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
              code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
              code += '    try:\n';
              code += '        if keyboard is not None:\n';
              code += `            await callback_query.message.edit_text(text, reply_markup=keyboard${parseMode})\n`;
              code += '        else:\n';
              code += `            await callback_query.message.edit_text(text${parseMode})\n`;
              code += '    except Exception:\n';
              code += '        if keyboard is not None:\n';
              code += `            await callback_query.message.answer(text, reply_markup=keyboard${parseMode})\n`;
              code += '        else:\n';
              code += `            await callback_query.message.answer(text${parseMode})\n`;
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —ç—Ç–æ—Ç —É–∑–µ–ª –∏–º–µ–µ—Ç collectUserInput, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
              if (targetNode.data.collectUserInput === true) {
                const inputType = targetNode.data.inputType || 'text';
                const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
                const inputTargetNodeId = targetNode.data.inputTargetNodeId;
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ò –ù–ï–¢ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞, –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
                if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0 && !targetNode.data.enableTextInput) {
                  code += '    \n';
                  code += `    logging.info(f"‚úÖ –£–∑–µ–ª ${targetNode.id} –∏–º–µ–µ—Ç –∫–Ω–æ–ø–∫–∏ –ë–ï–ó —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ - –ù–ï –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞")\n`;
                  code += `    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£ —É–∑–ª–∞ –µ—Å—Ç—å inline –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞\n`;
                } else {
                  code += '    \n';
                  code += `    logging.info(f"DEBUG: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${inputVariable}")\n`;
                  code += '    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è message —É–∑–ª–∞ —Å collectUserInput\n';
                  code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n';
                  code += '    if user_id not in user_data:\n';
                  code += '        user_data[user_id] = {}\n';
                  code += '    user_data[user_id]["waiting_for_input"] = {\n';
                  code += `        "type": "${inputType}",\n`;
                  code += `        "variable": "${inputVariable}",\n`;
                  code += '        "save_to_database": True,\n';
                  code += `        "node_id": "${targetNode.id}",\n`;
                  code += `        "next_node_id": "${inputTargetNodeId || ''}",\n`;
                  code += `        "min_length": ${targetNode.data.minLength || 0},\n`;
                  code += `        "max_length": ${targetNode.data.maxLength || 0},\n`;
                  code += '        "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
                  code += '        "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
                  code += '    }\n';
                  code += `    logging.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${inputType} –≤–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${inputVariable}")\n`;
                }
              }
            }
            // Handle different target node types
            else if (targetNode.type === 'photo') {
              const caption = targetNode.data.mediaCaption || targetNode.data.messageText || "üì∏ –§–æ—Ç–æ";
              const imageUrl = targetNode.data.imageUrl || "https://picsum.photos/800/600?random=1";
              
              code += `    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
              
              if (caption.includes('\n')) {
                code += `    caption = """${caption}"""\n`;
              } else {
                const escapedCaption = caption.replace(/"/g, '\\"');
                code += `    caption = "${escapedCaption}"\n`;
              }
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              code += '    caption = replace_variables_in_text(caption, user_vars)\n';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ç–æ
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ç–æ\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                
                // Use conditional message if available, otherwise use default caption
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                code += '    if "text" in locals():\n';
                code += '        caption = text\n';
                code += '    \n';
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                code += '    conditional_keyboard_for_photo = conditional_keyboard\n';
              }
              
              code += `    photo_url = "${imageUrl}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(photo_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(photo_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                photo_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            photo_file = photo_url\n';
              code += '        \n';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –æ–±—ã—á–Ω—É—é
              code += '        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ—Ç–æ\n';
              code += '        keyboard = None\n';
              
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '        if conditional_keyboard_for_photo is not None:\n';
                code += '            keyboard = conditional_keyboard_for_photo\n';
                code += '        elif '
              } else {
                code += '        if ';
              }
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += 'True:  # –£ —É–∑–ª–∞ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n';
                code += '            builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
                    const commandCallback = `cmd_${btn.target ? btn.target.replace('/', '') : 'unknown'}`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '            builder.adjust(2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n';
                code += '            keyboard = builder.as_markup()\n';
              } else {
                code += 'False:  # –ù–µ—Ç –∫–Ω–æ–ø–æ–∫\n';
                code += '            pass\n';
              }
              
              code += '        \n';
              code += '        await callback_query.message.delete()\n';
              code += '        if keyboard is not None:\n';
              code += '            await bot.send_photo(callback_query.from_user.id, photo_file, caption=caption, reply_markup=keyboard)\n';
              code += '        else:\n';
              code += '            await bot.send_photo(callback_query.from_user.id, photo_file, caption=caption)\n';
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ\\n{caption}")\n';
              
            } else if (targetNode.type === 'video') {
              const caption = targetNode.data.mediaCaption || targetNode.data.messageText || "üé• –í–∏–¥–µ–æ";
              const videoUrl = targetNode.data.videoUrl || "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4";
              
              code += `    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
              
              if (caption.includes('\n')) {
                code += `    caption = """${caption}"""\n`;
              } else {
                const escapedCaption = caption.replace(/"/g, '\\"');
                code += `    caption = "${escapedCaption}"\n`;
              }
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              code += '    caption = replace_variables_in_text(caption, user_vars)\n';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∏–¥–µ–æ
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–∏–¥–µ–æ\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                
                // Use conditional message if available, otherwise use default caption
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                code += '    if "text" in locals():\n';
                code += '        caption = text\n';
                code += '    \n';
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                code += '    conditional_keyboard_for_video = conditional_keyboard\n';
              }
              
              code += `    video_url = "${videoUrl}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(video_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(video_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                video_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            video_file = video_url\n';
              code += '        \n';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –æ–±—ã—á–Ω—É—é
              code += '        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–¥–µ–æ\n';
              code += '        keyboard = None\n';
              
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '        if conditional_keyboard_for_video is not None:\n';
                code += '            keyboard = conditional_keyboard_for_video\n';
                code += '        elif '
              } else {
                code += '        if ';
              }
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += 'True:  # –£ —É–∑–ª–∞ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n';
                code += '            builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
                    const commandCallback = `cmd_${btn.target ? btn.target.replace('/', '') : 'unknown'}`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '            builder.adjust(2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n';
                code += '            keyboard = builder.as_markup()\n';
              } else {
                code += 'False:  # –ù–µ—Ç –∫–Ω–æ–ø–æ–∫\n';
                code += '            pass\n';
              }
              
              code += '        \n';
              code += '        await callback_query.message.delete()\n';
              code += '        if keyboard is not None:\n';
              code += '            await bot.send_video(callback_query.from_user.id, video_file, caption=caption, reply_markup=keyboard)\n';
              code += '        else:\n';
              code += '            await bot.send_video(callback_query.from_user.id, video_file, caption=caption)\n';
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\\n{caption}")\n';
              
            } else if (targetNode.type === 'audio') {
              const caption = targetNode.data.mediaCaption || targetNode.data.messageText || "üéµ –ê—É–¥–∏–æ";
              const audioUrl = targetNode.data.audioUrl || "https://www.soundjay.com/misc/beep-07a.wav";
              
              code += `    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
              
              if (caption.includes('\n')) {
                code += `    caption = """${caption}"""\n`;
              } else {
                const escapedCaption = caption.replace(/"/g, '\\"');
                code += `    caption = "${escapedCaption}"\n`;
              }
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              code += '    caption = replace_variables_in_text(caption, user_vars)\n';
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—É–¥–∏–æ
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—É–¥–∏–æ\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                
                // Use conditional message if available, otherwise use default caption
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                code += '    if "text" in locals():\n';
                code += '        caption = text\n';
                code += '    \n';
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                code += '    conditional_keyboard_for_audio = conditional_keyboard\n';
              }
              
              code += `    audio_url = "${audioUrl}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(audio_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(audio_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                audio_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            audio_file = audio_url\n';
              code += '        \n';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –æ–±—ã—á–Ω—É—é
              code += '        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞—É–¥–∏–æ\n';
              code += '        keyboard = None\n';
              
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '        if conditional_keyboard_for_audio is not None:\n';
                code += '            keyboard = conditional_keyboard_for_audio\n';
                code += '        elif '
              } else {
                code += '        if ';
              }
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += 'True:  # –£ —É–∑–ª–∞ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n';
                code += '            builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command' && btn.target) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è audio nodes
                    const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                    code += `            # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                    code += `            builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '            keyboard = builder.as_markup()\n';
              } else {
                code += 'False:  # –ù–µ—Ç –∫–Ω–æ–ø–æ–∫\n';
                code += '            pass\n';
              }
              
              code += '        \n';
              code += '        await callback_query.message.delete()\n';
              code += '        if keyboard is not None:\n';
              code += '            await bot.send_audio(callback_query.from_user.id, audio_file, caption=caption, reply_markup=keyboard)\n';
              code += '        else:\n';
              code += '            await bot.send_audio(callback_query.from_user.id, audio_file, caption=caption)\n';
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ\\n{caption}")\n';
              
            } else if (targetNode.type === 'document') {
              const caption = targetNode.data.mediaCaption || targetNode.data.messageText || "üìÑ –î–æ–∫—É–º–µ–Ω—Ç";
              const documentUrl = targetNode.data.documentUrl || "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";
              
              if (caption.includes('\n')) {
                code += `    caption = """${caption}"""\n`;
              } else {
                const escapedCaption = caption.replace(/"/g, '\\"');
                code += `    caption = "${escapedCaption}"\n`;
              }
              
              code += `    document_url = "${documentUrl}"\n`;
              const documentName = targetNode.data.documentName || "document.pdf";
              code += `    document_name = "${documentName}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(document_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(document_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                document_file = FSInputFile(file_path, filename=document_name)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            document_file = URLInputFile(document_url, filename=document_name)\n';
              code += '        \n';
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command' && btn.target) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è document nodes
                    const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                    code += `        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_document(callback_query.from_user.id, document_file, caption=caption, reply_markup=keyboard)\n';
              } else {
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_document(callback_query.from_user.id, document_file, caption=caption)\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\\n{caption}")\n';
              
            } else if (targetNode.type === 'sticker') {
              const stickerUrl = targetNode.data.stickerUrl || "CAACAgIAAxkBAAICGGXm2KvQAAG2X8cxTmZHJkRnYwYlAAJGAANWnb0KmgiEKEZDKVQeBA";
              
              code += `    sticker_url = "${stickerUrl}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(sticker_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(sticker_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                sticker_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–ª–∏ file_id –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤\n';
              code += '            sticker_file = sticker_url\n';
              code += '        \n';
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command' && btn.target) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è sticker nodes
                    const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                    code += `        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_sticker(callback_query.from_user.id, sticker_file, reply_markup=keyboard)\n';
              } else {
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_sticker(callback_query.from_user.id, sticker_file)\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")\n';
              
            } else if (targetNode.type === 'voice') {
              const voiceUrl = targetNode.data.voiceUrl || "https://www.soundjay.com/misc/beep-07a.wav";
              const duration = targetNode.data.duration || 30;
              
              code += `    voice_url = "${voiceUrl}"\n`;
              code += `    duration = ${duration}\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(voice_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(voice_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                voice_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            voice_file = voice_url\n';
              code += '        \n';
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command' && btn.target) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è voice nodes
                    const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                    code += `        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_voice(callback_query.from_user.id, voice_file, duration=duration, reply_markup=keyboard)\n';
              } else {
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_voice(callback_query.from_user.id, voice_file, duration=duration)\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
              
            } else if (targetNode.type === 'animation') {
              const caption = targetNode.data.mediaCaption || "üé¨ –ê–Ω–∏–º–∞—Ü–∏—è";
              const animationUrl = targetNode.data.animationUrl || "https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif";
              
              if (caption.includes('\n')) {
                code += `    caption = """${caption}"""\n`;
              } else {
                const escapedCaption = caption.replace(/"/g, '\\"');
                code += `    caption = "${escapedCaption}"\n`;
              }
              
              code += `    animation_url = "${animationUrl}"\n`;
              code += '    try:\n';
              code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
              code += '        if is_local_file(animation_url):\n';
              code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
              code += '            file_path = get_local_file_path(animation_url)\n';
              code += '            if os.path.exists(file_path):\n';
              code += '                animation_file = FSInputFile(file_path)\n';
              code += '            else:\n';
              code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
              code += '        else:\n';
              code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
              code += '            animation_file = animation_url\n';
              code += '        \n';
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command' && btn.target) {
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è animation nodes
                    const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                    code += `        # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_animation(callback_query.from_user.id, animation_file, caption=caption, reply_markup=keyboard)\n';
              } else {
                code += '        await callback_query.message.delete()\n';
                code += '        await bot.send_animation(callback_query.from_user.id, animation_file, caption=caption)\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é\\n{caption}")\n';
              
            } else if (targetNode.type === 'location') {
              let latitude = targetNode.data.latitude || 55.7558;
              let longitude = targetNode.data.longitude || 37.6176;
              const title = targetNode.data.title || "";
              const address = targetNode.data.address || "";
              const city = targetNode.data.city || "";
              const country = targetNode.data.country || "";
              const mapService = targetNode.data.mapService || 'custom';
              const generateMapPreview = targetNode.data.generateMapPreview !== false;
              
              code += '    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ä—Ç\n';
              
              if (mapService === 'yandex' && targetNode.data.yandexMapUrl) {
                code += `    yandex_url = "${targetNode.data.yandexMapUrl}"\n`;
                code += '    extracted_lat, extracted_lon = extract_coordinates_from_yandex(yandex_url)\n';
                code += '    if extracted_lat and extracted_lon:\n';
                code += '        latitude, longitude = extracted_lat, extracted_lon\n';
                code += '    else:\n';
                code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
              } else if (mapService === 'google' && targetNode.data.googleMapUrl) {
                code += `    google_url = "${targetNode.data.googleMapUrl}"\n`;
                code += '    extracted_lat, extracted_lon = extract_coordinates_from_google(google_url)\n';
                code += '    if extracted_lat and extracted_lon:\n';
                code += '        latitude, longitude = extracted_lat, extracted_lon\n';
                code += '    else:\n';
                code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
              } else if (mapService === '2gis' && targetNode.data.gisMapUrl) {
                code += `    gis_url = "${targetNode.data.gisMapUrl}"\n`;
                code += '    extracted_lat, extracted_lon = extract_coordinates_from_2gis(gis_url)\n';
                code += '    if extracted_lat and extracted_lon:\n';
                code += '        latitude, longitude = extracted_lat, extracted_lon\n';
                code += '    else:\n';
                code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
              } else {
                code += `    latitude, longitude = ${latitude}, ${longitude}\n`;
              }
              
              if (title) code += `    title = "${title}"\n`;
              if (address) code += `    address = "${address}"\n`;
              
              code += '    try:\n';
              code += '        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
              code += '        await callback_query.message.delete()\n';
              
              code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n';
              if (title || address) {
                code += '        await bot.send_venue(\n';
                code += '            callback_query.from_user.id,\n';
                code += '            latitude=latitude,\n';
                code += '            longitude=longitude,\n';
                code += '            title=title,\n';
                code += '            address=address\n';
                code += '        )\n';
              } else {
                code += '        await bot.send_location(\n';
                code += '            callback_query.from_user.id,\n';
                code += '            latitude=latitude,\n';
                code += '            longitude=longitude\n';
                code += '        )\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")\n';
              code += '        await bot.send_message(callback_query.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")\n';
              
              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
              if (generateMapPreview) {
                code += '        \n';
                code += '        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã\n';
                code += '        map_urls = generate_map_urls(latitude, longitude, title)\n';
                code += '        \n';
                code += '        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç\n';
                code += '        map_builder = InlineKeyboardBuilder()\n';
                code += '        map_builder.add(InlineKeyboardButton(text="üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", url=map_urls["yandex"]))\n';
                code += '        map_builder.add(InlineKeyboardButton(text="üåç Google Maps", url=map_urls["google"]))\n';
                code += '        map_builder.add(InlineKeyboardButton(text="üìç 2–ì–ò–°", url=map_urls["2gis"]))\n';
                code += '        map_builder.add(InlineKeyboardButton(text="üåê OpenStreetMap", url=map_urls["openstreetmap"]))\n';
                
                if (targetNode.data.showDirections) {
                  code += '        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞\n';
                  code += '        map_builder.add(InlineKeyboardButton(text="üß≠ –ú–∞—Ä—à—Ä—É—Ç (–Ø–Ω–¥–µ–∫—Å)", url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}"))\n';
                  code += '        map_builder.add(InlineKeyboardButton(text="üöó –ú–∞—Ä—à—Ä—É—Ç (Google)", url=f"https://maps.google.com/maps/dir//{latitude},{longitude}"))\n';
                }
                
                code += '        map_builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞\n';
                code += '        map_keyboard = map_builder.as_markup()\n';
                code += '        \n';
                code += '        await bot.send_message(\n';
                code += '            callback_query.from_user.id,\n';
                if (targetNode.data.showDirections) {
                  code += '            "üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",\n';
                } else {
                  code += '            "üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ:",\n';
                }
                code += '            reply_markup=map_keyboard\n';
                code += '        )\n';
              }
              
              // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        \n';
                code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n';
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)\n';
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")\n';
              code += '        await bot.send_message(callback_query.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")\n';
              
            } else if (targetNode.type === 'contact') {
              const phoneNumber = targetNode.data.phoneNumber || "+7 999 123 45 67";
              const firstName = targetNode.data.firstName || "–ö–æ–Ω—Ç–∞–∫—Ç";
              const lastName = targetNode.data.lastName || "";
              const userId = targetNode.data.userId || null;
              const vcard = targetNode.data.vcard || "";
              
              code += `    phone_number = "${phoneNumber}"\n`;
              code += `    first_name = "${firstName}"\n`;
              if (lastName) code += `    last_name = "${lastName}"\n`;
              if (userId) code += `    user_id = ${userId}\n`;
              if (vcard) code += `    vcard = """${vcard}"""\n`;
              
              code += '    try:\n';
              
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                code += '        await callback_query.message.delete()\n';
                if (lastName && userId && vcard) {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name, last_name=last_name, user_id=user_id, vcard=vcard, reply_markup=keyboard)\n';
                } else if (lastName) {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name, last_name=last_name, reply_markup=keyboard)\n';
                } else {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name, reply_markup=keyboard)\n';
                }
              } else {
                code += '        await callback_query.message.delete()\n';
                if (lastName && userId && vcard) {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name, last_name=last_name, user_id=user_id, vcard=vcard)\n';
                } else if (lastName) {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name, last_name=last_name)\n';
                } else {
                  code += '        await bot.send_contact(callback_query.from_user.id, phone_number=phone_number, first_name=first_name)\n';
                }
              }
              
              code += '    except Exception as e:\n';
              code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")\n';
              code += '        await callback_query.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")\n';
              
            } else if (targetNode.type === 'user-input') {
              // Handle user-input nodes
              const inputPrompt = targetNode.data.messageText || targetNode.data.inputPrompt || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:";
              const responseType = targetNode.data.responseType || 'text';
              const inputType = targetNode.data.inputType || 'text';
              const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
              const responseOptions = targetNode.data.responseOptions || [];
              const allowMultipleSelection = targetNode.data.allowMultipleSelection || false;
              const inputValidation = targetNode.data.inputValidation || '';
              const minLength = targetNode.data.minLength || 0;
              const maxLength = targetNode.data.maxLength || 0;
              const inputTimeout = targetNode.data.inputTimeout || 60;
              const inputRequired = targetNode.data.inputRequired !== false;
              const allowSkip = targetNode.data.allowSkip || false;
              const saveToDatabase = targetNode.data.saveToDatabase || false;
              const inputRetryMessage = targetNode.data.inputRetryMessage || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
              const inputSuccessMessage = targetNode.data.inputSuccessMessage || "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!";
              const placeholder = targetNode.data.placeholder || "";
              
              code += '    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
              code += '    await callback_query.message.delete()\n';
              code += '    \n';
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              const formattedPrompt = formatTextForPython(inputPrompt);
              code += `    text = ${formattedPrompt}\n`;
              
              if (responseType === 'buttons' && responseOptions.length > 0) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                const buttonType = targetNode.data.buttonType || 'inline';
                code += '    \n';
                code += '    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞\n';
                
                if (buttonType === 'reply') {
                  code += '    builder = ReplyKeyboardBuilder()\n';
                  
                  responseOptions.forEach((option, index) => {
                    code += `    builder.add(KeyboardButton(text="${option.text}"))\n`;
                  });
                  
                  if (allowSkip) {
                    code += `    builder.add(KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"))\n`;
                  }
                  
                  code += '    keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=True)\n';
                  code += '    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)\n';
                } else {
                  code += '    builder = InlineKeyboardBuilder()\n';
                  
                  responseOptions.forEach((option, index) => {
                    const optionValue = option.value || option.text;
                    code += `    builder.add(InlineKeyboardButton(text="${option.text}", callback_data="response_${targetNode.id}_${index}"))\n`;
                  });
                  
                  if (allowSkip) {
                    code += `    builder.add(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_${targetNode.id}"))\n`;
                  }
                  
                  code += '    keyboard = builder.as_markup()\n';
                  code += '    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)\n';
                }
                code += '    \n';
                code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç\n';
                code += '    if callback_query.from_user.id not in user_data:\n';
                code += '        user_data[callback_query.from_user.id] = {}\n';
                code += '    \n';
                // Find the next node to navigate to after successful input
                const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
                const nextNodeId = nextConnection ? nextConnection.targetNodeId : null;
                
                code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞\n';
                code += '    user_data[callback_query.from_user.id]["button_response_config"] = {\n';
                code += `        "node_id": "${targetNode.id}",\n`;
                code += `        "variable": "${inputVariable}",\n`;
                code += `        "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
                code += `        "success_message": "${escapeForJsonString(inputSuccessMessage)}",\n`;
                code += `        "allow_multiple": ${toPythonBoolean(allowMultipleSelection)},\n`;
                code += `        "next_node_id": "${nextNodeId || ''}",\n`;
                code += '        "options": [\n';
                responseOptions.forEach((option, index) => {
                  const optionValue = option.value || option.text;
                  const optionAction = option.action || 'goto';
                  const optionTarget = option.target || '';
                  const optionUrl = option.url || '';
                  code += `            {"index": ${index}, "text": "${escapeForJsonString(option.text)}", "value": "${escapeForJsonString(optionValue)}", "action": "${optionAction}", "target": "${optionTarget}", "url": "${escapeForJsonString(optionUrl)}"},\n`;
                });
                code += '        ],\n';
                code += `        "selected": []\n`;
                code += '    }\n';
                
              } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                if (placeholder) {
                  code += `    placeholder_text = "${placeholder}"\n`;
                  code += '    text += f"\\n\\nüí° {placeholder_text}"\n';
                }
                
                if (allowSkip) {
                  code += '    text += "\\n\\n‚è≠Ô∏è –ù–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"\n';
                }
                
                code += '    await bot.send_message(callback_query.from_user.id, text)\n';
                code += '    \n';
                code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç\n';
                code += '    if callback_query.from_user.id not in user_data:\n';
                code += '        user_data[callback_query.from_user.id] = {}\n';
                code += '    \n';
                // Find the next node to navigate to after successful input
                const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
                const nextNodeId = nextConnection ? nextConnection.targetNodeId : null;
                
                code += '    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
                code += '    user_data[callback_query.from_user.id]["waiting_for_input"] = {\n';
                code += `        "type": "${inputType}",\n`;
                code += `        "variable": "${inputVariable}",\n`;
                code += `        "validation": "${inputValidation}",\n`;
                code += `        "min_length": ${minLength},\n`;
                code += `        "max_length": ${maxLength},\n`;
                code += `        "timeout": ${inputTimeout},\n`;
                code += `        "required": ${toPythonBoolean(inputRequired)},\n`;
                code += `        "allow_skip": ${toPythonBoolean(allowSkip)},\n`;
                code += `        "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
                code += `        "retry_message": "${escapeForJsonString(inputRetryMessage)}",\n`;
                code += `        "success_message": "${escapeForJsonString(inputSuccessMessage)}",\n`;
                code += `        "prompt": "${escapeForJsonString(inputPrompt)}",\n`;
                code += `        "node_id": "${targetNode.id}",\n`;
                code += `        "next_node_id": "${nextNodeId || ''}"\n`;
                code += '    }\n';
              }
              
            } else if (targetNode.type === 'start') {
              // Handle start nodes in callback queries - show start message with buttons
              const messageText = targetNode.data.messageText || "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!";
              const cleanedMessageText = stripHtmlTags(messageText);
              const formattedText = formatTextForPython(cleanedMessageText);
              const parseMode = getParseMode(targetNode.data.formatMode);
              
              code += `    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–µ–ª start: ${targetNode.id}\n`;
              code += `    text = ${formattedText}\n`;
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è start —É–∑–ª–æ–≤
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è start —É–∑–ª–∞\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                
                // Use conditional message if available, otherwise use default
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                code += '    if "text" not in locals():\n';
                code += `        text = ${formattedText}\n`;
                code += '    \n';
                code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                code += '    if conditional_keyboard is not None:\n';
                code += '        keyboard = conditional_keyboard\n';
                code += '    else:\n';
                code += '        keyboard = None\n';
              } else {
                code += '    \n';
                code += '    # –ë–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
                code += '    keyboard = None\n';
              }
              
              // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è start —É–∑–ª–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —É—Å–ª–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n';
                code += '    if keyboard is None:\n';
                code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è start —É–∑–ª–∞\n';
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                    const baseCallbackData = btn.target || btn.id || 'no_action';
                    const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
                    const commandCallback = `cmd_${btn.target ? btn.target.replace('/', '') : 'unknown'}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data);
                code += `        builder.adjust(${columns})\n`;
                code += '        keyboard = builder.as_markup()\n';
              }
              
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ start —É–∑–ª–∞
              code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ start —É–∑–ª–∞\n';
              code += '    try:\n';
              code += '        if keyboard is not None:\n';
              code += `            await callback_query.message.edit_text(text, reply_markup=keyboard${parseMode})\n`;
              code += '        else:\n';
              code += `            await callback_query.message.edit_text(text${parseMode})\n`;
              code += '    except Exception:\n';
              code += '        if keyboard is not None:\n';
              code += `            await callback_query.message.answer(text, reply_markup=keyboard${parseMode})\n`;
              code += '        else:\n';
              code += `            await callback_query.message.answer(text${parseMode})\n`;
              
            } else if (targetNode.type === 'command') {
              // Handle command nodes in callback queries
              const command = targetNode.data.command || '/start';
              const commandMessage = targetNode.data.messageText || `–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${command}`;
              const cleanedCommandMessage = stripHtmlTags(commandMessage);
              const formattedCommandText = formatTextForPython(cleanedCommandMessage);
              const parseMode = getParseMode(targetNode.data.formatMode);
              
              code += `    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–µ–ª command: ${targetNode.id}\n`;
              code += `    text = ${formattedCommandText}\n`;
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
              code += '    \n';
              code += generateUniversalVariableReplacement('    ');
              
              // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è command —É–∑–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è command —É–∑–ª–∞\n';
                code += '    builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    const baseCallbackData = btn.target || btn.id || 'no_action';
                    const callbackData = `${baseCallbackData}_btn_${index}`;
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    const commandCallback = `cmd_${btn.target ? btn.target.replace('/', '') : 'unknown'}`;
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                  }
                });
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data);
                code += `    builder.adjust(${columns})\n`;
                code += '    keyboard = builder.as_markup()\n';
                code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ command —É–∑–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π\n';
                code += '    try:\n';
                code += `        await callback_query.message.edit_text(text, reply_markup=keyboard${parseMode})\n`;
                code += '    except Exception:\n';
                code += `        await callback_query.message.answer(text, reply_markup=keyboard${parseMode})\n`;
              } else {
                code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ command —É–∑–ª–∞ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
                code += '    try:\n';
                code += `        await callback_query.message.edit_text(text${parseMode})\n`;
                code += '    except Exception:\n';
                code += `        await callback_query.message.answer(text${parseMode})\n`;
              }
              
            } else {
              // Universal handler for all other node types (message, photo, document, etc.)
              code += `    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–µ–ª —Ç–∏–ø–∞ ${targetNode.type}: ${targetNode.id}\n`;
              
              if (targetNode.type === 'photo') {
                // Handle photo nodes
                const photoUrl = targetNode.data.photoUrl || targetNode.data.imageUrl || "";
                const caption = targetNode.data.caption || targetNode.data.messageText || "";
                const cleanedCaption = stripHtmlTags(caption);
                const formattedCaption = formatTextForPython(cleanedCaption);
                const parseMode = getParseMode(targetNode.data.formatMode);
                
                code += `    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ\n`;
                code += `    photo_url = "${photoUrl}"\n`;
                code += `    caption = ${formattedCaption}\n`;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø–æ–¥–ø–∏—Å–∏
                code += generateUniversalVariableReplacement('    ');
                
                if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                  code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ—Ç–æ\n';
                  code += '    builder = InlineKeyboardBuilder()\n';
                  targetNode.data.buttons.forEach((btn, index) => {
                    if (btn.action === "url") {
                      code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                    } else if (btn.action === 'goto') {
                      const baseCallbackData = btn.target || btn.id || 'no_action';
                      const callbackData = `${baseCallbackData}_btn_${index}`;
                      code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                    }
                  });
                  code += '    keyboard = builder.as_markup()\n';
                  code += '    await callback_query.message.delete()\n';
                  code += `    await bot.send_photo(callback_query.from_user.id, photo=photo_url, caption=caption, reply_markup=keyboard${parseMode})\n`;
                } else {
                  code += '    await callback_query.message.delete()\n';
                  code += `    await bot.send_photo(callback_query.from_user.id, photo=photo_url, caption=caption${parseMode})\n`;
                }
                
              } else {
                // Handle message and other text-based nodes
                const targetText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ";
                const cleanedText = stripHtmlTags(targetText);
                const formattedTargetText = formatTextForPython(cleanedText);
                const parseMode = getParseMode(targetNode.data.formatMode);
                
                code += `    text = ${formattedTargetText}\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ
                code += generateUniversalVariableReplacement('    ');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è keyboard —É–∑–ª–æ–≤ —Å collectUserInput
                if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                  code += '    \n';
                  code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è keyboard —É–∑–ª–∞\n';
                  code += '    user_record = await get_user_from_db(callback_query.from_user.id)\n';
                  code += '    if not user_record:\n';
                  code += '        user_record = user_data.get(callback_query.from_user.id, {})\n';
                  code += '    user_data_dict = user_record if user_record else user_data.get(callback_query.from_user.id, {})\n';
                  code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                  code += '    \n';
                  
                  // Use conditional message if available, otherwise use default
                  code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
                  code += '    if "text" not in locals():\n';
                  code += `        text = ${formattedTargetText}\n`;
                  code += '    \n';
                  code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å\n';
                  code += '    if conditional_keyboard is not None:\n';
                  code += '        keyboard = conditional_keyboard\n';
                  code += '    else:\n';
                  code += '        keyboard = None\n';
                  code += '    \n';
                }
              }
            
              // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
              if (targetNode.data.collectUserInput === true) {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
                const inputType = targetNode.data.inputType || 'text';
                const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
                const saveToDatabase = targetNode.data.saveToDatabase !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è collectUserInput
                const inputTargetNodeId = targetNode.data.inputTargetNodeId;
                
                code += '    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)\n';
                code += '    if callback_query.from_user.id not in user_data:\n';
                code += '        user_data[callback_query.from_user.id] = {}\n';
                code += '    \n';
                code += '    user_data[callback_query.from_user.id]["waiting_for_input"] = {\n';
                code += `        "type": "${inputType}",\n`;
                code += `        "variable": "${inputVariable}",\n`;
                code += `        "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
                code += `        "node_id": "${targetNode.id}",\n`;
                code += `        "next_node_id": "${inputTargetNodeId || ''}",\n`;
                code += `        "min_length": ${targetNode.data.minLength || 0},\n`;
                code += `        "max_length": ${targetNode.data.maxLength || 0},\n`;
                code += '        "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
                code += '        "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
                code += '    }\n';
                code += '    \n';
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—è –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞\n';
                  code += '    if "keyboard" not in locals() or keyboard is None:\n';
                  code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (+ —Å–±–æ—Ä –≤–≤–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω)\n';
                  code += '        builder = InlineKeyboardBuilder()\n';
                  targetNode.data.buttons.forEach((btn, index) => {
                    if (btn.action === "url") {
                      code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                    } else if (btn.action === 'goto') {
                      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
                      const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                      const uniqueCallbackData = `${callbackData}_btn_${targetNode.data.buttons.indexOf(btn)}`;
                      code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${uniqueCallbackData}"))\n`;
                    } else if (btn.action === 'command') {
                      // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
                      const commandCallback = `cmd_${btn.target ? btn.target.replace('/', '') : 'unknown'}`;
                      code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
                    }
                  });
                  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                  const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data);
                  code += `        builder.adjust(${columns})\n`;
                  code += '        keyboard = builder.as_markup()\n';
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                  let parseModeTarget = '';
                  if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                    parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                  } else if (targetNode.data.formatMode === 'html') {
                    parseModeTarget = ', parse_mode=ParseMode.HTML';
                  }
                  code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                  code += `    try:\n`;
                  code += `        await callback_query.message.edit_text(text, reply_markup=keyboard${parseModeTarget})\n`;
                  code += `    except Exception as e:\n`;
                  code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                  code += `        await callback_query.message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
                } else {
                  code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                  code += `    try:\n`;
                  code += `        await callback_query.message.edit_text(text)\n`;
                  code += `    except Exception as e:\n`;
                  code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                  code += `        await callback_query.message.answer(text)\n`;
                }
                code += '    \n';
              } else {
                // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞
                
                // Handle keyboard for target node
                code += `    # DEBUG: –£–∑–µ–ª ${targetNode.id} - hasRegularButtons=${toPythonBoolean(targetNode.data.buttons && targetNode.data.buttons.length > 0)}, hasInputCollection=False\n`;
                code += `    logging.info(f"DEBUG: –£–∑–µ–ª ${targetNode.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - keyboardType=${targetNode.data.keyboardType}, buttons=${targetNode.data.buttons ? targetNode.data.buttons.length : 0}")\n`;
                if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
                  code += `    logging.info(f"DEBUG: –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∑–ª–∞ ${targetNode.id} —Å ${targetNode.data.buttons.length} –∫–Ω–æ–ø–∫–∞–º–∏")\n`;
                  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
                  code += '    if "keyboard" not in locals() or keyboard is None:\n';
                  code += '        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
                  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é generateInlineKeyboardCode
                  const keyboardCode = generateInlineKeyboardCode(targetNode.data.buttons, '        ', targetNode.id, targetNode.data, allNodeIds);
                  code += keyboardCode;
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                  let parseModeTarget = '';
                  if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                    parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                  } else if (targetNode.data.formatMode === 'html') {
                    parseModeTarget = ', parse_mode=ParseMode.HTML';
                  }
                  code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                  code += `    try:\n`;
                  code += `        await callback_query.message.edit_text(text, reply_markup=keyboard${parseModeTarget})\n`;
                  code += `    except Exception as e:\n`;
                  code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                  code += `        await callback_query.message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
                } else if (targetNode.data.keyboardType === "reply" && targetNode.data.buttons.length > 0) {
                  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
                  code += '    if "keyboard" not in locals() or keyboard is None:\n';
                  code += '        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
                  code += '        builder = ReplyKeyboardBuilder()\n';
                  targetNode.data.buttons.forEach((btn, index) => {
                    code += `        builder.add(KeyboardButton(text="${btn.text}"))\n`;
                  });
                  const resizeKeyboard = toPythonBoolean(targetNode.data.resizeKeyboard);
                  const oneTimeKeyboard = toPythonBoolean(targetNode.data.oneTimeKeyboard);
                  code += `        keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
                  code += '    # –î–ª—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ\n';
                  code += '    try:\n';
                  code += '        await callback_query.message.delete()\n';
                  code += '    except:\n';
                  code += '        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è\n';
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                  let parseModeTarget = '';
                  if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                    parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                  } else if (targetNode.data.formatMode === 'html') {
                    parseModeTarget = ', parse_mode=ParseMode.HTML';
                  }
                  code += `    await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard${parseModeTarget})\n`;
                } else {
                  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                  let parseModeTarget = '';
                  if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                    parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                  } else if (targetNode.data.formatMode === 'html') {
                    parseModeTarget = ', parse_mode=ParseMode.HTML';
                  }
                  code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                  code += `    try:\n`;
                  code += `        await callback_query.message.edit_text(text${parseModeTarget})\n`;
                  code += `    except Exception as e:\n`;
                  code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                  code += `        await callback_query.message.answer(text${parseModeTarget})\n`;
                }
              } // –ó–∞–∫—Ä—ã–≤–∞–µ–º else –±–ª–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
            } // –ó–∞–∫—Ä—ã–≤–∞–µ–º else –±–ª–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª)
          } else {
            // –ö–Ω–æ–ø–∫–∞ –±–µ–∑ —Ü–µ–ª–∏ - –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            code += '    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–∏–∫—É–¥–∞ –Ω–µ –≤–µ–¥–µ—Ç\n';
            code += '    await callback_query.answer("‚ö†Ô∏è –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)\n';
          }
        } else if (button.action === 'command' && button.id) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏–µ–º "command"
          const callbackData = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
          
          // Avoid duplicate handlers
          if (processedCallbacks.has(callbackData)) return;
          processedCallbacks.add(callbackData);
          
          code += `\n@dp.callback_query(lambda c: c.data == "${callbackData}")\n`;
          const safeFunctionName = callbackData.replace(/[^a-zA-Z0-9_]/g, '_');
          code += `async def handle_callback_${safeFunctionName}(callback_query: types.CallbackQuery):\n`;
          code += '    await callback_query.answer()\n';
          code += '    user_id = callback_query.from_user.id\n';
          code += `    button_text = "${button.text}"\n`;
          code += '    \n';
          code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
          code += '    timestamp = get_moscow_time()\n';
          code += '    response_data = button_text\n';
          code += '    await update_user_data_in_db(user_id, button_text, response_data)\n';
          code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ ${button.target || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
          code += '    \n';
          
          // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è callback –∫–Ω–æ–ø–æ–∫
          if (button.target) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É - —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            const command = button.target.startsWith('/') ? button.target.replace('/', '') : button.target;
            const handlerName = `${command}_handler`;
            
            code += `    # –í—ã–∑—ã–≤–∞–µ–º ${handlerName} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —á–µ—Ä–µ–∑ edit_text\n`;
            code += '    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è\n';
            code += '    class FakeMessageEdit:\n';
            code += '        def __init__(self, callback_query):\n';
            code += '            self.from_user = callback_query.from_user\n';
            code += '            self.chat = callback_query.message.chat\n';
            code += '            self.date = callback_query.message.date\n';
            code += '            self.message_id = callback_query.message.message_id\n';
            code += '            self._callback_query = callback_query\n';
            code += '        \n';
            code += '        async def answer(self, text, parse_mode=None, reply_markup=None):\n';
            code += '            await self._callback_query.message.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)\n';
            code += '        \n';
            code += '        async def edit_text(self, text, parse_mode=None, reply_markup=None):\n';
            code += '            await self._callback_query.message.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)\n';
            code += '    \n';
            code += '    fake_edit_message = FakeMessageEdit(callback_query)\n';
            code += `    await ${handlerName}(fake_edit_message)\n`;
          } else {
            code += '    await callback_query.message.edit_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")\n';
          }
        }
      });
    });
    
    // CRITICAL FIX: Ensure interests_result gets a handler BUT avoid duplicates
    console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–† CRITICAL FIX: –ü—Ä–æ–≤–µ—Ä—è–µ–º interests_result –æ–±—Ä–∞–±–æ—Ç—á–∏–∫');
    console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: processedCallbacks –ø–µ—Ä–µ–¥ check:', Array.from(processedCallbacks));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ interests_result —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ
    const wasInterestsResultProcessed = processedCallbacks.has('interests_result');
    console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: interests_result —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ?', wasInterestsResultProcessed);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —Å–æ–∑–¥–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
    if (wasInterestsResultProcessed) {
      console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü–†–û–ü–£–°–ö–ê–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è interests_result');
      console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: interests_result —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ, –∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä');
    } else {
      console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è interests_result (–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ)');
      processedCallbacks.add('interests_result');
      const interestsResultNode = nodes.find(n => n.id === 'interests_result');
      if (interestsResultNode) {
        processedCallbacks.add('interests_result');
        code += `\n@dp.callback_query(lambda c: c.data == "interests_result" or c.data.startswith("interests_result_btn_"))\n`;
        code += `async def handle_callback_interests_result(callback_query: types.CallbackQuery):\n`;
        code += '    await callback_query.answer()\n';
        code += '    # Handle interests_result node\n';
        code += '    user_id = callback_query.from_user.id\n';
        
        // Add the full message handling for interests_result node
        const messageText = interestsResultNode.data.messageText || "–†–µ–∑—É–ª—å—Ç–∞—Ç";
        const cleanedMessageText = stripHtmlTags(messageText);
        const formattedText = formatTextForPython(cleanedMessageText);
        
        code += `    text = ${formattedText}\n`;
        code += '    \n';
        code += generateUniversalVariableReplacement('    ');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è interests_result - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º interests_result —É–∑–µ–ª - –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É');
        code += '    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
        code += '    logging.info("üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –í–æ—à–ª–∏ –≤ —É–∑–µ–ª interests_result")\n';
        code += '    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–ª–∞–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å\n';
        code += '    user_vars = await get_user_from_db(user_id)\n';
        code += '    if not user_vars:\n';
        code += '        user_vars = user_data.get(user_id, {})\n';
        code += '        logging.info("üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: user_vars –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ user_data")\n';
        code += '    else:\n';
        code += '        logging.info("üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: user_vars –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")\n';
        code += '    \n';
        code += '    show_metro_keyboard = False\n';
        code += '    if isinstance(user_vars, dict):\n';
        code += '        if "show_metro_keyboard" in user_vars:\n';
        code += '            show_metro_keyboard = str(user_vars["show_metro_keyboard"]).lower() == "true"\n';
        code += '            logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ù–∞—à–ª–∏ show_metro_keyboard –≤ user_vars: {show_metro_keyboard}")\n';
        code += '    \n';
        code += '    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n';
        code += '    if not show_metro_keyboard:\n';
        code += '        show_metro_keyboard = user_data.get(user_id, {}).get("show_metro_keyboard", False)\n';
        code += '        logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ü—Ä–æ–≤–µ—Ä–∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {show_metro_keyboard}")\n';
        code += '    \n';
        code += '    saved_metro = user_data.get(user_id, {}).get("saved_metro_selection", [])\n';
        code += '    logging.info(f"üöá interests_result: show_metro_keyboard={show_metro_keyboard}, saved_metro={saved_metro}")\n';
        code += '    \n';
        
        // –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª metro_selection –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ–≥–æ –∫–Ω–æ–ø–æ–∫
        const metroNode = nodes.find(n => n.id.includes('metro_selection'));
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü–æ–∏—Å–∫ —É–∑–ª–∞ metro_selection - –Ω–∞–π–¥–µ–Ω: ${metroNode ? '–¥–∞' : '–Ω–µ—Ç'}`);
        if (metroNode && metroNode.data.buttons) {
          console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª metro_selection –Ω–∞–π–¥–µ–Ω: ${metroNode.id}, –∫–Ω–æ–ø–æ–∫: ${metroNode.data.buttons.length}`);
          code += '    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n';
          code += '    if show_metro_keyboard:\n';
          code += '        logging.info("üöá –ü–û–ö–ê–ó–´–í–ê–ï–ú –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ interests_result")\n';
          code += '        builder = InlineKeyboardBuilder()\n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ—Ç—Ä–æ
          metroNode.data.buttons.forEach((btn, index) => {
            const shortNodeId = metroNode.id.slice(-10).replace(/^_+/, '');
            const callbackData = `ms_${shortNodeId}_${btn.target || `btn_${index}`}`;
            code += `        # –ö–Ω–æ–ø–∫–∞ –º–µ—Ç—Ä–æ: ${btn.text}\n`;
            code += `        selected_metro = "${btn.text}" in saved_metro\n`;
            code += `        button_text = "‚úÖ " + "${btn.text}" if selected_metro else "${btn.text}"\n`;
            code += `        builder.add(InlineKeyboardButton(text=button_text, callback_data="${callbackData}"))\n`;
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data –¥–ª—è handle_multi_select_done
          const metroCallbackData = `multi_select_done_${metroNode.id}`;
          code += `        builder.add(InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="${metroCallbackData}"))\n`;
          code += '        builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥\n';
          code += '        metro_keyboard = builder.as_markup()\n';
          code += '        \n';
          
          // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ interests_result
          code += '        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ interests_result\n';
          if (interestsResultNode.data.buttons && interestsResultNode.data.buttons.length > 0) {
            code += '        result_builder = InlineKeyboardBuilder()\n';
            interestsResultNode.data.buttons.forEach((btn, index) => {
              if (btn.action === "goto" && btn.target) {
                const btnCallbackData = `${btn.target}_btn_${index}`;
                code += `        result_builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btnCallbackData}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `        result_builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              } else if (btn.action === "url") {
                code += `        result_builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
              }
            });
            code += '        result_keyboard = result_builder.as_markup()\n';
            code += '        \n';
            code += '        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
            code += '        combined_keyboard = InlineKeyboardMarkup(inline_keyboard=metro_keyboard.inline_keyboard + result_keyboard.inline_keyboard)\n';
            code += '        await bot.send_message(user_id, text, reply_markup=combined_keyboard)\n';
          } else {
            code += '        await bot.send_message(user_id, text, reply_markup=metro_keyboard)\n';
          }
          
          code += '        # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ show_metro_keyboard, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –∞–∫—Ç–∏–≤–Ω–æ–π\n';
          code += '        logging.info("üöá –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ—Ç—Ä–æ –ø–æ–∫–∞–∑–∞–Ω–∞ –∏ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π")\n';
          code += '    else:\n';
          code += '        # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
          
          // Handle buttons if any (–±–µ–∑ –º–µ—Ç—Ä–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
          if (interestsResultNode.data.buttons && interestsResultNode.data.buttons.length > 0) {
            code += '        builder = InlineKeyboardBuilder()\n';
            interestsResultNode.data.buttons.forEach((btn, index) => {
              if (btn.action === "goto" && btn.target) {
                const btnCallbackData = `${btn.target}_btn_${index}`;
                code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btnCallbackData}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              } else if (btn.action === "url") {
                code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
              }
            });
            code += '        keyboard = builder.as_markup()\n';
            code += '        await bot.send_message(user_id, text, reply_markup=keyboard)\n';
          } else {
            code += '        await bot.send_message(user_id, text)\n';
          }
        } else {
          console.log('üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª metro_selection –ù–ï –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫');
          // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –µ—Å–ª–∏ —É–∑–ª–∞ –º–µ—Ç—Ä–æ –Ω–µ—Ç
          code += '    logging.info("üöá –£–∑–µ–ª metro_selection –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É")\n';
          if (interestsResultNode.data.buttons && interestsResultNode.data.buttons.length > 0) {
            code += '    builder = InlineKeyboardBuilder()\n';
            interestsResultNode.data.buttons.forEach((btn, index) => {
              if (btn.action === "goto" && btn.target) {
                const btnCallbackData = `${btn.target}_btn_${index}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btnCallbackData}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              } else if (btn.action === "url") {
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
              }
            });
            code += '    keyboard = builder.as_markup()\n';
            code += '    await bot.send_message(user_id, text, reply_markup=keyboard)\n';
          } else {
            code += '    await bot.send_message(user_id, text)\n';
          }
        }
        code += '\n';
      }
    }

    // Now generate callback handlers for all remaining referenced nodes that don't have inline buttons
    console.log(`üîç –ì–ï–ù–ï–†–ê–¢–û–†: –û–±—Ä–∞–±–æ—Ç–∫–∞ allReferencedNodeIds: ${Array.from(allReferencedNodeIds).join(', ')}`);
    console.log(`üîç –ì–ï–ù–ï–†–ê–¢–û–†: –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callbacks: ${Array.from(processedCallbacks).join(', ')}`);
    
    allReferencedNodeIds.forEach(nodeId => {
      console.log(`üîé –ì–ï–ù–ï–†–ê–¢–û–†: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–µ–ª ${nodeId}`);
      if (!processedCallbacks.has(nodeId)) {
        console.log(`‚úÖ –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${nodeId} –ù–ï –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫`);
        const targetNode = nodes.find(n => n.id === nodeId);
        if (targetNode) {
          console.log(`üìã –ì–ï–ù–ï–†–ê–¢–û–†: –ù–∞–π–¥–µ–Ω —É–∑–µ–ª ${nodeId}, —Ç–∏–ø: ${targetNode.type}`);
          console.log(`üìã –ì–ï–ù–ï–†–ê–¢–û–†: allowMultipleSelection: ${targetNode.data.allowMultipleSelection}`);
          console.log(`üìã –ì–ï–ù–ï–†–ê–¢–û–†: keyboardType: ${targetNode.data.keyboardType}`);
          console.log(`üìã –ì–ï–ù–ï–†–ê–¢–û–†: –∫–Ω–æ–ø–æ–∫: ${targetNode.data.buttons?.length || 0}`);
          console.log(`üìã –ì–ï–ù–ï–†–ê–¢–û–†: continueButtonTarget: ${targetNode.data.continueButtonTarget || '–Ω–µ—Ç'}`);
          
          if (nodeId === 'interests_result') {
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–† ALL_REFERENCED: –°–û–ó–î–ê–ï–ú –¢–†–ï–¢–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø interests_result!`);
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–† ALL_REFERENCED: interests_result –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(targetNode.data, null, 2));
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–† ALL_REFERENCED: –≠–¢–û –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ò–°–¢–û–ß–ù–ò–ö–û–ú –ö–û–ù–§–õ–ò–ö–¢–ê –ö–õ–ê–í–ò–ê–¢–£–†!`);
          }
          
          // –í–ê–ñ–ù–û: –ù–µ —Å–æ–∑–¥–∞–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "start", –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
          if (nodeId === 'start') {
            console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–∑–ª–∞ ${nodeId} - —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–Ω–µ–µ`);
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
          }
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º interests_result –∏ metro_selection
          if (nodeId === 'interests_result') {
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: –ü–†–û–ü–£–°–ö–ê–ï–ú –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è interests_result - —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ`);
            return; // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ interests_result
          }
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è metro_selection
          if (nodeId === 'metro_selection') {
            console.log(`üö® –ì–ï–ù–ï–†–ê–¢–û–†: –ü–†–û–ü–£–°–ö–ê–ï–ú –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è metro_selection - —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ`);
            return; // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ metro_selection
          }
          
          processedCallbacks.add(nodeId);
          
          // Create callback handler for this node that can handle multiple buttons AND multi-select "done" button
          const safeFunctionName = nodeId.replace(/[^a-zA-Z0-9_]/g, '_');
          const shortNodeIdForDone = nodeId.slice(-10).replace(/^_+/, ''); // –¢–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
          code += `\n@dp.callback_query(lambda c: c.data == "${nodeId}" or c.data.startswith("${nodeId}_btn_") or c.data == "done_${shortNodeIdForDone}")\n`;
          code += `async def handle_callback_${safeFunctionName}(callback_query: types.CallbackQuery):\n`;
          code += '    await callback_query.answer()\n';
          code += '    user_id = callback_query.from_user.id\n';
          code += '    callback_data = callback_query.data\n';
          code += '    \n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
          if (targetNode.data.allowMultipleSelection) {
            code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ"\n';
            code += `    if callback_data == "done_${shortNodeIdForDone}":\n`;
            code += '        logging.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {callback_data}")\n';
            code += '        \n';
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const multiSelectVariable = targetNode.data.multiSelectVariable || 'user_interests';
            code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
            code += `        selected_options = user_data.get(user_id, {}).get("multi_select_${nodeId}", [])\n`;
            code += '        if selected_options:\n';
            code += '            selected_text = ", ".join(selected_options)\n';
            code += `            \n`;
            code += `            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤\n`;
            code += `            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è\n`;
            code += `            existing_data = await get_user_data_from_db(user_id, "${multiSelectVariable}")\n`;
            code += `            existing_selections = []\n`;
            code += `            if existing_data and existing_data.strip():\n`;
            code += `                existing_selections = [s.strip() for s in existing_data.split(",") if s.strip()]\n`;
            code += `            \n`;
            code += `            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –Ω–æ–≤—ã–µ –≤—ã–±–æ—Ä—ã (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏)\n`;
            code += `            all_selections = list(set(existing_selections + selected_options))\n`;
            code += `            final_text = ", ".join(all_selections)\n`;
            code += `            await update_user_data_in_db(user_id, "${multiSelectVariable}", final_text)\n`;
            code += `            logging.info(f"‚úÖ –ê–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ${multiSelectVariable}: {final_text}")\n`;
            code += '        \n';
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            code += '        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
            code += '        if user_id in user_data:\n';
            code += `            user_data[user_id].pop("multi_select_${nodeId}", None)\n`;
            code += '            user_data[user_id].pop("multi_select_node", None)\n';
            code += '            user_data[user_id].pop("multi_select_type", None)\n';
            code += '            user_data[user_id].pop("multi_select_variable", None)\n';
            code += '        \n';
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
            if (targetNode.data.continueButtonTarget) {
              const nextNodeId = targetNode.data.continueButtonTarget;
              code += '        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n';
              code += `        next_node_id = "${nextNodeId}"\n`;
              code += '        try:\n';
              code += `            await handle_callback_${nextNodeId.replace(/[^a-zA-Z0-9_]/g, '_')}(callback_query)\n`;
              code += '        except Exception as e:\n';
              code += '            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
              code += `            await callback_query.message.edit_text("–ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")\n`;
            } else {
              code += '        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
              code += `        await callback_query.message.edit_text("‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")\n`;
            }
            code += '        return\n';
            code += '    \n';
          }
          
          // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞  
          if (targetNode && targetNode.data.inputVariable) {
            const variableName = targetNode.data.inputVariable;
            const variableValue = 'callback_query.data';
            
            code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
            code += `    await update_user_data_in_db(user_id, "${variableName}", ${variableValue})\n`;
            code += `    logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${variableName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + str(${variableValue}) + f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
            code += '    \n';
          }
          
          code += `    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–µ–ª ${nodeId}: ${nodeId}\n`;
          const messageText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ";
          const formattedText = formatTextForPython(messageText);
          code += `    text = ${formattedText}\n`;
          code += '    \n';
          code += generateUniversalVariableReplacement('    ');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ —É–∑–ª—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ selection –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
          const hasSelectionButtons = targetNode.data.buttons && targetNode.data.buttons.some(btn => btn.action === 'selection');
          if (targetNode.data.allowMultipleSelection || hasSelectionButtons) {
            // –£–∑–µ–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º - —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            console.log(`üéØ –ì–ï–ù–ï–†–ê–¢–û–†: ========================================`);
            const reason = hasSelectionButtons ? '–ò–ú–ï–ï–¢ –ö–ù–û–ü–ö–ò SELECTION' : '–ò–ú–ï–ï–¢ allowMultipleSelection=true';
            console.log(`üéØ –ì–ï–ù–ï–†–ê–¢–û–†: –£–ó–ï–õ ${nodeId} ${reason}`);
            console.log(`üéØ –ì–ï–ù–ï–†–ê–¢–û–†: –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –í–´–ü–û–õ–ù–ï–ù–ò–Ø!`);
            console.log(`üîò –ì–ï–ù–ï–†–ê–¢–û–†: –ö–Ω–æ–ø–∫–∏ —É–∑–ª–∞ ${nodeId}:`, targetNode.data.buttons?.map(b => `${b.text} (action: ${b.action})`)?.join(', ') || '–ù–ï–¢ –ö–ù–û–ü–û–ö');
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: continueButtonTarget –¥–ª—è ${nodeId}: ${targetNode.data.continueButtonTarget}`);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: multiSelectVariable –¥–ª—è ${nodeId}: ${targetNode.data.multiSelectVariable}`);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: hasSelectionButtons: ${hasSelectionButtons}`);
            console.log(`üéØ –ì–ï–ù–ï–†–ê–¢–û–†: ========================================`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            const multiSelectVariable = targetNode.data.multiSelectVariable || 'user_interests';
            
            code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
            code += '    if user_id not in user_data:\n';
            code += '        user_data[user_id] = {}\n';
            code += '    \n';
            code += '    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n';
            code += '    saved_selections = []\n';
            code += '    if user_vars:\n';
            code += `        for var_name, var_data in user_vars.items():\n`;
            code += `            if var_name == "${multiSelectVariable}":\n`;
            code += '                if isinstance(var_data, dict) and "value" in var_data:\n';
            code += '                    selections_str = var_data["value"]\n';
            code += '                elif isinstance(var_data, str):\n';
            code += '                    selections_str = var_data\n';
            code += '                else:\n';
            code += '                    continue\n';
            code += '                if selections_str and selections_str.strip():\n';
            code += '                    saved_selections = [sel.strip() for sel in selections_str.split(",") if sel.strip()]\n';
            code += '                    break\n';
            code += '    \n';
            code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç\n';
            code += `    if "multi_select_${nodeId}" not in user_data[user_id]:\n`;
            code += `        user_data[user_id]["multi_select_${nodeId}"] = saved_selections.copy()\n`;
            code += `    user_data[user_id]["multi_select_node"] = "${nodeId}"\n`;
            code += `    user_data[user_id]["multi_select_type"] = "inline"\n`;
            code += `    user_data[user_id]["multi_select_variable"] = "${multiSelectVariable}"\n`;
            code += '    logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å {len(saved_selections)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")\n';
            code += '    \n';
            
            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
            code += '    builder = InlineKeyboardBuilder()\n';
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: targetNode.data.buttons:`, targetNode.data.buttons);
            
            let buttonsToUse = targetNode.data.buttons || [];
            
            const selectionButtons = buttonsToUse.filter(button => button.action === 'selection');
            const regularButtons = buttonsToUse.filter(button => button.action !== 'selection');
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ù–∞–π–¥–µ–Ω–æ ${selectionButtons.length} –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∏ ${regularButtons.length} –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–∑–¥–∞–µ–º ${selectionButtons.length} –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–∑–ª–∞ ${nodeId}`);
            selectionButtons.forEach((button, index) => {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ callback_data
              const shortNodeId = generateUniqueShortId(nodeId, allNodeIds || []); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
              const shortTarget = (button.target || button.id || 'btn').slice(-8);
              const callbackData = `ms_${shortNodeId}_${shortTarget}`;
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û! –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${button.text}" -> ${callbackData} (shortNodeId: ${shortNodeId}) (–¥–ª–∏–Ω–∞: ${callbackData.length})`);
              code += `    # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ ${index + 1}: ${button.text}\n`;
              code += `    logging.info(f"üîò –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É: ${button.text} -> ${callbackData}")\n`;
              code += `    selected_mark = "‚úÖ " if "${button.text}" in user_data[user_id]["multi_select_${nodeId}"] else ""\n`;
              code += `    builder.add(InlineKeyboardButton(text=f"{selected_mark}${button.text}", callback_data="${callbackData}"))\n`;
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ù–ê–ß–ò–ù–ê–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è —É–∑–ª–∞ ${nodeId}`);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: allowMultipleSelection = ${targetNode.data.allowMultipleSelection}`);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: continueButtonTarget = ${targetNode.data.continueButtonTarget}`);
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: selectionButtons.length = ${selectionButtons.length}`);
            
            // –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
            if (selectionButtons.length > 0) {
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" (–µ—Å—Ç—å ${selectionButtons.length} –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞)`);
              code += '    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
              const shortNodeIdDone = nodeId.slice(-10).replace(/^_+/, ''); // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ underscores
              const doneCallbackData = `done_${shortNodeIdDone}`;
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" -> ${doneCallbackData} (–¥–ª–∏–Ω–∞: ${doneCallbackData.length})`);
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ì–ï–ù–ï–†–ò–†–£–ï–ú –∫–æ–¥ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"!`);
              
              code += `    logging.info(f"üîò –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ì–æ—Ç–æ–≤–æ -> ${doneCallbackData}")\n`;
              code += `    builder.add(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="${doneCallbackData}"))\n`;
              
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚úÖ –£–°–ü–ï–®–ù–û –¥–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" –≤ –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`);
            } else {
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: ‚ùå –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ" - –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞`);
            }  
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (navigation –∏ –¥—Ä—É–≥–∏–µ)
            regularButtons.forEach((btn, index) => {
              if (btn.action === "goto" && btn.target) {
                const btnCallbackData = `${btn.target}_btn_${index}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btnCallbackData}"))\n`;
              } else if (btn.action === "url") {
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              }
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            const totalButtons = selectionButtons.length + (targetNode.data.continueButtonTarget ? 1 : 0) + regularButtons.length;
            // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º nodeData —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º
            const multiSelectNodeData = { ...targetNode.data, allowMultipleSelection: true };
            const columns = calculateOptimalColumns(selectionButtons, multiSelectNodeData);
            code += `    builder.adjust(${columns})\n`;
            code += '    keyboard = builder.as_markup()\n';
            
          } else if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            code += '    # Create inline keyboard\n';
            code += '    builder = InlineKeyboardBuilder()\n';
            targetNode.data.buttons.forEach((btn, index) => {
              if (btn.action === "goto" && btn.target) {
                const btnCallbackData = `${btn.target}_btn_${index}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${btnCallbackData}"))\n`;
              } else if (btn.action === "url") {
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `    # –ö–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${btn.target}\n`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              } else if (btn.action === "selection") {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤
                const callbackData = `multi_select_${nodeId}_${btn.target || btn.id}`;
                code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
              }
            });
            code += '    keyboard = builder.as_markup()\n';
          } else {
            code += '    keyboard = None\n';
          }
          
          // Send message with keyboard
          code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
          code += '    try:\n';
          code += '        if keyboard:\n';
          code += '            await callback_query.message.edit_text(text, reply_markup=keyboard)\n';
          code += '        else:\n';
          code += '            await callback_query.message.edit_text(text)\n';
          code += '    except Exception:\n';
          code += '        if keyboard:\n';
          code += '            await callback_query.message.answer(text, reply_markup=keyboard)\n';
          code += '        else:\n';
          code += '            await callback_query.message.answer(text)\n';
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
          code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
          code += '    user_id = callback_query.from_user.id\n';
          code += '    \n';
          code += '    # –ò—â–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ callback_data\n';
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
          const sourceNode = nodes.find(n => 
            n.data.buttons && n.data.buttons.some(btn => btn.target === nodeId)
          );
          
          // –ï—Å–ª–∏ –∫ —É–∑–ª—É –≤–µ–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫, –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –Ω–∞–∂–∞–ª–∏
          let buttonsToTargetNode = [];
          if (sourceNode) {
            buttonsToTargetNode = sourceNode.data.buttons.filter(btn => btn.target === nodeId);
          }
          
          if (buttonsToTargetNode.length > 1) {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤–µ–¥—É—Ç –∫ –æ–¥–Ω–æ–º—É —É–∑–ª—É - —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ callback_data
            code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ callback_data\n`;
            code += `    button_display_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞"\n`;
            buttonsToTargetNode.forEach((button, index) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—É—Ñ—Ñ–∏–∫—Å—É _btn_index –≤ callback_data
              code += `    if callback_query.data.endswith("_btn_${index}"):\n`;
              code += `        button_display_text = "${button.text}"\n`;
            });
            
            // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é callback_data —Å nodeId
            code += `    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é callback_data\n`;
            buttonsToTargetNode.forEach((button) => {
              code += `    if callback_query.data == "${nodeId}":\n`;
              // –î–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤–µ–¥—É—Ç –∫ –æ–¥–Ω–æ–º—É —É–∑–ª—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
              code += `        button_display_text = "${button.text}"\n`;
            });
          } else if (sourceNode) {
            const button = sourceNode.data.buttons.find(btn => btn.target === nodeId);
            if (button) {
              code += `    button_display_text = "${button.text}"\n`;
            } else {
              code += `    button_display_text = "–ö–Ω–æ–ø–∫–∞ ${nodeId}"\n`;
            }
          } else {
            code += `    button_display_text = "–ö–Ω–æ–ø–∫–∞ ${nodeId}"\n`;
          }
          code += '    \n';
          code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';

          code += '    timestamp = get_moscow_time()\n';
          code += '    \n';
          code += '    response_data = button_display_text  # –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n';
          code += '    \n';
          code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
          code += '    if user_id not in user_data:\n';
          code += '        user_data[user_id] = {}\n';
          code += '    user_data[user_id]["button_click"] = button_display_text\n';
          code += '    \n';
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–æ–ø–∫–∏
          const parentNode = nodes.find(n => 
            n.data.buttons && n.data.buttons.some(btn => btn.target === nodeId)
          );
          
          let variableName = 'button_click';
          let variableValue = 'button_display_text';
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ "–§–µ–¥—è"
          if (nodeId === 'source_search') {
            variableName = '–∏—Å—Ç–æ—á–Ω–∏–∫';
            variableValue = '"üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"';
          } else if (nodeId === 'source_friends') {
            variableName = '–∏—Å—Ç–æ—á–Ω–∏–∫';
            variableValue = '"üë• –î—Ä—É–∑—å—è"';
          } else if (nodeId === 'source_ads') {
            variableName = '–∏—Å—Ç–æ—á–Ω–∏–∫';
            variableValue = '"üì± –†–µ–∫–ª–∞–º–∞"';
          } else if (parentNode && parentNode.data.inputVariable) {
            variableName = parentNode.data.inputVariable;
            
            // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ
            const button = parentNode.data.buttons.find(btn => btn.target === nodeId);
            if (button) {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏
              if (button.id === 'btn_search' || nodeId === 'source_search') {
                variableValue = '"–∏–∑ –∏–Ω–µ—Ç–∞"';
              } else if (button.id === 'btn_friends' || nodeId === 'source_friends') {
                variableValue = '"friends"';
              } else if (button.id === 'btn_ads' || nodeId === 'source_ads') {
                variableValue = '"ads"';
              } else if (variableName === '–ø–æ–ª') {
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π "–ø–æ–ª"
                if (button.text === '–ú—É–∂—á–∏–Ω–∞' || button.text === 'üë® –ú—É–∂—á–∏–Ω–∞') {
                  variableValue = '"–ú—É–∂—á–∏–Ω–∞"';
                } else if (button.text === '–ñ–µ–Ω—â–∏–Ω–∞' || button.text === 'üë© –ñ–µ–Ω—â–∏–Ω–∞') {
                  variableValue = '"–ñ–µ–Ω—â–∏–Ω–∞"';
                } else {
                  variableValue = `"${button.text}"`;
                }
              } else {
                variableValue = 'button_display_text';
              }
            }
          }
          
          code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n';
          code += `    await update_user_data_in_db(user_id, "${variableName}", ${variableValue})\n`;
          code += `    logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${variableName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: " + str(${variableValue}) + f" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
          code += '    \n';
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..." –¥–ª—è –∫–Ω–æ–ø–æ–∫
          code += '    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ\n';
          code += '    await callback_query.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")\n';
          code += '    \n';
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
          const currentNode = nodes.find(n => n.id === nodeId);
          
          // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º - –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∑–∞—Ö–æ–¥–µ –≤ —É–∑–µ–ª
          const shouldRedirect = !(currentNode && currentNode.data.allowMultipleSelection);
          console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–† –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–∑–µ–ª ${nodeId} allowMultipleSelection: ${currentNode?.data.allowMultipleSelection}, shouldRedirect: ${shouldRedirect}`);
          
          let redirectTarget = nodeId; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —É–∑–ª–µ
          
          if (shouldRedirect) {
            if (currentNode && currentNode.data.continueButtonTarget) {
              // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º continueButtonTarget –µ—Å–ª–∏ –µ—Å—Ç—å
              redirectTarget = currentNode.data.continueButtonTarget;
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–† REDIRECTTARGET: –£–∑–µ–ª ${nodeId} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ continueButtonTarget ${redirectTarget}`);
            } else {
              // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤ –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
              const nodeConnections = connections.filter(conn => conn.sourceNodeId === nodeId);
              if (nodeConnections.length > 0) {
                redirectTarget = nodeConnections[0].targetNodeId;
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–† REDIRECTTARGET: –£–∑–µ–ª ${nodeId} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ ${redirectTarget}`);
              } else {
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–† REDIRECTTARGET: –£–∑–µ–ª ${nodeId} –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Ç–æ–º –∂–µ —É–∑–ª–µ (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)`);
              }
            }
          } else {
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${nodeId} —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º - –ù–ï –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é`);
          }
          
          if (shouldRedirect && redirectTarget) {
            code += '    # –ü–ï–†–ï–ê–î–†–ï–°–ê–¶–ò–Ø: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n';
            code += `    next_node_id = "${redirectTarget}"\n`;
            code += '    try:\n';
            code += '        logging.info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏: {next_node_id}")\n';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
            if (nodes.length > 0) {
              nodes.forEach((navTargetNode, index) => {
                const condition = index === 0 ? 'if' : 'elif';
                code += `        ${condition} next_node_id == "${navTargetNode.id}":\n`;
                
                if (navTargetNode.type === 'message') {
                  // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                  if (navTargetNode.data.allowMultipleSelection === true) {
                    // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    const safeFunctionName = navTargetNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
                    code += `            # –£–∑–µ–ª —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º - –≤—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫\n`;
                    code += `            logging.info(f"üîß Callback –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${navTargetNode.id}")\n`;
                    code += `            await handle_callback_${safeFunctionName}(callback_query)\n`;
                  } else {
                    const messageText = navTargetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
                    const formattedText = formatTextForPython(messageText);
                    code += `            nav_text = ${formattedText}\n`;
                    code += '            await callback_query.message.edit_text(nav_text)\n';
                  }
                  
                  // –ï—Å–ª–∏ —É–∑–µ–ª message —Å–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                  if (navTargetNode.data.collectUserInput === true) {
                    const inputType = navTargetNode.data.inputType || 'text';
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ—Ä–µ–º inputVariable –∏–º–µ–Ω–Ω–æ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞, –∞ –Ω–µ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ
                    const inputVariable = navTargetNode.data.inputVariable || `response_${navTargetNode.id}`;
                    const inputTargetNodeId = navTargetNode.data.inputTargetNodeId;
                    
                    code += '            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ inline –∫–Ω–æ–ø–∫–æ–π\n';
                    code += '            user_id = callback_query.from_user.id\n';
                    code += '            if user_id not in user_data:\n';
                    code += '                user_data[user_id] = {}\n';
                    code += `            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${inputVariable} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n`;
                    code += `            if "${inputVariable}" not in user_data[user_id] or not user_data[user_id]["${inputVariable}"]:\n`;
                    code += '                # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
                    code += '                user_data[user_id]["waiting_for_input"] = {\n';
                    code += `                    "type": "${inputType}",\n`;
                    code += `                    "variable": "${inputVariable}",\n`;
                    code += '                    "save_to_database": True,\n';
                    code += `                    "node_id": "${navTargetNode.id}",\n`;
                    code += `                    "next_node_id": "${inputTargetNodeId || ''}",\n`;
                    code += `                    "min_length": ${navTargetNode.data.minLength || 0},\n`;
                    code += `                    "max_length": ${navTargetNode.data.maxLength || 0},\n`;
                    code += '                    "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
                    code += '                    "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
                    code += '                }\n';
                    code += `                logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${inputVariable} (—É–∑–µ–ª ${navTargetNode.id})")\n`;
                    code += '            else:\n';
                    code += `                logging.info(f"‚è≠Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${inputVariable} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞")\n`;
                  }
                } else if (navTargetNode.type === 'command') {
                  // –î–ª—è —É–∑–ª–æ–≤ –∫–æ–º–∞–Ω–¥ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                  const commandName = navTargetNode.data.command?.replace('/', '') || 'unknown';
                  const handlerName = `${commandName}_handler`;
                  code += `            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${navTargetNode.data.command}\n`;
                  code += '            from types import SimpleNamespace\n';
                  code += '            fake_message = SimpleNamespace()\n';
                  code += '            fake_message.from_user = callback_query.from_user\n';
                  code += '            fake_message.chat = callback_query.message.chat\n';
                  code += '            fake_message.date = callback_query.message.date\n';
                  code += '            fake_message.answer = callback_query.message.answer\n';
                  code += `            await ${handlerName}(fake_message)\n`;
                } else if (navTargetNode.type === 'keyboard' && navTargetNode.data.enableTextInput) {
                  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–∑–ª—ã –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                  const messageText = navTargetNode.data.messageText || '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:';
                  const inputVariable = navTargetNode.data.inputVariable || `response_${navTargetNode.id}`;
                  const inputTargetNodeId = navTargetNode.data.inputTargetNodeId || '';
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
                  const hasConditionalMessages = navTargetNode.data.enableConditionalMessages && 
                                                navTargetNode.data.conditionalMessages && 
                                                navTargetNode.data.conditionalMessages.length > 0;
                  
                  if (hasConditionalMessages) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É
                    code += '            await callback_query.message.delete()\n';
                    code += '            # –£–∑–µ–ª —Å —É—Å–ª–æ–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è\n';
                    code += '            user_id = callback_query.from_user.id\n';
                    code += '            user_data_dict = await get_user_from_db(user_id) or {}\n';
                    code += '            user_data_dict.update(user_data.get(user_id, {}))\n\n';
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_user_variable –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    code += '            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
                    code += '            def check_user_variable(var_name, user_data_dict):\n';
                    code += '                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""\n';
                    code += '                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–æ–ª–µ user_data (–∏–∑ –ë–î)\n';
                    code += '                if "user_data" in user_data_dict and user_data_dict["user_data"]:\n';
                    code += '                    try:\n';
                    code += '                        import json\n';
                    code += '                        parsed_data = json.loads(user_data_dict["user_data"]) if isinstance(user_data_dict["user_data"], str) else user_data_dict["user_data"]\n';
                    code += '                        if var_name in parsed_data:\n';
                    code += '                            raw_value = parsed_data[var_name]\n';
                    code += '                            if isinstance(raw_value, dict) and "value" in raw_value:\n';
                    code += '                                var_value = raw_value["value"]\n';
                    code += '                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n';
                    code += '                                if var_value is not None and str(var_value).strip() != "":\n';
                    code += '                                    return True, str(var_value)\n';
                    code += '                            else:\n';
                    code += '                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n';
                    code += '                                if raw_value is not None and str(raw_value).strip() != "":\n';
                    code += '                                    return True, str(raw_value)\n';
                    code += '                    except (json.JSONDecodeError, TypeError):\n';
                    code += '                        pass\n';
                    code += '                \n';
                    code += '                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ user_data)\n';
                    code += '                if var_name in user_data_dict:\n';
                    code += '                    variable_data = user_data_dict.get(var_name)\n';
                    code += '                    if isinstance(variable_data, dict) and "value" in variable_data:\n';
                    code += '                        var_value = variable_data["value"]\n';
                    code += '                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–µ\n';
                    code += '                        if var_value is not None and str(var_value).strip() != "":\n';
                    code += '                            return True, str(var_value)\n';
                    code += '                    elif variable_data is not None and str(variable_data).strip() != "":\n';
                    code += '                        return True, str(variable_data)\n';
                    code += '                \n';
                    code += '                return False, None\n\n';
                    
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
                    const conditionalMessages = navTargetNode.data.conditionalMessages.sort((a, b) => (b.priority || 0) - (a.priority || 0));
                    
                    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é if/elif/else —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π
                    for (let i = 0; i < conditionalMessages.length; i++) {
                      const condition = conditionalMessages[i];
                      const cleanedConditionText = stripHtmlTags(condition.messageText);
                      const conditionText = formatTextForPython(cleanedConditionText);
                      const conditionKeyword = i === 0 ? 'if' : 'elif';
                      
                      // Get variable names - support both new array format and legacy single variable
                      const variableNames = condition.variableNames && condition.variableNames.length > 0 
                        ? condition.variableNames 
                        : (condition.variableName ? [condition.variableName] : []);
                      
                      const logicOperator = condition.logicOperator || 'AND';
                      
                      code += `            # –£—Å–ª–æ–≤–∏–µ ${i + 1}: ${condition.condition} –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${variableNames.join(', ')}\n`;
                      
                      if (condition.condition === 'user_data_exists' && variableNames.length > 0) {
                        // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π –±–ª–æ–∫ —É—Å–ª–æ–≤–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –í–ù–£–¢–†–ò
                        code += `            ${conditionKeyword} (\n`;
                        for (let j = 0; j < variableNames.length; j++) {
                          const varName = variableNames[j];
                          const operator = (j === variableNames.length - 1) ? '' : (logicOperator === 'AND' ? ' and' : ' or');
                          code += `                check_user_variable("${varName}", user_data_dict)[0]${operator}\n`;
                        }
                        code += `            ):\n`;
                        
                        // –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —É—Å–ª–æ–≤–∏—è —Å–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                        code += `                # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö\n`;
                        code += `                variable_values = {}\n`;
                        for (const varName of variableNames) {
                          code += `                _, variable_values["${varName}"] = check_user_variable("${varName}", user_data_dict)\n`;
                        }
                        
                        code += `                text = ${conditionText}\n`;
                        
                        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
                        for (const varName of variableNames) {
                          code += `                if "{${varName}}" in text and variable_values["${varName}"] is not None:\n`;
                          code += `                    text = text.replace("{${varName}}", variable_values["${varName}"])\n`;
                        }
                        
                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if (condition.keyboardType && condition.keyboardType !== 'none' && condition.buttons && condition.buttons.length > 0) {
                          code += '                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
                          
                          if (condition.keyboardType === 'inline') {
                            code += '                builder = InlineKeyboardBuilder()\n';
                            condition.buttons.forEach((button: any) => {
                              if (button.action === "url") {
                                code += `                builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
                              } else if (button.action === 'goto') {
                                const callbackData = button.target || button.id || 'no_action';
                                code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
                              } else if (button.action === 'command') {
                                // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
                                const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
                                code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
                              } else {
                                const callbackData = button.target || button.id || 'no_action';
                                code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
                              }
                            });
                            code += '                conditional_keyboard = builder.as_markup()\n';
                            code += '                await bot.send_message(user_id, text, reply_markup=conditional_keyboard)\n';
                          } else if (condition.keyboardType === 'reply') {
                            code += '                builder = ReplyKeyboardBuilder()\n';
                            condition.buttons.forEach((button: any) => {
                              if (button.action === "contact" && button.requestContact) {
                                code += `                builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
                              } else if (button.action === "location" && button.requestLocation) {
                                code += `                builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
                              } else {
                                code += `                builder.add(KeyboardButton(text="${button.text}"))\n`;
                              }
                            });
                            code += '                conditional_keyboard = builder.as_markup(resize_keyboard=True, one_time_keyboard=False)\n';
                            code += '                await bot.send_message(user_id, text, reply_markup=conditional_keyboard)\n';
                          }
                        } else {
                          // –ù–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                          code += '                await bot.send_message(user_id, text)\n';
                        }
                        
                        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        if (condition.waitForTextInput) {
                          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                          const conditionalInputVariable = condition.textInputVariable || navTargetNode.data.inputVariable || `response_${navTargetNode.id}`;
                          code += `                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
                          code += `                user_data[user_id]["waiting_for_input"] = {\n`;
                          code += `                    "type": "text",\n`;
                          code += `                    "variable": "${conditionalInputVariable}",\n`;
                          code += `                    "save_to_database": True,\n`;
                          code += `                    "node_id": "${navTargetNode.id}",\n`;
                          code += `                    "next_node_id": "${condition.nextNodeAfterInput || inputTargetNodeId}"\n`;
                          code += `                }\n`;
                          code += `                logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ª–æ–≤–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${conditionalInputVariable} (—É–∑–µ–ª ${navTargetNode.id})")\n`;
                        }
                      }
                    }
                    
                    // Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
                    code += `            else:\n`;
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                    if (navTargetNode.data.allowMultipleSelection === true) {
                      // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                      const messageText = navTargetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
                      const formattedText = formatTextForPython(messageText);
                      code += `                # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${navTargetNode.id}\n`;
                      code += `                logging.info(f"üîß Fallback –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${navTargetNode.id}")\n`;
                      code += `                nav_text = ${formattedText}\n`;
                      
                      // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                      code += '                user_data[user_id] = user_data.get(user_id, {})\n';
                      code += generateUniversalVariableReplacement('                ');
                      
                      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                      code += `                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
                      code += `                user_data[user_id]["multi_select_${navTargetNode.id}"] = []\n`;
                      code += `                user_data[user_id]["multi_select_node"] = "${navTargetNode.id}"\n`;
                      code += `                user_data[user_id]["multi_select_type"] = "selection"\n`;
                      if (navTargetNode.data.multiSelectVariable) {
                        code += `                user_data[user_id]["multi_select_variable"] = "${navTargetNode.data.multiSelectVariable}"\n`;
                      }
                      
                      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
                      if (navTargetNode.data.buttons && navTargetNode.data.buttons.length > 0) {
                        code += generateInlineKeyboardCode(navTargetNode.data.buttons, '                ', navTargetNode.id, navTargetNode.data, allNodeIds);
                        code += `                await bot.send_message(user_id, nav_text, reply_markup=keyboard)\n`;
                      } else {
                        code += `                await bot.send_message(user_id, nav_text)\n`;
                      }
                      code += `                logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${navTargetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
                    } else {
                      const formattedText = formatTextForPython(messageText);
                      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                      const fallbackInputVariable = navTargetNode.data.inputVariable || `response_${navTargetNode.id}`;
                      code += `                # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
                      code += `                nav_text = ${formattedText}\n`;
                      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
                      if (navTargetNode.data.collectUserInput === true) {
                      code += `                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ inline –∫–Ω–æ–ø–∫–æ–π\n`;
                      code += `                if "${fallbackInputVariable}" not in user_data[user_id] or not user_data[user_id]["${fallbackInputVariable}"]:\n`;
                      code += `                    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n`;
                      code += `                    user_data[user_id]["waiting_for_input"] = {\n`;
                      code += `                        "type": "text",\n`;
                      code += `                        "variable": "${fallbackInputVariable}",\n`;
                      code += `                        "save_to_database": True,\n`;
                      code += `                        "node_id": "${navTargetNode.id}",\n`;
                      code += `                        "next_node_id": "${inputTargetNodeId}"\n`;
                      code += `                    }\n`;
                      code += `                    logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ fallback –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${fallbackInputVariable} (—É–∑–µ–ª ${navTargetNode.id})")\n`;
                      code += `                else:\n`;
                        code += `                    logging.info(f"‚è≠Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${fallbackInputVariable} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º fallback –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞")\n`;
                      } else {
                        code += `                logging.info(f"Fallback –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${navTargetNode.id} –±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞")\n`;
                      }
                      code += `                await bot.send_message(user_id, nav_text)\n`;
                    }
                  } else {
                    // –û–±—ã—á–Ω—ã–π —É–∑–µ–ª –±–µ–∑ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                    if (navTargetNode.data.allowMultipleSelection === true) {
                      // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
                      const messageText = navTargetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
                      const formattedText = formatTextForPython(messageText);
                      code += `            # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${navTargetNode.id}\n`;
                      code += `            logging.info(f"üîß –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${navTargetNode.id}")\n`;
                      code += '            await callback_query.message.delete()\n';
                      code += `            text = ${formattedText}\n`;
                      
                      // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                      code += '            user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})\n';
                      code += generateUniversalVariableReplacement('            ');
                      
                      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
                      code += `            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
                      code += `            user_data[callback_query.from_user.id]["multi_select_${navTargetNode.id}"] = []\n`;
                      code += `            user_data[callback_query.from_user.id]["multi_select_node"] = "${navTargetNode.id}"\n`;
                      code += `            user_data[callback_query.from_user.id]["multi_select_type"] = "selection"\n`;
                      if (navTargetNode.data.multiSelectVariable) {
                        code += `            user_data[callback_query.from_user.id]["multi_select_variable"] = "${navTargetNode.data.multiSelectVariable}"\n`;
                      }
                      
                      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
                      if (navTargetNode.data.buttons && navTargetNode.data.buttons.length > 0) {
                        code += generateInlineKeyboardCode(navTargetNode.data.buttons, '            ', navTargetNode.id, navTargetNode.data, allNodeIds);
                        code += `            await bot.send_message(callback_query.from_user.id, text, reply_markup=keyboard)\n`;
                      } else {
                        code += `            await bot.send_message(callback_query.from_user.id, text)\n`;
                      }
                      code += `            logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${navTargetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
                    } else {
                      const formattedText = formatTextForPython(messageText);
                      code += '            await callback_query.message.delete()\n';
                      code += `            nav_text = ${formattedText}\n`;
                    
                      // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
                      if (navTargetNode.data.collectUserInput === true) {
                        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
                        const regularInputVariable = navTargetNode.data.inputVariable || `response_${navTargetNode.id}`;
                        code += '            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ inline –∫–Ω–æ–ø–∫–æ–π\n';
                        code += '            user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})\n';
                        code += `            if "${regularInputVariable}" not in user_data[callback_query.from_user.id] or not user_data[callback_query.from_user.id]["${regularInputVariable}"]:\n`;
                        code += '                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
                        code += '                user_data[callback_query.from_user.id]["waiting_for_input"] = {\n';
                        code += '                    "type": "text",\n';
                        code += `                    "variable": "${regularInputVariable}",\n`;
                        code += '                    "save_to_database": True,\n';
                        code += `                    "node_id": "${navTargetNode.id}",\n`;
                        code += `                    "next_node_id": "${inputTargetNodeId}"\n`;
                        code += '                }\n';
                        code += `                logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${regularInputVariable} (—É–∑–µ–ª ${navTargetNode.id})")\n`;
                        code += '            else:\n';
                        code += `                logging.info(f"‚è≠Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${regularInputVariable} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞")\n`;
                      } else {
                        code += `            logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${navTargetNode.id} –±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞")\n`;
                      }
                      code += '            await bot.send_message(callback_query.from_user.id, nav_text)\n';
                    }
                  }
                } else {
                  code += `            logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${navTargetNode.id}")\n`;
                }
              });
              
              code += '        else:\n';
              code += '            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
            } else {
              code += '        # No nodes available for navigation\n';
              code += '        logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ {next_node_id}")\n';
            }
            
            code += '    except Exception as e:\n';
            code += '        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
            code += '    \n';
            code += '    return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏\n';
          }
          code += '    \n';
          
          // Generate response based on node type
          if (targetNode.type === 'user-input') {
            // Handle user-input nodes
            const inputPrompt = targetNode.data.messageText || targetNode.data.inputPrompt || "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:";
            const responseType = targetNode.data.responseType || 'text';
            const inputType = targetNode.data.inputType || 'text';
            const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
            const saveToDatabase = targetNode.data.saveToDatabase || false;
            
            code += '    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
            code += '    await callback_query.message.delete()\n';
            code += '    \n';
            
            const formattedPrompt = formatTextForPython(inputPrompt);
            code += `    text = ${formattedPrompt}\n`;
            
            if (responseType === 'text') {
              // Find next node through connections
              const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
              const nextNodeId = nextConnection ? nextConnection.targetNodeId : null;
              
              code += '    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
              code += '    user_data[callback_query.from_user.id]["waiting_for_input"] = {\n';
              code += `        "type": "${inputType}",\n`;
              code += `        "variable": "${inputVariable}",\n`;
              code += `        "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
              code += `        "node_id": "${targetNode.id}",\n`;
              code += `        "next_node_id": "${nextNodeId || ''}"\n`;
              code += '    }\n';
              code += '    await bot.send_message(callback_query.from_user.id, text)\n';
            }
          } else {
            // Handle regular message nodes
            const targetText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ";
            const formattedTargetText = formatTextForPython(targetText);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è callback handlers
            if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
              code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
              code += '    text = None\n';
              code += '    \n';
              code += '    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π\n';
              code += '    user_record = await get_user_from_db(user_id)\n';
              code += '    if not user_record:\n';
              code += '        user_record = user_data.get(user_id, {})\n';
              code += '    \n';
              code += '    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º user_data\n';
              code += '    if isinstance(user_record, dict):\n';
              code += '        if "user_data" in user_record:\n';
              code += '            if isinstance(user_record["user_data"], str):\n';
              code += '                try:\n';
              code += '                    import json\n';
              code += '                    user_data_dict = json.loads(user_record["user_data"])\n';
              code += '                except (json.JSONDecodeError, TypeError):\n';
              code += '                    user_data_dict = {}\n';
              code += '            elif isinstance(user_record["user_data"], dict):\n';
              code += '                user_data_dict = user_record["user_data"]\n';
              code += '            else:\n';
              code += '                user_data_dict = {}\n';
              code += '        else:\n';
              code += '            user_data_dict = user_record\n';
              code += '    else:\n';
              code += '        user_data_dict = {}\n';
              code += '    \n';
              code += '    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ\n';
              code += '    def replace_variables_in_text(text_content, variables_dict):\n';
              code += '        if not text_content or not variables_dict:\n';
              code += '            return text_content\n';
              code += '        \n';
              code += '        for var_name, var_data in variables_dict.items():\n';
              code += '            placeholder = "{" + var_name + "}"\n';
              code += '            if placeholder in text_content:\n';
              code += '                if isinstance(var_data, dict) and "value" in var_data:\n';
              code += '                    var_value = str(var_data["value"]) if var_data["value"] is not None else var_name\n';
              code += '                elif var_data is not None:\n';
              code += '                    var_value = str(var_data)\n';
              code += '                else:\n';
              code += '                    var_value = var_name  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç\n';
              code += '                text_content = text_content.replace(placeholder, var_value)\n';
              code += '        return text_content\n';
              code += '    \n';
              
              // Generate conditional logic using helper function
              code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
              
              // Add fallback
              code += '    else:\n';
              
              if (targetNode.data.fallbackMessage) {
                const fallbackText = formatTextForPython(targetNode.data.fallbackMessage);
                code += `        text = ${fallbackText}\n`;
                code += '        text = replace_variables_in_text(text, user_data_dict)\n';
                code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
              } else {
                code += `        text = ${formattedTargetText}\n`;
                code += '        text = replace_variables_in_text(text, user_data_dict)\n';
                code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞")\n';
              }
              
              code += '    \n';
            } else {
              code += `    text = ${formattedTargetText}\n`;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
              code += generateUniversalVariableReplacement('    ');
            }
            
            // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞
            if (targetNode.data.collectUserInput === true) {
              // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
              const inputType = targetNode.data.inputType || 'text';
              const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
              const saveToDatabase = targetNode.data.saveToDatabase !== false; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true –¥–ª—è collectUserInput
              const inputTargetNodeId = targetNode.data.inputTargetNodeId;
              
              code += '    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞\n';
              code += '    if callback_query.from_user.id not in user_data:\n';
              code += '        user_data[callback_query.from_user.id] = {}\n';
              code += '    \n';
              code += `    user_data[callback_query.from_user.id]["waiting_for_input"] = "${targetNode.id}"\n`;
              code += `    user_data[callback_query.from_user.id]["input_type"] = "${inputType}"\n`;
              code += `    user_data[callback_query.from_user.id]["input_variable"] = "${inputVariable}"\n`;
              code += `    user_data[callback_query.from_user.id]["save_to_database"] = ${toPythonBoolean(saveToDatabase)}\n`;
              code += `    user_data[callback_query.from_user.id]["input_target_node_id"] = "${inputTargetNodeId || ''}"\n`;
              code += '    \n';
              
              // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É inline –∫–Ω–æ–ø–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞\n';
                code += '    if "keyboard" not in locals() or keyboard is None:\n';
                code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ (+ —Å–±–æ—Ä –≤–≤–æ–¥–∞ –≤–∫–ª—é—á–µ–Ω)\n';
                code += '        builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data, –≤–∫–ª—é—á–∞—é—â–∏–π ID –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç
                    const callbackData = btn.id || 'no_action';
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    // –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback_data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cmd_
                    const commandName = btn.target ? btn.target.replace('/', '') : 'unknown';
                    const callbackData = `cmd_${commandName}`;
                    code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  }
                });
                code += '        keyboard = builder.as_markup()\n';
                let parseModeTarget = '';
                if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                  parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                } else if (targetNode.data.formatMode === 'html') {
                  parseModeTarget = ', parse_mode=ParseMode.HTML';
                }
                code += '    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n';
                code += '    try:\n';
                code += `        await callback_query.message.edit_text(text, reply_markup=keyboard${parseModeTarget})\n`;
                code += '    except Exception as e:\n';
                code += '        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n';
                code += `        await callback_query.message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
              } else {
                code += '    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n';
                code += '    try:\n';
                code += '        await callback_query.message.edit_text(text)\n';
                code += '    except Exception as e:\n';
                code += '        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n';
                code += '        await callback_query.message.answer(text)\n';
              }
              code += '    \n';
            } else {
              // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞
              
              // Handle keyboard for target node
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                code += '    builder = InlineKeyboardBuilder()\n';
                targetNode.data.buttons.forEach((btn, index) => {
                  if (btn.action === "url") {
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                  } else if (btn.action === 'goto') {
                    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data, –≤–∫–ª—é—á–∞—é—â–∏–π ID –∫–Ω–æ–ø–∫–∏
                    const callbackData = btn.id || 'no_action';
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  } else if (btn.action === 'command') {
                    // –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback_data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cmd_
                    const commandName = btn.target ? btn.target.replace('/', '') : 'unknown';
                    const callbackData = `cmd_${commandName}`;
                    code += `    builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                  }
                });
                code += '    keyboard = builder.as_markup()\n';
                let parseModeTarget = '';
                if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                  parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                } else if (targetNode.data.formatMode === 'html') {
                  parseModeTarget = ', parse_mode=ParseMode.HTML';
                }
                code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                code += `    try:\n`;
                code += `        await callback_query.message.edit_text(text, reply_markup=keyboard${parseModeTarget})\n`;
                code += `    except Exception as e:\n`;
                code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                code += `        await callback_query.message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
              } else {
                let parseModeTarget = '';
                if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                  parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
                } else if (targetNode.data.formatMode === 'html') {
                  parseModeTarget = ', parse_mode=ParseMode.HTML';
                }
                code += `    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ\n`;
                code += `    try:\n`;
                code += `        await callback_query.message.edit_text(text${parseModeTarget})\n`;
                code += `    except Exception as e:\n`;
                code += `        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.")\n`;
                code += `        await callback_query.message.answer(text${parseModeTarget})\n`;
              }
            } // –ó–∞–∫—Ä—ã–≤–∞–µ–º else –±–ª–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          } // –ó–∞–∫—Ä—ã–≤–∞–µ–º else –±–ª–æ–∫ –¥–ª—è regular message nodes
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π return –≤ –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
          code += '    return\n';
        }
      }
    });
  }
  
  // Generate handlers for reply keyboard buttons
  const replyNodes = (nodes || []).filter(node => 
    node.data.keyboardType === 'reply' && node.data.buttons && node.data.buttons.length > 0
  );
  
  if (replyNodes.length > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ reply –∫–Ω–æ–ø–æ–∫\n';
    const processedReplyButtons = new Set<string>();
    
    replyNodes.forEach(node => {
      node.data.buttons.forEach(button => {
        if (button.action === 'goto' && button.target) {
          const buttonText = button.text;
          
          // Avoid duplicate handlers
          if (processedReplyButtons.has(buttonText)) return;
          processedReplyButtons.add(buttonText);
          
          // Find target node
          const targetNode = nodes.find(n => n.id === button.target);
          if (targetNode) {
            code += `\n@dp.message(lambda message: message.text == "${buttonText}")\n`;
            // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ button ID
            const safeFunctionName = button.id.replace(/[^a-zA-Z0-9_]/g, '_');
            code += `async def handle_reply_${safeFunctionName}(message: types.Message):\n`;
            
            // Generate response for target node
            const targetText = targetNode.data.messageText || "–°–æ–æ–±—â–µ–Ω–∏–µ";
            const formattedTargetText = formatTextForPython(targetText);
            code += `    text = ${formattedTargetText}\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è reply –∫–Ω–æ–ø–æ–∫
            code += '    user_id = message.from_user.id\n';
            code += generateUniversalVariableReplacement('    ');
            
            // Handle keyboard for target node
            if (targetNode.data.keyboardType === "reply" && targetNode.data.buttons.length > 0) {
              code += '    builder = ReplyKeyboardBuilder()\n';
              targetNode.data.buttons.forEach((btn, index) => {
                code += `    builder.add(KeyboardButton(text="${btn.text}"))\n`;
              });
              const resizeKeyboard = toPythonBoolean(targetNode.data.resizeKeyboard);
              const oneTimeKeyboard = toPythonBoolean(targetNode.data.oneTimeKeyboard);
              code += `    keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
              let parseModeTarget = '';
              if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
              } else if (targetNode.data.formatMode === 'html') {
                parseModeTarget = ', parse_mode=ParseMode.HTML';
              }
              code += `    await message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
            code += '    \n';
            code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤\n';
            code += '    user_id = message.from_user.id\n';
            code += '    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):\n';
            code += '        import datetime\n';
            code += '        timestamp = get_moscow_time()\n';
            code += '        input_node_id = user_data[user_id].get("input_node_id")\n';
            code += '        input_variable = user_data[user_id].get("input_variable", "button_response")\n';
            code += '        \n';
            code += '        response_data = {\n';
            code += `            "value": "${buttonText}",\n`;
            code += '            "type": "reply_button",\n';
            code += '            "timestamp": timestamp,\n';
            code += '            "nodeId": input_node_id,\n';
            code += '            "variable": input_variable,\n';
            code += '            "source": "reply_button_click"\n';
            code += '        }\n';
            code += '        \n';
            code += '        user_data[user_id][f"{input_variable}_button"] = response_data\n';
            code += '        logging.info(f"Reply –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {input_variable}_button = ${buttonText} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
            
            } else if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
              // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
              if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
                code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n';
                code += '    user_record = await get_user_from_db(user_id)\n';
                code += '    if not user_record:\n';
                code += '        user_record = user_data.get(user_id, {})\n';
                code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
                code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '    ');
                code += '    \n';
                code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
                code += '    use_conditional_keyboard = conditional_keyboard is not None\n';
              } else {
                code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
                code += '    use_conditional_keyboard = False\n';
                code += '    conditional_keyboard = None\n';
              }
              
              code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
              code += '    if use_conditional_keyboard:\n';
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
              let parseModeTarget = '';
              if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
              } else if (targetNode.data.formatMode === 'html') {
                parseModeTarget = ', parse_mode=ParseMode.HTML';
              }
              code += `        await message.answer(text, reply_markup=conditional_keyboard${parseModeTarget})\n`;
              code += '    else:\n';
              code += '        builder = InlineKeyboardBuilder()\n';
              targetNode.data.buttons.forEach((btn, index) => {
                if (btn.action === "url") {
                  code += `        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url || '#'}"))\n`;
                } else if (btn.action === 'goto') {
                  // –ï—Å–ª–∏ –µ—Å—Ç—å target, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ callback_data
                  const baseCallbackData = btn.target || btn.id || 'no_action'; const callbackData = `${baseCallbackData}_btn_${index}`;
                  code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                } else if (btn.action === 'command') {
                  // –î–ª—è –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback_data —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º cmd_
                  const commandName = btn.target ? btn.target.replace('/', '') : 'unknown';
                  const callbackData = `cmd_${commandName}`;
                  code += `        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
                }
              });
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
              const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data);
              code += `        builder.adjust(${columns})\n`;
              code += '        keyboard = builder.as_markup()\n';
              code += `        await message.answer(text, reply_markup=keyboard${parseModeTarget})\n`;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
            code += '    \n';
            code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ reply –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤\n';
            code += '    user_id = message.from_user.id\n';
            code += '    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):\n';
            code += '        import datetime\n';
            code += '        timestamp = get_moscow_time()\n';
            code += '        input_node_id = user_data[user_id].get("input_node_id")\n';
            code += '        input_variable = user_data[user_id].get("input_variable", "button_response")\n';
            code += '        \n';
            code += '        response_data = {\n';
            code += `            "value": "${buttonText}",\n`;
            code += '            "type": "reply_button",\n';
            code += '            "timestamp": timestamp,\n';
            code += '            "nodeId": input_node_id,\n';
            code += '            "variable": input_variable,\n';
            code += '            "source": "reply_button_click"\n';
            code += '        }\n';
            code += '        \n';
            code += '        user_data[user_id][f"{input_variable}_button"] = response_data\n';
            code += '        logging.info(f"Reply –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {input_variable}_button = ${buttonText} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
            
            } else {
              code += '    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏\n';
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
              let parseModeTarget = '';
              if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
                parseModeTarget = ', parse_mode=ParseMode.MARKDOWN';
              } else if (targetNode.data.formatMode === 'html') {
                parseModeTarget = ', parse_mode=ParseMode.HTML';
              }
              code += `    await message.answer(text, reply_markup=ReplyKeyboardRemove()${parseModeTarget})\n`;
            }
          }
        }
      });
    });
  }

  // Generate handlers for contact and location buttons
  const contactButtons = replyNodes.flatMap(node => 
    node.data.buttons.filter(button => button.action === 'contact')
  );
  
  const locationButtons = replyNodes.flatMap(node => 
    node.data.buttons.filter(button => button.action === 'location')
  );
  
  if (contactButtons.length > 0 || locationButtons.length > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n';
    
    if (contactButtons.length > 0) {
      code += '\n@dp.message(F.contact)\n';
      code += 'async def handle_contact(message: types.Message):\n';
      code += '    contact = message.contact\n';
      code += '    text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!\\n"\n';
      code += '    text += f"–ò–º—è: {contact.first_name}\\n"\n';
      code += '    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone_number}"\n';
      code += '    await message.answer(text)\n';
    }
    
    if (locationButtons.length > 0) {
      code += '\n@dp.message(F.location)\n';
      code += 'async def handle_location(message: types.Message):\n';
      code += '    location = message.location\n';
      code += '    text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!\\n"\n';
      code += '    text += f"–®–∏—Ä–æ—Ç–∞: {location.latitude}\\n"\n';
      code += '    text += f"–î–æ–ª–≥–æ—Ç–∞: {location.longitude}"\n';
      code += '    await message.answer(text)\n';
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è user-input —É–∑–ª–æ–≤
  const userInputNodes = (nodes || []).filter(node => 
    node.type === 'user-input' && 
    node.data.responseType === 'buttons' && 
    Array.isArray(node.data.responseOptions) && 
    node.data.responseOptions.length > 0
  );

  if (userInputNodes.length > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞\n';
    
    userInputNodes.forEach(node => {
      const responseOptions = node.data.responseOptions || [];
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
      responseOptions.forEach((option, index) => {
        code += `\n@dp.callback_query(F.data == "response_${node.id}_${index}")\n`;
        const safeFunctionName = `${node.id}_${index}`.replace(/[^a-zA-Z0-9_]/g, '_');
        code += `async def handle_response_${safeFunctionName}(callback_query: types.CallbackQuery):\n`;
        code += '    user_id = callback_query.from_user.id\n';
        code += '    \n';
        code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n';
        code += '    if user_id not in user_data or "button_response_config" not in user_data[user_id]:\n';
        code += '        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)\n';
        code += '        return\n';
        code += '    \n';
        code += '    config = user_data[user_id]["button_response_config"]\n';
        code += `    selected_value = "${option.value || option.text}"\n`;
        code += `    selected_text = "${option.text}"\n`;
        code += '    \n';
        code += '    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
        code += '    if config.get("allow_multiple"):\n';
        code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞\n';
        code += '        if selected_value == "done":\n';
        code += '            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä\n';
        code += '            if len(config["selected"]) > 0:\n';
        code += '                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n';
        code += '                variable_name = config.get("variable", "user_response")\n';
        code += '                import datetime\n';
        code += '                import pytz\n';
        code += '                timestamp = datetime.datetime.now(moscow_tz).isoformat()\n';
        code += '                node_id = config.get("node_id", "unknown")\n';
        code += '                \n';
        code += '                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
        code += '                response_data = {\n';
        code += '                    "value": [item["value"] for item in config["selected"]],\n';
        code += '                    "text": [item["text"] for item in config["selected"]],\n';
        code += '                    "type": "multiple_choice",\n';
        code += '                    "timestamp": timestamp,\n';
        code += '                    "nodeId": node_id,\n';
        code += '                    "variable": variable_name\n';
        code += '                }\n';
        code += '                \n';
        code += '                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
        code += '                user_data[user_id][variable_name] = response_data\n';
        code += '                \n';
        code += '                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n';
        code += '                if config.get("save_to_database"):\n';
        code += '                    saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n';
        code += '                    if saved_to_db:\n';
        code += '                        logging.info(f"‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {response_data[\'text\']} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
        code += '                    else:\n';
        code += '                        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
        code += '                \n';
        code += '                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n';
        code += '                success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")\n';
        code += '                selected_items = ", ".join([item["text"] for item in config["selected"]])\n';
        code += '                await callback_query.message.edit_text(f"{success_message}\\n\\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_items}")\n';
        code += '                \n';
        code += '                logging.info(f"–ü–æ–ª—É—á–µ–Ω –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä: {variable_name} = {[item[\'text\'] for item in config[\'selected\']]}")\n';
        code += '                \n';
        code += '                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n';
        code += '                del user_data[user_id]["button_response_config"]\n';
        code += '                \n';
        code += '                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n';
        code += '                next_node_id = config.get("next_node_id")\n';
        code += '                if next_node_id:\n';
        code += '                    try:\n';
        code += '                        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞\n';
        
        // Add navigation for done button
        if (nodes.length > 0) {
          nodes.forEach((btnNode, btnIndex) => {
            const safeFunctionName = btnNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
            const condition = btnIndex === 0 ? 'if' : 'elif';
            code += `                        ${condition} next_node_id == "${btnNode.id}":\n`;
            code += `                            await handle_callback_${safeFunctionName}(callback_query)\n`;
          });
          
          code += '                        else:\n';
          code += '                            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
        } else {
          code += '                        # No nodes available for navigation\n';
          code += '                        logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ {next_node_id}")\n';
        }
        code += '                    except Exception as e:\n';
        code += '                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
        code += '                return\n';
        code += '            else:\n';
        code += '                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n';
        code += '                await callback_query.answer("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º", show_alert=True)\n';
        code += '                return\n';
        code += '        else:\n';
        code += '            # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
        code += '            if selected_value not in config["selected"]:\n';
        code += '                config["selected"].append({"text": selected_text, "value": selected_value})\n';
        code += '                await callback_query.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selected_text}")\n';
        code += '            else:\n';
        code += '                config["selected"] = [item for item in config["selected"] if item["value"] != selected_value]\n';
        code += '                await callback_query.answer(f"‚ùå –£–±—Ä–∞–Ω–æ: {selected_text}")\n';
        code += '            return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä, –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±—Ä–∞—Ç—å –µ—â–µ\n';
        code += '    \n';
        code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä\n';
        code += '    variable_name = config.get("variable", "user_response")\n';
        code += '    import datetime\n';
        code += '    timestamp = get_moscow_time()\n';
        code += '    node_id = config.get("node_id", "unknown")\n';
        code += '    \n';
        code += '    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç\n';
        code += '    response_data = {\n';
        code += '        "value": selected_value,\n';
        code += '        "text": selected_text,\n';
        code += '        "type": "button_choice",\n';
        code += '        "timestamp": timestamp,\n';
        code += '        "nodeId": node_id,\n';
        code += '        "variable": variable_name\n';
        code += '    }\n';
        code += '    \n';
        code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
        code += '    user_data[user_id][variable_name] = response_data\n';
        code += '    \n';
        code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n';
        code += '    if config.get("save_to_database"):\n';
        code += '        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n';
        code += '        if saved_to_db:\n';
        code += '            logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
        code += '        else:\n';
        code += '            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
        code += '    \n';
        code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n';
        code += '    success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")\n';
        code += '    await callback_query.message.edit_text(f"{success_message}\\n\\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}")\n';
        code += '    \n';
        code += '    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n';
        code += '    del user_data[user_id]["button_response_config"]\n';
        code += '    \n';
        code += '    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {variable_name} = {selected_text}")\n';
        code += '    \n';
        code += '    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–∫–∏\n';
        code += '    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞\n';
        code += '    options = config.get("options", [])\n';
        code += `    current_option = None\n`;
        code += `    for option in options:\n`;
        code += `        if option.get("callback_data") == "response_${node.id}_${index}":\n`;
        code += `            current_option = option\n`;
        code += `            break\n`;
        code += '    \n';
        code += '    if current_option:\n';
        code += '        option_action = current_option.get("action", "goto")\n';
        code += '        option_target = current_option.get("target", "")\n';
        code += '        option_url = current_option.get("url", "")\n';
        code += '        \n';
        code += '        if option_action == "url" and option_url:\n';
        code += '            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É\n';
        code += '            from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup\n';
        code += '            keyboard = InlineKeyboardMarkup(inline_keyboard=[\n';
        code += '                [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=option_url)]\n';
        code += '            ])\n';
        code += '            await callback_query.message.edit_text(f"{success_message}\\n\\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}", reply_markup=keyboard)\n';
        code += '        elif option_action == "command" and option_target:\n';
        code += '            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É\n';
        code += '            command = option_target\n';
        code += '            if not command.startswith("/"):\n';
        code += '                command = "/" + command\n';
        code += '            \n';
        code += '            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã\n';
        code += '            import aiogram.types as aiogram_types\n';
        code += '            fake_message = aiogram_types.SimpleNamespace(\n';
        code += '                from_user=callback_query.from_user,\n';
        code += '                chat=callback_query.message.chat,\n';
        code += '                text=command,\n';
        code += '                message_id=callback_query.message.message_id\n';
        code += '            )\n';
        code += '            \n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è button responses
        const commandNodes = (nodes || []).filter(n => (n.type === 'start' || n.type === 'command') && n.data.command);
        commandNodes.forEach((cmdNode, cmdIndex) => {
          const condition = cmdIndex === 0 ? 'if' : 'elif';
          code += `            ${condition} command == "${cmdNode.data.command}":\n`;
          code += `                try:\n`;
          code += `                    await ${cmdNode.type === 'start' ? 'start_handler' : `${cmdNode.data.command?.replace(/[^a-zA-Z0-9_]/g, '_')}_handler`}(fake_message)\n`;
          code += `                except Exception as e:\n`;
          code += `                    logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${cmdNode.data.command}: {e}")\n`;
        });
        if (commandNodes.length > 0) {
          code += `            else:\n`;
          code += `                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")\n`;
        }
        code += '        elif option_action == "goto" and option_target:\n';
        code += '            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É\n';
        code += '            target_node_id = option_target\n';
        code += '            try:\n';
        code += '                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n';
        
        // Generate navigation logic for button responses  
        if (nodes.length > 0) {
          nodes.forEach((btnNode, btnIndex) => {
            const safeFunctionName = btnNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
            const condition = btnIndex === 0 ? 'if' : 'elif';
            code += `                ${condition} target_node_id == "${btnNode.id}":\n`;
            code += `                    await handle_callback_${safeFunctionName}(callback_query)\n`;
          });
          code += '                else:\n';
          code += '                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª: {target_node_id}")\n';
        } else {
          code += '                pass  # No nodes to handle\n';
        }
        code += '            except Exception as e:\n';
        code += '                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —É–∑–ª—É {target_node_id}: {e}")\n';
        code += '    else:\n';
        code += '        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ next_node_id –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–Ω–æ–ø–∫–∏\n';
        code += '        next_node_id = config.get("next_node_id")\n';
        code += '        if next_node_id:\n';
        code += '            try:\n';
        code += '                # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞\n';
          
          if (nodes.length > 0) {
            nodes.forEach((btnNode, btnIndex) => {
              const safeFunctionName = btnNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
              const condition = btnIndex === 0 ? 'if' : 'elif';
              code += `                ${condition} next_node_id == "${btnNode.id}":\n`;
              code += `                    await handle_callback_${safeFunctionName}(callback_query)\n`;
            });
            code += '                else:\n';
            code += '                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
          } else {
            code += '                pass  # No nodes to handle\n';
          }
          code += '            except Exception as e:\n';
          code += '                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
      });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
      if (node.data.allowSkip) {
        code += `\n@dp.callback_query(F.data == "skip_${node.id}")\n`;
        code += `async def handle_skip_${node.id}(callback_query: types.CallbackQuery):\n`;
        code += '    user_id = callback_query.from_user.id\n';
        code += '    \n';
        code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n';
        code += '    if user_id not in user_data or "button_response_config" not in user_data[user_id]:\n';
        code += '        await callback_query.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", show_alert=True)\n';
        code += '        return\n';
        code += '    \n';
        code += '    await callback_query.message.edit_text("‚è≠Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω")\n';
        code += '    del user_data[user_id]["button_response_config"]\n';
        code += '    \n';
        code += '    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç")\n';
      }
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
  code += '\n\n# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞\n';
  code += '@dp.message(F.text)\n';
  code += 'async def handle_user_input(message: types.Message):\n';
  code += '    user_id = message.from_user.id\n';
  code += '    \n';
  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
  code += '    if user_id in user_data and "waiting_for_conditional_input" in user_data[user_id]:\n';
  code += '        config = user_data[user_id]["waiting_for_conditional_input"]\n';
  code += '        user_text = message.text\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
  code += '        condition_id = config.get("condition_id", "unknown")\n';
  code += '        next_node_id = config.get("next_node_id")\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
  code += '        timestamp = get_moscow_time()\n';
  code += '        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é\n';
  code += '        input_variable = config.get("input_variable", "")\n';
  code += '        if input_variable:\n';
  code += '            variable_name = input_variable\n';
  code += '        else:\n';
  code += '            variable_name = f"conditional_response_{condition_id}"\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '        user_data[user_id][variable_name] = user_text\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '        saved_to_db = await update_user_data_in_db(user_id, variable_name, user_text)\n';
  code += '        if saved_to_db:\n';
  code += '            logging.info(f"‚úÖ –£—Å–ª–æ–≤–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '        else:\n';
  code += '            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
  code += '        \n';
  code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\n';
  code += '        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")\n';
  code += '        \n';
  code += '        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è\n';
  code += '        del user_data[user_id]["waiting_for_conditional_input"]\n';
  code += '        \n';
  code += '        logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {variable_name} = {user_text}")\n';
  code += '        \n';
  code += '        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω\n';
  code += '        if next_node_id:\n';
  code += '            try:\n';
  code += '                logging.info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É: {next_node_id}")\n';
  code += '                \n';
  code += '                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π\n';
  code += '                if next_node_id == "profile_command":\n';
  code += '                    logging.info("–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–º–∞–Ω–¥–µ /profile")\n';
  code += '                    await profile_handler(message)\n';
  code += '                else:\n';
  code += '                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ–±—ã—á–Ω–æ–º—É —É–∑–ª—É\n';
  code += '                    import types as aiogram_types\n';
  code += '                    fake_callback = aiogram_types.SimpleNamespace(\n';
  code += '                        id="conditional_nav",\n';
  code += '                        from_user=message.from_user,\n';
  code += '                        chat_instance="",\n';
  code += '                        data=next_node_id,\n';
  code += '                        message=message,\n';
  code += '                        answer=lambda text="", show_alert=False: asyncio.sleep(0)\n';
  code += '                    )\n';
  code += '                    \n';
  
  if (nodes.length > 0) {
    nodes.forEach((targetNode, index) => {
      const condition = index === 0 ? 'if' : 'elif';
      const safeFunctionName = targetNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
      code += `                    ${condition} next_node_id == "${targetNode.id}":\n`;
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
      if (targetNode.data.allowMultipleSelection === true) {
        // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
        const formattedText = formatTextForPython(messageText);
        code += `                        # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${targetNode.id}\n`;
        code += `                        logging.info(f"üîß –£—Å–ª–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${targetNode.id}")\n`;
        code += `                        text = ${formattedText}\n`;
        
        // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        code += '                        user_data[user_id] = user_data.get(user_id, {})\n';
        code += generateUniversalVariableReplacement('                        ');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        code += `                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
        code += `                        user_data[user_id]["multi_select_${targetNode.id}"] = []\n`;
        code += `                        user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
        code += `                        user_data[user_id]["multi_select_type"] = "selection"\n`;
        if (targetNode.data.multiSelectVariable) {
          code += `                        user_data[user_id]["multi_select_variable"] = "${targetNode.data.multiSelectVariable}"\n`;
        }
        
        // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
        if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
          code += generateInlineKeyboardCode(targetNode.data.buttons, '                        ', targetNode.id, targetNode.data, allNodeIds);
          code += `                        await message.answer(text, reply_markup=keyboard)\n`;
        } else {
          code += `                        await message.answer(text)\n`;
        }
        code += `                        logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞, —Å–æ–±–∏—Ä–∞—é—Ç –ª–∏ –æ–Ω–∏ –≤–≤–æ–¥
        if (targetNode.data.collectUserInput === true) {
          const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
          const formattedText = formatTextForPython(messageText);
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£ —É–∑–ª–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
          if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            code += `                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£ —É–∑–ª–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö, –∞ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥\n`;
            code += `                        logging.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∑–ª–∞ ${targetNode.id} —Å collectUserInput=true")\n`;
            code += `                        text = ${formattedText}\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            code += '                        user_data[user_id] = user_data.get(user_id, {})\n';
            code += generateUniversalVariableReplacement('                        ');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            code += generateInlineKeyboardCode(targetNode.data.buttons, '                        ', targetNode.id, targetNode.data, allNodeIds);
            code += `                        await message.answer(text, reply_markup=keyboard)\n`;
          } else {
            // –û–±—ã—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç
            code += `                        # –£–∑–µ–ª —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥\n`;
            code += `                        logging.info(f"üîß –£—Å–ª–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –≤–≤–æ–¥–æ–º: ${targetNode.id}")\n`;
            code += `                        text = ${formattedText}\n`;
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞
            const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
            const inputTargetNodeId = targetNode.data.inputTargetNodeId;
            code += `                        await message.answer(text)\n`;
            code += `                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n`;
            code += `                        user_data[user_id]["waiting_for_input"] = {\n`;
            code += `                            "type": "text",\n`;
            code += `                            "variable": "${inputVariable}",\n`;
            code += `                            "save_to_database": True,\n`;
            code += `                            "node_id": "${targetNode.id}",\n`;
            code += `                            "next_node_id": "${inputTargetNodeId || ''}"\n`;
            code += `                        }\n`;
          }
        } else {
          // –û–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
          const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
          const formattedText = formatTextForPython(messageText);
          code += `                        # –û–±—ã—á–Ω—ã–π —É–∑–µ–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
          code += `                        nav_text = ${formattedText}\n`;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          code += '                        user_data[user_id] = user_data.get(user_id, {})\n';
          code += generateUniversalVariableReplacement('                        ');
          code += `                        logging.info(f"–£—Å–ª–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–±—ã—á–Ω–æ–º—É —É–∑–ª—É: ${targetNode.id}")\n`;
          code += '                        await message.answer(nav_text)\n';
        }
      }
    });
    code += '                    else:\n';
    code += '                        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
  } else {
    code += '                    # No nodes available for navigation\n';
    code += '                    logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ {next_node_id}")\n';
  }
  
  code += '            except Exception as e:\n';
  code += '                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
  code += '        \n';
  code += '        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
  code += '    \n';
  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
  code += '    if user_id in user_data and "button_response_config" in user_data[user_id]:\n';
  code += '        config = user_data[user_id]["button_response_config"]\n';
  code += '        user_text = message.text\n';
  code += '        \n';
  code += '        # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π\n';
  code += '        selected_option = None\n';
  code += '        for option in config.get("options", []):\n';
  code += '            if option["text"] == user_text:\n';
  code += '                selected_option = option\n';
  code += '                break\n';
  code += '        \n';
  code += '        if selected_option:\n';
  code += '            selected_value = selected_option["value"]\n';
  code += '            selected_text = selected_option["text"]\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
  code += '            variable_name = config.get("variable", "button_response")\n';
  code += '            timestamp = get_moscow_time()\n';
  code += '            node_id = config.get("node_id", "unknown")\n';
  code += '            \n';
  code += '            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç\n';
  code += '            response_data = {\n';
  code += '                "value": selected_value,\n';
  code += '                "text": selected_text,\n';
  code += '                "type": "button_choice",\n';
  code += '                "timestamp": timestamp,\n';
  code += '                "nodeId": node_id,\n';
  code += '                "variable": variable_name\n';
  code += '            }\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '            user_data[user_id][variable_name] = response_data\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n';
  code += '            if config.get("save_to_database"):\n';
  code += '                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n';
  code += '                if saved_to_db:\n';
  code += '                    logging.info(f"‚úÖ –ö–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {variable_name} = {selected_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '                else:\n';
  code += '                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
  code += '            \n';
  code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n';
  code += '            success_message = config.get("success_message", "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤—ã–±–æ—Ä!")\n';
  code += '            await message.answer(f"{success_message}\\n\\n‚úÖ –í–∞—à –≤—ã–±–æ—Ä: {selected_text}", reply_markup=ReplyKeyboardRemove())\n';
  code += '            \n';
  code += '            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n';
  code += '            del user_data[user_id]["button_response_config"]\n';
  code += '            \n';
  code += '            logging.info(f"–ü–æ–ª—É—á–µ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {variable_name} = {selected_text}")\n';
  code += '            \n';
  code += '            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏\n';
  code += '            option_action = selected_option.get("action", "goto")\n';
  code += '            option_target = selected_option.get("target", "")\n';
  code += '            option_url = selected_option.get("url", "")\n';
  code += '            \n';
  code += '            if option_action == "url" and option_url:\n';
  code += '                # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏\n';
  code += '                url = option_url\n';
  code += '                keyboard = InlineKeyboardMarkup(inline_keyboard=[\n';
  code += '                    [InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=url)]\n';
  code += '                ])\n';
  code += '                await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)\n';
  code += '            elif option_action == "command" and option_target:\n';
  code += '                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã\n';
  code += '                command = option_target\n';
  code += '                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã\n';
  code += '                import types as aiogram_types\n';
  code += '                fake_message = aiogram_types.SimpleNamespace(\n';
  code += '                    from_user=message.from_user,\n';
  code += '                    chat=message.chat,\n';
  code += '                    text=command,\n';
  code += '                    message_id=message.message_id\n';
  code += '                )\n';
  code += '                \n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä
  const commandNodes = (nodes || []).filter(n => (n.type === 'start' || n.type === 'command') && n.data.command);
  commandNodes.forEach((cmdNode, cmdIndex) => {
    const condition = cmdIndex === 0 ? 'if' : 'elif';
    code += `                ${condition} command == "${cmdNode.data.command}":\n`;
    code += `                    try:\n`;
    code += `                        await ${cmdNode.type === 'start' ? 'start_handler' : `${cmdNode.data.command?.replace(/[^a-zA-Z0-9_]/g, '_')}_handler`}(fake_message)\n`;
    code += `                    except Exception as e:\n`;
    code += `                        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${cmdNode.data.command}: {e}")\n`;
  });
  if (commandNodes.length > 0) {
    code += `                else:\n`;
    code += `                    logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")\n`;
  }
  
  code += '            elif option_action == "goto" and option_target:\n';
  code += '                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É\n';
  code += '                target_node_id = option_target\n';
  code += '                try:\n';
  code += '                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n';

  // Generate navigation logic for reply button responses  
  if (nodes.length > 0) {
    nodes.forEach((btnNode, btnIndex) => {
      const safeFunctionName = btnNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
      const condition = btnIndex === 0 ? 'if' : 'elif';
      code += `                    ${condition} target_node_id == "${btnNode.id}":\n`;
      code += `                        await handle_callback_${safeFunctionName}(types.CallbackQuery(id="reply_nav", from_user=message.from_user, chat_instance="", data=target_node_id, message=message))\n`;
    });
    code += '                    else:\n';
    code += '                        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª: {target_node_id}")\n';
  } else {
    code += '                    pass  # No nodes to handle\n';
  }
  code += '                except Exception as e:\n';
  code += '                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —É–∑–ª—É {target_node_id}: {e}")\n';
  code += '            else:\n';
  code += '                # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ next_node_id –µ—Å–ª–∏ –Ω–µ—Ç action\n';
  code += '                next_node_id = config.get("next_node_id")\n';
  code += '                if next_node_id:\n';
  code += '                    try:\n';
  code += '                        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞\n';
  
  if (nodes.length > 0) {
    nodes.forEach((btnNode, btnIndex) => {
      const safeFunctionName = btnNode.id.replace(/[^a-zA-Z0-9_]/g, '_');
      const condition = btnIndex === 0 ? 'if' : 'elif';
      code += `                        ${condition} next_node_id == "${btnNode.id}":\n`;
      code += `                            await handle_callback_${safeFunctionName}(types.CallbackQuery(id="reply_nav", from_user=message.from_user, chat_instance="", data=next_node_id, message=message))\n`;
    });
    code += '                        else:\n';
    code += '                            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
  } else {
    code += '                        pass  # No nodes to handle\n';
  }
  code += '                    except Exception as e:\n';
  code += '                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
  code += '            return\n';
  code += '        else:\n';
  code += '            # –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã\n';
  code += '            available_options = [option["text"] for option in config.get("options", [])]\n';
  code += '            options_text = "\\n".join([f"‚Ä¢ {opt}" for opt in available_options])\n';
  code += '            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:\\n\\n{options_text}")\n';
  code += '            return\n';
  code += '    \n';
  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)\n';
  code += '    has_waiting_state = user_id in user_data and "waiting_for_input" in user_data[user_id]\n';
  code += '    logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç {message.text}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è: {has_waiting_state}")\n';
  code += '    if user_id in user_data and "waiting_for_input" in user_data[user_id]:\n';
  code += '        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É\n';
  code += '        waiting_config = user_data[user_id]["waiting_for_input"]\n';
  code += '        \n';
  code += '        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞\n';
  code += '        # –∏ —á—Ç–æ –≤–≤–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–∑–ª–∞\n';
  code += '        if not waiting_config:\n';
  code += '            return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º\n';
  code += '        \n';
  code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–≤–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞\n';
  code += '        current_node_id = waiting_config.get("node_id") if isinstance(waiting_config, dict) else waiting_config\n';
  code += '        processed_inputs = user_data[user_id].get("processed_inputs", set())\n';
  code += '        if current_node_id in processed_inputs and current_node_id != "name_input":\n';
  code += '            logging.info(f"–í–≤–æ–¥ –¥–ª—è —É–∑–ª–∞ {current_node_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")\n';
  code += '            return  # –í–≤–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n';
  code += '        \n';
  code += '        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ inline –∫–Ω–æ–ø–∫–æ–π, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º\n';
  code += '        variable_name_preview = waiting_config.get("variable") if isinstance(waiting_config, dict) else user_data[user_id].get("input_variable", "user_response")\n';
  code += '        if variable_name_preview in user_data[user_id] and user_data[user_id][variable_name_preview]:\n';
  code += '            logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {variable_name_preview} —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")\n';
  code += '            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ\n';
  code += '            del user_data[user_id]["waiting_for_input"]\n';
  code += '            return\n';
  code += '        \n';
  code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - –Ω–æ–≤—ã–π (—Å–ª–æ–≤–∞—Ä—å) –∏–ª–∏ —Å—Ç–∞—Ä—ã–π (—Å—Ç—Ä–æ–∫–∞)\n';
  code += '        if isinstance(waiting_config, dict):\n';
  code += '            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è\n';
  code += '            waiting_node_id = waiting_config.get("node_id")\n';
  code += '            input_type = waiting_config.get("type", "text")\n';
  code += '            variable_name = waiting_config.get("variable", "user_response")\n';
  code += '            save_to_database = waiting_config.get("save_to_database", False)\n';
  code += '            min_length = waiting_config.get("min_length", 0)\n';
  code += '            max_length = waiting_config.get("max_length", 0)\n';
  code += '            next_node_id = waiting_config.get("next_node_id")\n';
  code += '        else:\n';
  code += '            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - waiting_config —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å node_id\n';
  code += '            waiting_node_id = waiting_config\n';
  code += '            input_type = user_data[user_id].get("input_type", "text")\n';
  code += '            variable_name = user_data[user_id].get("input_variable", "user_response")\n';
  code += '            save_to_database = user_data[user_id].get("save_to_database", False)\n';
  code += '            min_length = 0\n';
  code += '            max_length = 0\n';
  code += '            next_node_id = user_data[user_id].get("waiting_input_target_node_id") or user_data[user_id].get("input_target_node_id")\n';
  code += '        \n';
  code += '        user_text = message.text\n';
  code += '        \n';
  code += '        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n';
  code += '        if isinstance(waiting_config, dict):\n';
  code += '            # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã\n';
  code += '            if min_length > 0 and len(user_text) < min_length:\n';
  code += '                retry_message = waiting_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '                await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")\n';
  code += '                return\n';
  code += '            \n';
  code += '            if max_length > 0 and len(user_text) > max_length:\n';
  code += '                retry_message = waiting_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '                await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")\n';
  code += '                return\n';
  code += '            \n';
  code += '            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞\n';
  code += '            if input_type == "email":\n';
  code += '                import re\n';
  code += '                email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"\n';
  code += '                if not re.match(email_pattern, user_text):\n';
  code += '                    retry_message = waiting_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. {retry_message}")\n';
  code += '                    return\n';
  code += '            elif input_type == "number":\n';
  code += '                try:\n';
  code += '                    float(user_text)\n';
  code += '                except ValueError:\n';
  code += '                    retry_message = waiting_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '                    await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. {retry_message}")\n';
  code += '                    return\n';
  code += '            elif input_type == "phone":\n';
  code += '                import re\n';
  code += '                phone_pattern = r"^[+]?[0-9\\s\\-\\(\\)]{10,}$"\n';
  code += '                if not re.match(phone_pattern, user_text):\n';
  code += '                    retry_message = waiting_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '                    await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. {retry_message}")\n';
  code += '                    return\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n';
  code += '            timestamp = get_moscow_time()\n';
  code += '            response_data = user_text\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '            user_data[user_id][variable_name] = response_data\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n';
  code += '            if save_to_database:\n';
  code += '                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n';
  code += '                if saved_to_db:\n';
  code += '                    logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {variable_name} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '                else:\n';
  code += '                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
  code += '            \n';
  code += '            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
  code += '            success_message = waiting_config.get("success_message", "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")\n';
  code += '            logging.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {success_message}")\n';
  code += '            await message.answer(success_message)\n';
  code += '            logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {success_message}")\n';
  code += '            \n';
  code += '            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä, —á—Ç–æ –≤–≤–æ–¥ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É–∑–ª–∞\n';
  code += '            if "processed_inputs" not in user_data[user_id]:\n';
  code += '                user_data[user_id]["processed_inputs"] = set()\n';
  code += '            user_data[user_id]["processed_inputs"].add(waiting_node_id)\n';
  code += '            \n';
  code += '            logging.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")\n';
  code += '            logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {variable_name} = {user_text}")\n';
  code += '            \n';
  code += '            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n';
  code += '            if next_node_id:\n';
  code += '                try:\n';
  code += '                    logging.info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É: {next_node_id}")\n';
  code += '                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —É–∑–ª–∞–º\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
  if (nodes.length > 0) {
    nodes.forEach((targetNode, index) => {
      const condition = index === 0 ? 'if' : 'elif';
      code += `                    ${condition} next_node_id == "${targetNode.id}":\n`;
      
      if (targetNode.type === 'message') {
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        if (targetNode.data.allowMultipleSelection === true) {
          // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
          const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
          const formattedText = formatTextForPython(messageText);
          code += `                        # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${targetNode.id}\n`;
          code += `                        logging.info(f"üîß –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${targetNode.id}")\n`;
          code += `                        text = ${formattedText}\n`;
          
          // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          code += '                        user_data[user_id] = user_data.get(user_id, {})\n';
          code += generateUniversalVariableReplacement('                        ');
          
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
          code += `                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
          code += `                        user_data[user_id]["multi_select_${targetNode.id}"] = []\n`;
          code += `                        user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
          code += `                        user_data[user_id]["multi_select_type"] = "selection"\n`;
          if (targetNode.data.multiSelectVariable) {
            code += `                        user_data[user_id]["multi_select_variable"] = "${targetNode.data.multiSelectVariable}"\n`;
          }
          
          // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
          if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            code += generateInlineKeyboardCode(targetNode.data.buttons, '                        ', targetNode.id, targetNode.data, allNodeIds);
            code += `                        await message.answer(text, reply_markup=keyboard)\n`;
          } else {
            code += `                        await message.answer(text)\n`;
          }
          code += `                        logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
        } else {
          const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
          const cleanedMessageText = stripHtmlTags(messageText);
          const formattedText = formatTextForPython(cleanedMessageText);
          code += `                        text = ${formattedText}\n`;
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
          code += '                        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ\n';
          code += generateUniversalVariableReplacement('                        ');
          
          // –ï—Å–ª–∏ —É–∑–µ–ª message —Å–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
          if (targetNode.data.collectUserInput === true) {
          const inputType = targetNode.data.inputType || 'text';
          const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
          const inputTargetNodeId = targetNode.data.inputTargetNodeId;
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –í–ú–ï–°–¢–û –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
          if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            code += '                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£ —É–∑–ª–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞\n';
            code += '                        builder = InlineKeyboardBuilder()\n';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∑–ª–∞ —Å collectUserInput + buttons
            targetNode.data.buttons.forEach((btn, btnIndex) => {
              if (btn.action === "goto" && btn.target) {
                const callbackData = `${btn.target}`;
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
              } else if (btn.action === "url" && btn.url) {
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              }
            });
            
            const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data, allNodeIds);
            code += `                        builder.adjust(${columns})\n`;
            code += '                        keyboard = builder.as_markup()\n';
            code += '                        await message.answer(text, reply_markup=keyboard)\n';
            code += `                        logging.info(f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–∑–ª–∞ ${targetNode.id} —Å collectUserInput")\n`;
          } else {
            code += '                        await message.answer(text)\n';
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫
            code += `                        logging.info(f"DEBUG: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${inputVariable}")\n`;
            code += '                        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è message —É–∑–ª–∞\n';
            code += '                        user_data[user_id]["waiting_for_input"] = {\n';
            code += `                            "type": "${inputType}",\n`;
            code += `                            "variable": "${inputVariable}",\n`;
            code += '                            "save_to_database": True,\n';
            code += `                            "node_id": "${targetNode.id}",\n`;
            code += `                            "next_node_id": "${inputTargetNodeId || ''}",\n`;
            code += `                            "min_length": ${targetNode.data.minLength || 0},\n`;
            code += `                            "max_length": ${targetNode.data.maxLength || 0},\n`;
            code += '                            "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
            code += '                            "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
            code += '                        }\n';
          }
        } else {
          // –ï—Å–ª–∏ —É–∑–µ–ª –Ω–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ inline –∫–Ω–æ–ø–∫–∏
          if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            code += '                        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
            code += '                        builder = InlineKeyboardBuilder()\n';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            targetNode.data.buttons.forEach((btn, btnIndex) => {
              if (btn.action === "goto" && btn.target) {
                const callbackData = `${btn.target}`;
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${callbackData}"))\n`;
              } else if (btn.action === "url" && btn.url) {
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", url="${btn.url}"))\n`;
              } else if (btn.action === "command" && btn.target) {
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥
                const commandCallback = `cmd_${btn.target.replace('/', '')}`;
                code += `                        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${btn.text} -> ${commandCallback}")\n`;
                code += `                        builder.add(InlineKeyboardButton(text="${btn.text}", callback_data="${commandCallback}"))\n`;
              }
            });
            
            // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
            const columns = calculateOptimalColumns(targetNode.data.buttons, targetNode.data, allNodeIds);
            code += `                        builder.adjust(${columns})\n`;
            code += '                        keyboard = builder.as_markup()\n';
            code += '                        await message.answer(text, reply_markup=keyboard)\n';
          } else {
            code += '                        await message.answer(text)\n';
          }
          
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –¥–ª—è message —É–∑–ª–æ–≤ –±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞
          if (!targetNode.data.collectUserInput) {
            code += '                        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∑–¥–µ—Å—å - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n';
            code += '                        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞\n';
            code += '                        if "waiting_for_input" in user_data[user_id]:\n';
            code += '                            del user_data[user_id]["waiting_for_input"]\n';
            code += '                        \n';
            code += '                        logging.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")\n';
          }
        }
        } // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ else –¥–ª—è allowMultipleSelection
      } else if (targetNode.type === 'user-input') {
        const inputPrompt = formatTextForPython(targetNode.data.messageText || "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:");
        code += `                        prompt_text = ${inputPrompt}\n`;
        code += '                        await message.answer(prompt_text)\n';
        code += '                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
        code += '                        user_data[user_id]["waiting_for_input"] = {\n';
        code += `                            "type": "${targetNode.data.inputType || 'text'}",\n`;
        code += `                            "variable": "${targetNode.data.inputVariable || 'user_response'}",\n`;
        code += `                            "save_to_database": True,\n`;
        code += `                            "node_id": "${targetNode.id}",\n`;
        const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
        if (nextConnection) {
          code += `                            "next_node_id": "${nextConnection.targetNodeId}",\n`;
        } else {
          code += '                            "next_node_id": None,\n';
        }
        code += `                            "min_length": ${targetNode.data.minLength || 0},\n`;
        code += `                            "max_length": ${targetNode.data.maxLength || 0},\n`;
        code += '                            "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
        code += '                            "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
        code += '                        }\n';
      } else if (targetNode.type === 'command') {
        // –î–ª—è —É–∑–ª–æ–≤ –∫–æ–º–∞–Ω–¥ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        const commandName = targetNode.data.command?.replace('/', '') || 'unknown';
        const handlerName = `${commandName}_handler`;
        code += `                        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${targetNode.data.command}\n`;
        code += '                        from types import SimpleNamespace\n';
        code += '                        fake_message = SimpleNamespace()\n';
        code += '                        fake_message.from_user = message.from_user\n';
        code += '                        fake_message.chat = message.chat\n';
        code += '                        fake_message.date = message.date\n';
        code += '                        fake_message.answer = message.answer\n';
        code += `                        await ${handlerName}(fake_message)\n`;
      } else {
        code += `                        logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id} —Ç–∏–ø–∞ ${targetNode.type}")\n`;
      }
    });
    
    code += '                    else:\n';
    code += '                        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
  } else {
    code += '                    # No nodes available for navigation\n';
    code += '                    logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ {next_node_id}")\n';
  }
  
  code += '                except Exception as e:\n';
  code += '                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
  code += '            \n';
  code += '            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n';
  code += '        \n';
  code += '        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)\n';
  code += '        # –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫\n';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–±–æ—Ä–æ–º –≤–≤–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
  const inputNodes = (nodes || []).filter(node => node.data.collectUserInput);
  code += `        logging.info(f"DEBUG old format: checking inputNodes: ${inputNodes.map(n => n.id).join(', ')}")\n`;
  inputNodes.forEach((node, index) => {
    const condition = index === 0 ? 'if' : 'elif';
    code += `        ${condition} waiting_node_id == "${node.id}":\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    if (node.data.inputValidation) {
      if (node.data.minLength && node.data.minLength > 0) {
        code += `            if len(user_text) < ${node.data.minLength}:\n`;
        code += `                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º ${node.data.minLength} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n`;
        code += `                return\n`;
      }
      if (node.data.maxLength && node.data.maxLength > 0) {
        code += `            if len(user_text) > ${node.data.maxLength}:\n`;
        code += `                await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º ${node.data.maxLength} —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n`;
        code += `                return\n`;
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
    if (node.data.inputType === 'email') {
      code += `            import re\n`;
      code += `            email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"\n`;
      code += `            if not re.match(email_pattern, user_text):\n`;
      code += `                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n`;
      code += `                return\n`;
    } else if (node.data.inputType === 'number') {
      code += `            try:\n`;
      code += `                float(user_text)\n`;
      code += `            except ValueError:\n`;
      code += `                await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n`;
      code += `                return\n`;
    } else if (node.data.inputType === 'phone') {
      code += `            import re\n`;
      code += `            phone_pattern = r"^[+]?[0-9\\s\\-\\(\\)]{10,}$"\n`;
      code += `            if not re.match(phone_pattern, user_text):\n`;
      code += `                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n`;
      code += `                return\n`;
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    const variableName = node.data.inputVariable || 'user_response';
    code += `            \n`;
    code += `            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
    code += `            import datetime\n`;
    code += `            timestamp = get_moscow_time()\n`;
    code += `            \n`;
    code += `            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—è\n`;
    code += `            response_data = user_text  # –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\n`;
    code += `            \n`;
    code += `            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n`;
    code += `            user_data[user_id]["${variableName}"] = response_data\n`;
    code += `            \n`;
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è collectUserInput)
    code += `            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n`;
    code += `            saved_to_db = await update_user_data_in_db(user_id, "${variableName}", response_data)\n`;
    code += `            if saved_to_db:\n`;
    code += `                logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: ${variableName} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n`;
    code += `            else:\n`;
    code += `                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n`;
    code += `            \n`;
    
    code += `            \n`;
    code += `            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –≥–∞–ª–æ—á–∫–æ–π\n`;
    code += `            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")\n`;
    code += `            \n`;
    code += `            logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: ${variableName} = {user_text}")\n`;
    code += `            \n`;
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É
    if (node.data.inputTargetNodeId) {
      code += `            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n`;
      code += `            try:\n`;
      
      // –ù–∞–π–¥–µ–º —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const targetNode = nodes.find(n => n.id === node.data.inputTargetNodeId);
      if (targetNode) {
        if (targetNode.type === 'keyboard' || targetNode.type === 'message') {
          // –î–ª—è keyboard –∏ message —É–∑–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
          const messageText = targetNode.data.messageText || '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ';
          const formattedText = formatTextForPython(messageText);
          code += `                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
          code += `                text = ${formattedText}\n`;
          
          // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª —Ç–æ–∂–µ —Å–æ–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
          if (targetNode.data.collectUserInput === true) {
            const nextInputType = targetNode.data.inputType || 'text';
            const nextInputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
            const nextInputTargetNodeId = targetNode.data.inputTargetNodeId;
            
            code += `                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}\n`;
            code += `                user_data[user_id]["waiting_for_input"] = {\n`;
            code += `                    "type": "${nextInputType}",\n`;
            code += `                    "variable": "${nextInputVariable}",\n`;
            code += `                    "save_to_database": True,\n`;
            code += `                    "node_id": "${targetNode.id}",\n`;
            code += `                    "next_node_id": "${nextInputTargetNodeId || ''}",\n`;
            code += `                    "min_length": 0,\n`;
            code += `                    "max_length": 0,\n`;
            code += `                    "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n`;
            code += `                    "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n`;
            code += `                }\n`;
            code += `                \n`;
          }
          
          if (targetNode.data.keyboardType === 'inline' && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
            code += `                await message.answer(text, reply_markup=keyboard)\n`;
          } else {
            code += `                await message.answer(text)\n`;
          }
          
          code += `                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞\n`;
          code += `                if "waiting_for_input" in user_data[user_id]:\n`;
          code += `                    del user_data[user_id]["waiting_for_input"]\n`;
          if (node.data.inputType) {
            code += `                if "input_type" in user_data[user_id]:\n`;
            code += `                    del user_data[user_id]["input_type"]\n`;
          }
          code += `                \n`;
          code += `                logging.info("‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")\n`;
        } else {
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
          if (targetNode.data.allowMultipleSelection === true) {
            // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
            const formattedText = formatTextForPython(messageText);
            code += `                # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${targetNode.id}\n`;
            code += `                text = ${formattedText}\n`;
            
            // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            code += '                user_data[user_id] = user_data.get(user_id, {})\n';
            code += generateUniversalVariableReplacement('                ');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            code += `                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
            code += `                user_data[user_id]["multi_select_${targetNode.id}"] = []\n`;
            code += `                user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
            code += `                user_data[user_id]["multi_select_type"] = "selection"\n`;
            if (targetNode.data.multiSelectVariable) {
              code += `                user_data[user_id]["multi_select_variable"] = "${targetNode.data.multiSelectVariable}"\n`;
            }
            
            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
            if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
              code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
              code += `                await message.answer(text, reply_markup=keyboard)\n`;
            } else {
              code += `                await message.answer(text)\n`;
            }
            code += `                logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
            const formattedText = formatTextForPython(messageText);
            code += `                # –û–±—ã—á–Ω—ã–π —É–∑–µ–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
            code += `                nav_text = ${formattedText}\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            code += '                user_data[user_id] = user_data.get(user_id, {})\n';
            code += generateUniversalVariableReplacement('                ');
            
            // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            if (targetNode.data.keyboardType === 'inline' && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
              code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
              code += `                await message.answer(nav_text, reply_markup=keyboard)\n`;
            } else {
              code += '                await message.answer(nav_text)\n';
            }
            code += `                logging.info(f"‚úÖ –í–≤–æ–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–±—ã—á–Ω–æ–º—É —É–∑–ª—É: ${targetNode.id}")\n`;
          }
        }
      } else {
        // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        code += `                logging.warning(f"–¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª {node.data.inputTargetNodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω")\n`;
        code += `                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")\n`;
      }
      
      code += `            except Exception as e:\n`;
      code += `                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É: {e}")\n`;
      code += `            return\n`;
    } else {
      // –ï—Å–ª–∏ inputTargetNodeId —Ä–∞–≤–µ–Ω null, —ç—Ç–æ –∫–æ–Ω–µ—Ü —Ü–µ–ø–æ—á–∫–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      code += `            # –ö–æ–Ω–µ—Ü —Ü–µ–ø–æ—á–∫–∏ –≤–≤–æ–¥–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É\n`;
      code += `            logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")\n`;
      code += `            return\n`;
    }
  });
  
  code += '        \n';
  code += '        # –ï—Å–ª–∏ —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n';
  code += '        logging.warning(f"–£–∑–µ–ª –¥–ª—è —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {waiting_node_id}")\n';
  code += '        del user_data[user_id]["waiting_for_input"]\n';
  code += '        return\n';
  code += '    \n';
  code += '    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n';
  code += '    if user_id in user_data and user_data[user_id].get("input_collection_enabled"):\n';
  code += '        input_node_id = user_data[user_id].get("input_node_id")\n';
  code += '        input_variable = user_data[user_id].get("input_variable", "button_response")\n';
  code += '        input_target_node_id = user_data[user_id].get("input_target_node_id")\n';
  code += '        user_text = message.text\n';
  code += '        \n';
  code += '        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥, –∞ –Ω–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π\n';
  code += '        if input_target_node_id:\n';
  code += '            # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n';
  code += '            timestamp = get_moscow_time()\n';
  code += '            response_data = user_text\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '            user_data[user_id][input_variable] = response_data\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '            saved_to_db = await update_user_data_in_db(user_id, input_variable, response_data)\n';
  code += '            if saved_to_db:\n';
  code += '                logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {input_variable} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '            else:\n';
  code += '                logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
  code += '            \n';
  code += '            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏\n';
  code += '            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")\n';
  code += '            \n';
  code += '            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {input_variable} = {user_text}")\n';
  code += '            \n';
  code += '            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ü–µ–ª–µ–≤–æ–º—É —É–∑–ª—É\n';
  code += '            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞\n';
  code += '            del user_data[user_id]["input_collection_enabled"]\n';
  code += '            if "input_node_id" in user_data[user_id]:\n';
  code += '                del user_data[user_id]["input_node_id"]\n';
  code += '            if "input_variable" in user_data[user_id]:\n';
  code += '                del user_data[user_id]["input_variable"]\n';
  code += '            if "input_target_node_id" in user_data[user_id]:\n';
  code += '                del user_data[user_id]["input_target_node_id"]\n';
  code += '            \n';
  code += '            # –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ —Ü–µ–ª–µ–≤–æ–º—É —É–∑–ª—É
  nodes.forEach((targetNode) => {
    code += `            if input_target_node_id == "${targetNode.id}":\n`;
    if (targetNode.type === 'keyboard' || targetNode.type === 'message') {
      const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
      const formattedText = formatTextForPython(messageText);
      code += `                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id}\n`;
      code += `                text = ${formattedText}\n`;
      
      // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      code += '                user_data[user_id] = user_data.get(user_id, {})\n';
      code += generateUniversalVariableReplacement('                ');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (targetNode.data.keyboardType === 'inline' && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
        code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
        code += `                await message.answer(text, reply_markup=keyboard)\n`;
      } else {
        code += `                await message.answer(text)\n`;
      }
      code += `                logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω")\n`;
    } else if (targetNode.data.allowMultipleSelection) {
      // –î–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º —Å–æ–∑–¥–∞–µ–º –ø—Ä—è–º—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
      const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
      const formattedText = formatTextForPython(messageText);
      code += `                # –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º ${targetNode.id}\n`;
      code += `                text = ${formattedText}\n`;
      
      // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      code += '                user_data[user_id] = user_data.get(user_id, {})\n';
      code += generateUniversalVariableReplacement('                ');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
      code += `                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
      code += `                user_data[user_id]["multi_select_${targetNode.id}"] = []\n`;
      code += `                user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
      code += `                user_data[user_id]["multi_select_type"] = "selection"\n`;
      if (targetNode.data.multiSelectVariable) {
        code += `                user_data[user_id]["multi_select_variable"] = "${targetNode.data.multiSelectVariable}"\n`;
      }
      
      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
      if (targetNode.data.buttons && targetNode.data.buttons.length > 0) {
        code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
        code += `                await message.answer(text, reply_markup=keyboard)\n`;
      } else {
        code += `                await message.answer(text)\n`;
      }
      code += `                logging.info(f"‚úÖ –ü—Ä—è–º–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —É–∑–ª—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É–∑–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
      const formattedText = formatTextForPython(messageText);
      code += `                # –û–±—ã—á–Ω—ã–π —É–∑–µ–ª - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${targetNode.id}\n`;
      code += `                text = ${formattedText}\n`;
      
      // –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      code += '                user_data[user_id] = user_data.get(user_id, {})\n';
      code += generateUniversalVariableReplacement('                ');
      
      if (targetNode.data.keyboardType === 'inline' && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
        code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
        code += `                await message.answer(text, reply_markup=keyboard)\n`;
      } else {
        code += `                await message.answer(text)\n`;
      }
      code += `                logging.info(f"‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ–±—ã—á–Ω–æ–º—É —É–∑–ª—É ${targetNode.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
    }
  });
  code += '            return\n';
  code += '        else:\n';
  code += '            # –≠—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞)\n';
  code += '            timestamp = get_moscow_time()\n';
  code += '            response_data = user_text\n';
  code += '            \n';
  code += '            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '            user_data[user_id][f"{input_variable}_additional"] = response_data\n';
  code += '            \n';
  code += '            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n';
  code += '            await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")\n';
  code += '            \n';
  code += '            logging.info(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥: {input_variable}_additional = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '        return\n';
  code += '    \n';
  code += '    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
  code += '    return\n';
  code += '    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞\n';
  code += '    min_length = input_config.get("min_length", 0)\n';
  code += '    max_length = input_config.get("max_length", 0)\n';
  code += '    \n';
  code += '    if min_length > 0 and len(user_text) < min_length:\n';
  code += '        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º {min_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")\n';
  code += '        return\n';
  code += '    \n';
  code += '    if max_length > 0 and len(user_text) > max_length:\n';
  code += '        retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª–æ–≤). {retry_message}")\n';
  code += '        return\n';
  code += '    \n';
  code += '    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–≤–æ–¥–∞\n';
  code += '    input_type = input_config.get("type", "text")\n';
  code += '    \n';
  code += '    if input_type == "email":\n';
  code += '        import re\n';
  code += '        email_pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"\n';
  code += '        if not re.match(email_pattern, user_text):\n';
  code += '            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. {retry_message}")\n';
  code += '            return\n';
  code += '    \n';
  code += '    elif input_type == "number":\n';
  code += '        try:\n';
  code += '            float(user_text)\n';
  code += '        except ValueError:\n';
  code += '            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '            await message.answer(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. {retry_message}")\n';
  code += '            return\n';
  code += '    \n';
  code += '    elif input_type == "phone":\n';
  code += '        import re\n';
  code += '        phone_pattern = r"^[+]?[0-9\\s\\-\\(\\)]{10,}$"\n';
  code += '        if not re.match(phone_pattern, user_text):\n';
  code += '            retry_message = input_config.get("retry_message", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")\n';
  code += '            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. {retry_message}")\n';
  code += '            return\n';
  code += '    \n';
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º\n';
  code += '    variable_name = input_config.get("variable", "user_response")\n';
  code += '    timestamp = get_moscow_time()\n';
  code += '    node_id = input_config.get("node_id", "unknown")\n';
  code += '    \n';
  code += '    # –ü—Ä–æ—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞\n';
  code += '    response_data = user_text\n';
  code += '    \n';
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '    user_data[user_id][variable_name] = response_data\n';
  code += '    \n';
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ\n';
  code += '    if input_config.get("save_to_database"):\n';
  code += '        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n';
  code += '        if saved_to_db:\n';
  code += '            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {variable_name} = {user_text} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '        else:\n';
  code += '            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")\n';
  code += '    \n';
  code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ\n';
  code += '    success_message = input_config.get("success_message", "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!")\n';
  code += '    await message.answer(success_message)\n';
  code += '    \n';
  code += '    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞\n';
  code += '    del user_data[user_id]["waiting_for_input"]\n';
  code += '    \n';
  code += '    logging.info(f"–ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥: {variable_name} = {user_text}")\n';
  code += '    \n';
  code += '    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞\n';
  code += '    next_node_id = input_config.get("next_node_id")\n';
  code += '    logging.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é: next_node_id = {next_node_id}")\n';
  code += '    if next_node_id:\n';
  code += '        try:\n';
  code += '            logging.info(f"üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É: {next_node_id}")\n';
  code += '            \n';
  code += '            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n';
  code += '            fake_message = type("FakeMessage", (), {})()\n';
  code += '            fake_message.from_user = message.from_user\n';
  code += '            fake_message.answer = message.answer\n';
  code += '            fake_message.delete = lambda: None\n';
  code += '            \n';
  code += '            # –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª –ø–æ ID –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n';
  
  // Generate navigation logic for each node type
  if (nodes.length > 0) {
    nodes.forEach((targetNode, index) => {
      const condition = index === 0 ? 'if' : 'elif';
      code += `            ${condition} next_node_id == "${targetNode.id}":\n`;
      
      if (targetNode.type === 'keyboard') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
        const formattedText = formatTextForPython(messageText);
        
        if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
          code += `                text = ${formattedText}\n`;
          code += '                builder = InlineKeyboardBuilder()\n';
          targetNode.data.buttons.forEach((button: any, buttonIndex: number) => {
            if (button.action === "url") {
              code += `                builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
            } else if (button.action === 'goto') {
              const callbackData = button.target || button.id || 'no_action';
              code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
            } else if (button.action === 'command') {
              const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
              code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
            } else {
              const callbackData = button.target || button.id || 'no_action';
              code += `                builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
            }
          });
          code += '                keyboard = builder.as_markup()\n';
          code += '                await fake_message.answer(text, reply_markup=keyboard)\n';
        } else if (targetNode.data.keyboardType === "reply" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
          code += `                text = ${formattedText}\n`;
          code += '                builder = ReplyKeyboardBuilder()\n';
          targetNode.data.buttons.forEach((button: any) => {
            if (button.action === "contact" && button.requestContact) {
              code += `                builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
            } else if (button.action === "location" && button.requestLocation) {
              code += `                builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
            } else {
              code += `                builder.add(KeyboardButton(text="${button.text}"))\n`;
            }
          });
          const resizeKeyboard = toPythonBoolean(targetNode.data.resizeKeyboard);
          const oneTimeKeyboard = toPythonBoolean(targetNode.data.oneTimeKeyboard);
          code += `                keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
          code += '                await fake_message.answer(text, reply_markup=keyboard)\n';
        } else {
          code += `                text = ${formattedText}\n`;
          code += '                await fake_message.answer(text)\n';
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        if (targetNode.data.enableTextInput) {
          const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
          const inputTargetNodeId = targetNode.data.inputTargetNodeId || '';
          
          code += '                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞\n';
          code += '                user_data[user_id]["waiting_for_input"] = {\n';
          code += '                    "type": "text",\n';
          code += `                    "variable": "${inputVariable}",\n`;
          code += '                    "save_to_database": True,\n';
          code += `                    "node_id": "${targetNode.id}",\n`;
          code += `                    "next_node_id": "${inputTargetNodeId}"\n`;
          code += '                }\n';
        } else if (targetNode.data.collectUserInput) {
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω collectUserInput
          const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
          const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
          const inputTargetNodeId = nextConnection ? nextConnection.targetNodeId : '';
          
          code += '                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (collectUserInput)\n';
          code += '                user_data[user_id]["waiting_for_input"] = {\n';
          code += '                    "type": "text",\n';
          code += `                    "variable": "${inputVariable}",\n`;
          code += '                    "save_to_database": True,\n';
          code += `                    "node_id": "${targetNode.id}",\n`;
          code += `                    "next_node_id": "${inputTargetNodeId}"\n`;
          code += '                }\n';
        }
      } else if (targetNode.type === 'message') {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∑–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
        const formattedText = formatTextForPython(messageText);
        
        if (targetNode.data.enableConditionalMessages && targetNode.data.conditionalMessages && targetNode.data.conditionalMessages.length > 0) {
          code += '                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
          code += '                text = None\n';
          code += '                \n';
          code += '                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π\n';
          code += '                user_record = await get_user_from_db(user_id)\n';
          code += '                if not user_record:\n';
          code += '                    user_record = user_data.get(user_id, {})\n';
          code += '                \n';
          code += '                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º user_data\n';
          code += '                if isinstance(user_record, dict):\n';
          code += '                    if "user_data" in user_record and isinstance(user_record["user_data"], dict):\n';
          code += '                        user_data_dict = user_record["user_data"]\n';
          code += '                    else:\n';
          code += '                        user_data_dict = user_record\n';
          code += '                else:\n';
          code += '                    user_data_dict = {}\n';
          code += '                \n';
          
          // Generate conditional logic using helper function
          code += generateConditionalMessageLogic(targetNode.data.conditionalMessages, '                ');
          
          // Add fallback
          code += '                else:\n';
          
          if (targetNode.data.fallbackMessage) {
            const fallbackText = formatTextForPython(targetNode.data.fallbackMessage);
            code += `                    text = ${fallbackText}\n`;
            code += '                    logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
          } else {
            code += `                    text = ${formattedText}\n`;
            code += '                    logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞")\n';
          }
          
          code += '                \n';
        } else {
          code += `                text = ${formattedText}\n`;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
        code += '                # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n';
        code += '                if "conditional_parse_mode" in locals() and conditional_parse_mode is not None:\n';
        code += '                    parse_mode = conditional_parse_mode\n';
        code += '                else:\n';
        if (targetNode.data.formatMode === 'markdown' || targetNode.data.markdown === true) {
          code += '                    parse_mode = ParseMode.MARKDOWN\n';
        } else if (targetNode.data.formatMode === 'html') {
          code += '                    parse_mode = ParseMode.HTML\n';
        } else {
          code += '                    parse_mode = None\n';
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons.length > 0) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
          code += generateInlineKeyboardCode(targetNode.data.buttons, '                ', targetNode.id, targetNode.data, allNodeIds);
          code += '                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n';
        } else if (targetNode.data.keyboardType === "reply" && targetNode.data.buttons.length > 0) {
          code += '                builder = ReplyKeyboardBuilder()\n';
          targetNode.data.buttons.forEach(button => {
            code += `                builder.add(KeyboardButton(text="${button.text}"))\n`;
          });
          const resizeKeyboard = toPythonBoolean(targetNode.data.resizeKeyboard);
          const oneTimeKeyboard = toPythonBoolean(targetNode.data.oneTimeKeyboard);
          code += `                keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
          code += '                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n';
        } else {
          code += '                await message.answer(text, parse_mode=parse_mode)\n';
        }
      } else if (targetNode.type === 'user-input') {
        const inputPrompt = formatTextForPython(targetNode.data.messageText || targetNode.data.inputPrompt || "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:");
        const responseType = targetNode.data.responseType || 'text';
        const inputType = targetNode.data.inputType || 'text';
        const inputVariable = targetNode.data.inputVariable || `response_${targetNode.id}`;
        const minLength = targetNode.data.minLength || 0;
        const maxLength = targetNode.data.maxLength || 0;
        const inputTimeout = targetNode.data.inputTimeout || 60;
        const saveToDatabase = targetNode.data.saveToDatabase || false;
        const placeholder = targetNode.data.placeholder || "";
        const responseOptions = targetNode.data.responseOptions || [];
        const allowMultipleSelection = targetNode.data.allowMultipleSelection || false;
        const allowSkip = targetNode.data.allowSkip || false;
        
        code += `                prompt_text = "${escapeForJsonString(inputPrompt)}"\n`;
        if (placeholder) {
          code += `                placeholder_text = "${placeholder}"\n`;
          code += '                prompt_text += f"\\n\\nüí° {placeholder_text}"\n';
        }
        
        // Check if this is a button response node
        if (responseType === 'buttons' && responseOptions.length > 0) {
          // For button response nodes, set up button_response_config
          code += '                \n';
          code += '                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞\n';
          code += '                builder = InlineKeyboardBuilder()\n';
          
          // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
          const responseButtons = responseOptions.map((option, index) => ({
            text: option.text,
            action: 'goto',
            target: `response_${targetNode.id}_${index}`,
            id: `response_${targetNode.id}_${index}`
          }));
          
          if (allowSkip) {
            responseButtons.push({
              text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
              action: 'goto',
              target: `skip_${targetNode.id}`,
              id: `skip_${targetNode.id}`
            });
          }
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
          code += generateInlineKeyboardCode(responseButtons, '                ', targetNode.id, targetNode.data, allNodeIds);
          code += '                await message.answer(prompt_text, reply_markup=keyboard)\n';
          code += '                \n';
          code += '                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n';
          code += '                user_data[user_id]["button_response_config"] = {\n';
          code += `                    "variable": "${inputVariable}",\n`;
          code += `                    "node_id": "${targetNode.id}",\n`;
          code += `                    "timeout": ${inputTimeout},\n`;
          code += `                    "allow_multiple": ${toPythonBoolean(allowMultipleSelection)},\n`;
          code += `                    "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
          code += '                    "selected": [],\n';
          code += '                    "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!",\n';
          code += `                    "prompt": "${escapeForJsonString(inputPrompt)}",\n`;
          code += '                    "options": [\n';
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          responseOptions.forEach((option, index) => {
            const optionValue = option.value || option.text;
            const action = option.action || 'goto';
            const target = option.target || '';
            const url = option.url || '';
            
            code += '                        {\n';
            code += `                            "text": "${escapeForJsonString(option.text)}",\n`;
            code += `                            "value": "${escapeForJsonString(optionValue)}",\n`;
            code += `                            "action": "${action}",\n`;
            code += `                            "target": "${target}",\n`;
            code += `                            "url": "${url}",\n`;
            code += `                            "callback_data": "response_${targetNode.id}_${index}"\n`;
            code += '                        }';
            if (index < responseOptions.length - 1) {
              code += ',';
            }
            code += '\n';
          });
          
          code += '                    ],\n';
          
          // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è —ç—Ç–æ–≥–æ user-input —É–∑–ª–∞ (fallback)
          const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
          if (nextConnection) {
            code += `                    "next_node_id": "${nextConnection.targetNodeId}"\n`;
          } else {
            code += '                    "next_node_id": None\n';
          }
          code += '                }\n';
        } else {
          // For text input nodes, use waiting_for_input
          code += '                await message.answer(prompt_text)\n';
          code += '                \n';
          code += '                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞\n';
          code += '                user_data[user_id]["waiting_for_input"] = {\n';
          code += `                    "type": "${inputType}",\n`;
          code += `                    "variable": "${inputVariable}",\n`;
          code += '                    "validation": "",\n';
          code += `                    "min_length": ${minLength},\n`;
          code += `                    "max_length": ${maxLength},\n`;
          code += `                    "timeout": ${inputTimeout},\n`;
          code += '                    "required": True,\n';
          code += '                    "allow_skip": False,\n';
          code += `                    "save_to_database": ${toPythonBoolean(saveToDatabase)},\n`;
          code += '                    "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
          code += '                    "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!",\n';
          code += `                    "prompt": "${escapeForJsonString(inputPrompt)}",\n`;
          code += `                    "node_id": "${targetNode.id}",\n`;
          
          // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è —ç—Ç–æ–≥–æ user-input —É–∑–ª–∞
          const nextConnection = connections.find(conn => conn.sourceNodeId === targetNode.id);
          if (nextConnection) {
            code += `                    "next_node_id": "${nextConnection.targetNodeId}"\n`;
          } else {
            code += '                    "next_node_id": None\n';
          }
          code += '                }\n';
        }
      } else if (targetNode.type === 'message') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∑–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        const messageText = targetNode.data.messageText || '–°–æ–æ–±—â–µ–Ω–∏–µ';
        const formattedText = formatTextForPython(messageText);
        code += `                await fake_message.answer(${formattedText})\n`;
        code += `                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞ ${targetNode.id}")\n`;
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–∑–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        code += `                logging.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id} —Ç–∏–ø–∞ ${targetNode.type}")\n`;
      }
    });
    
    code += '            else:\n';
    code += '                logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª: {next_node_id}")\n';
  } else {
    code += '            # No nodes available for navigation\n';
    code += '            logging.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ {next_node_id}")\n';
  }
  code += '        except Exception as e:\n';
  code += '            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É {next_node_id}: {e}")\n';
  code += '\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (conditional_variableName_value)
  code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å–ª–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫\n';
  code += '@dp.callback_query(lambda c: c.data.startswith("conditional_"))\n';
  code += 'async def handle_conditional_button(callback_query: types.CallbackQuery):\n';
  code += '    await callback_query.answer()\n';
  code += '    \n';
  code += '    # –ü–∞—Ä—Å–∏–º callback_data: conditional_variableName_value\n';
  code += '    callback_parts = callback_query.data.split("_", 2)\n';
  code += '    if len(callback_parts) >= 3:\n';
  code += '        variable_name = callback_parts[1]\n';
  code += '        variable_value = callback_parts[2]\n';
  code += '        \n';
  code += '        user_id = callback_query.from_user.id\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '        await update_user_data_in_db(user_id, variable_name, variable_value)\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n';
  code += '        if user_id not in user_data:\n';
  code += '            user_data[user_id] = {}\n';
  code += '        user_data[user_id][variable_name] = variable_value\n';
  code += '        \n';
  code += '        logging.info(f"–£—Å–ª–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {variable_name} = {variable_value} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")\n';
  code += '        \n';
  code += '        # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å\n';
  code += '        await callback_query.answer(f"‚úÖ {variable_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")\n';
  code += '        \n';
  code += '        # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—å\n';
  code += '        class FakeMessage:\n';
  code += '            def __init__(self, callback_query):\n';
  code += '                self.from_user = callback_query.from_user\n';
  code += '                self.chat = callback_query.message.chat\n';
  code += '                self.date = callback_query.message.date\n';
  code += '                self.message_id = callback_query.message.message_id\n';
  code += '            \n';
  code += '            async def answer(self, text, parse_mode=None, reply_markup=None):\n';
  code += '                if reply_markup:\n';
  code += '                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode, reply_markup=reply_markup)\n';
  code += '                else:\n';
  code += '                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode)\n';
  code += '            \n';
  code += '            async def edit_text(self, text, parse_mode=None, reply_markup=None):\n';
  code += '                try:\n';
  code += '                    await bot.edit_message_text(text, self.chat.id, self.message_id, parse_mode=parse_mode, reply_markup=reply_markup)\n';
  code += '                except Exception:\n';
  code += '                    await self.answer(text, parse_mode, reply_markup)\n';
  code += '        \n';
  code += '        fake_message = FakeMessage(callback_query)\n';
  code += '        \n';
  code += '        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è\n';
  code += '        try:\n';
  code += '            await profile_handler(fake_message)\n';
  code += '        except Exception as e:\n';
  code += '            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ profile_handler: {e}")\n';
  code += '            await callback_query.message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ {variable_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {variable_value}")\n';
  code += '    else:\n';
  code += '        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—Å–ª–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏: {callback_query.data}")\n';
  code += '        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏", show_alert=True)\n';
  code += '\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ (—Ç–∏–ø–∞ cmd_start) —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const commandButtons = new Set<string>();
  console.log('üîç –ù–ê–ß–ò–ù–ê–ï–ú –°–ë–û–† –ö–ù–û–ü–û–ö –ö–û–ú–ê–ù–î –∏–∑', nodes.length, '—É–∑–ª–æ–≤');
  
  nodes.forEach(node => {
    console.log(`üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–µ–ª ${node.id} (—Ç–∏–ø: ${node.type})`);
    
    // –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–∑–ª–∞
    if (node.data.buttons) {
      console.log(`üìã –£–∑–µ–ª ${node.id} –∏–º–µ–µ—Ç ${node.data.buttons.length} –∫–Ω–æ–ø–æ–∫`);
      node.data.buttons.forEach((button: any, index: number) => {
        console.log(`  üîò –ö–Ω–æ–ø–∫–∞ ${index}: "${button.text}" (action: ${button.action}, target: ${button.target})`);
        if (button.action === 'command' && button.target) {
          const commandCallback = `cmd_${button.target.replace('/', '')}`;
          console.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê –∫–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${button.text} -> ${button.target} -> ${commandCallback} –≤ —É–∑–ª–µ ${node.id}`);
          commandButtons.add(commandCallback);
        }
      });
    } else {
      console.log(`‚ùå –£–∑–µ–ª ${node.id} –Ω–µ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–æ–∫`);
    }
    
    // –ö–Ω–æ–ø–∫–∏ –≤ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if (node.data.conditionalMessages) {
      console.log(`üì® –£–∑–µ–ª ${node.id} –∏–º–µ–µ—Ç ${node.data.conditionalMessages.length} —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
      node.data.conditionalMessages.forEach((condition: any) => {
        if (condition.buttons) {
          condition.buttons.forEach((button: any) => {
            console.log(`  üîò –£—Å–ª–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞: "${button.text}" (action: ${button.action}, target: ${button.target})`);
            if (button.action === 'command' && button.target) {
              const commandCallback = `cmd_${button.target.replace('/', '')}`;
              console.log(`‚úÖ –ù–ê–ô–î–ï–ù–ê –∫–Ω–æ–ø–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ —É—Å–ª–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ${button.text} -> ${button.target} -> ${commandCallback} –≤ —É–∑–ª–µ ${node.id}`);
              commandButtons.add(commandCallback);
            }
          });
        }
      });
    }
  });
  
  console.log(`üéØ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥: ${commandButtons.size}`);
  console.log('üìù –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥:', Array.from(commandButtons));
  
  if (commandButtons.size > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥\n';
    code += `# –ù–∞–π–¥–µ–Ω–æ ${commandButtons.size} –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥: ${Array.from(commandButtons).join(', ')}\n`;
    
    commandButtons.forEach(commandCallback => {
      const command = commandCallback.replace('cmd_', '');
      code += `\n@dp.callback_query(lambda c: c.data == "${commandCallback}")\n`;
      code += `async def handle_${commandCallback}(callback_query: types.CallbackQuery):\n`;
      code += '    await callback_query.answer()\n';
      code += `    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${commandCallback} -> /${command} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id})")\n`;
      code += `    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /${command}\n`;
      code += '    \n';
      code += '    # –°–æ–∑–¥–∞–µ–º fake message object –¥–ª—è –∫–æ–º–∞–Ω–¥—ã\n';
      code += '    from types import SimpleNamespace\n';
      code += '    fake_message = SimpleNamespace()\n';
      code += '    fake_message.from_user = callback_query.from_user\n';
      code += '    fake_message.chat = callback_query.message.chat\n';
      code += '    fake_message.date = callback_query.message.date\n';
      code += '    fake_message.answer = callback_query.message.answer\n';
      code += '    fake_message.edit_text = callback_query.message.edit_text\n';
      code += '    \n';
      
      // –ù–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
      const commandNode = nodes.find(n => n.data.command === `/${command}` || n.data.command === command);
      if (commandNode) {
        if (commandNode.type === 'start') {
          code += '    # –í—ã–∑—ã–≤–∞–µ–º start handler —á–µ—Ä–µ–∑ edit_text\n';
          code += '    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è\n';
          code += '    class FakeMessageEdit:\n';
          code += '        def __init__(self, callback_query):\n';
          code += '            self.from_user = callback_query.from_user\n';
          code += '            self.chat = callback_query.message.chat\n';
          code += '            self.date = callback_query.message.date\n';
          code += '            self.message_id = callback_query.message.message_id\n';
          code += '            self._callback_query = callback_query\n';
          code += '        \n';
          code += '        async def answer(self, text, parse_mode=None, reply_markup=None):\n';
          code += '            await self._callback_query.message.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)\n';
          code += '        \n';
          code += '        async def edit_text(self, text, parse_mode=None, reply_markup=None):\n';
          code += '            await self._callback_query.message.edit_text(text, parse_mode=parse_mode, reply_markup=reply_markup)\n';
          code += '    \n';
          code += '    fake_edit_message = FakeMessageEdit(callback_query)\n';
          code += '    await start_handler(fake_edit_message)\n';
        } else if (commandNode.type === 'command') {
          code += `    # –í—ã–∑—ã–≤–∞–µ–º ${command} handler\n`;
          code += `    await ${command}_handler(fake_message)\n`;
        }
      } else {
        code += `    await callback_query.message.edit_text("–ö–æ–º–∞–Ω–¥–∞ /${command} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")\n`;
      }
      code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /${command} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id})")\n`;
    });
  }

  // –£–î–ê–õ–ï–ù —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π profile_handler - –æ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —É–∑–ª–∞
  code += '\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø
  if (groups && groups.length > 0) {
    code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏\n';
    code += '@dp.message(F.chat.type.in_(["group", "supergroup"]))\n';
    code += 'async def handle_group_message(message: types.Message):\n';
    code += '    """\n';
    code += '    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö\n';
    code += '    """\n';
    code += '    chat_id = message.chat.id\n';
    code += '    user_id = message.from_user.id\n';
    code += '    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"\n';
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π\n';
    code += '    group_name = None\n';
    code += '    for name, config in CONNECTED_GROUPS.items():\n';
    code += '        if config.get("id") and str(config["id"]) == str(chat_id):\n';
    code += '            group_name = name\n';
    code += '            break\n';
    code += '    \n';
    code += '    if group_name:\n';
    code += '        logging.info(f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ {group_name}: {message.text[:50]}... –æ—Ç @{username}")\n';
    code += '        \n';
    code += '        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
    code += '        # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–¥–µ—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç.–¥.\n';
    code += '        \n';
    code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n';
    code += '        try:\n';
    code += '            await save_group_message_stats(chat_id, user_id, message.text)\n';
    code += '        except Exception as e:\n';
    code += '            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {e}")\n';
    code += '    \n';
    code += '# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n';
    code += 'async def save_group_message_stats(chat_id: int, user_id: int, message_text: str):\n';
    code += '    """\n';
    code += '    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ\n';
    code += '    """\n';
    code += '    if db_pool:\n';
    code += '        try:\n';
    code += '            async with db_pool.acquire() as conn:\n';
    code += '                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –ë–î\n';
    code += '                await conn.execute(\n';
    code += '                    """\n';
    code += '                    INSERT INTO group_activity (chat_id, user_id, message_length, created_at) \n';
    code += '                    VALUES ($1, $2, $3, $4)\n';
    code += '                    ON CONFLICT DO NOTHING\n';
    code += '                    """,\n';
    code += '                    chat_id, user_id, len(message_text or ""), get_moscow_time()\n';
    code += '                )\n';
    code += '        except Exception as e:\n';
    code += '            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã: {e}")\n';
    code += '    \n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n';
    code += '@dp.message(F.new_chat_members)\n';
    code += 'async def handle_new_member(message: types.Message):\n';
    code += '    """\n';
    code += '    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\n';
    code += '    """\n';
    code += '    chat_id = message.chat.id\n';
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π\n';
    code += '    group_name = None\n';
    code += '    for name, config in CONNECTED_GROUPS.items():\n';
    code += '        if config.get("id") and str(config["id"]) == str(chat_id):\n';
    code += '            group_name = name\n';
    code += '            break\n';
    code += '    \n';
    code += '    if group_name:\n';
    code += '        for new_member in message.new_chat_members:\n';
    code += '            username = new_member.username or new_member.first_name or "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"\n';
    code += '            logging.info(f"üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –≥—Ä—É–ø–ø–µ {group_name}: @{username}")\n';
    code += '            \n';
    code += '            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n';
    code += '            # await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É, @{username}!")\n';
    code += '    \n';
  }
  
  code += '\n\n# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n';
  code += 'async def main():\n';
  code += '    global db_pool\n';
  code += '    try:\n';
  code += '        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '        await init_database()\n';
  if (menuCommands.length > 0) {
    code += '        await set_bot_commands()\n';
  }
  code += '        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")\n';
  code += '        await dp.start_polling(bot)\n';
  code += '    except KeyboardInterrupt:\n';
  code += '        print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")\n';
  code += '    except Exception as e:\n';
  code += '        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")\n';
  code += '    finally:\n';
  code += '        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n';
  code += '        if db_pool:\n';
  code += '            await db_pool.close()\n';
  code += '            print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")\n';
  code += '        \n';
  code += '        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞\n';
  code += '        await bot.session.close()\n';
  code += '        print("üîå –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")\n';
  code += '        print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")\n\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  code += '\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
  
  // –ù–∞–π–¥–µ–º —É–∑–ª—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
  const multiSelectNodes = (nodes || []).filter(node => 
    node.data.allowMultipleSelection
  );
  console.log(`üîç –ì–ï–ù–ï–†–ê–¢–û–†: –ù–∞–π–¥–µ–Ω–æ ${multiSelectNodes.length} —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º:`, multiSelectNodes.map(n => n.id));
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  code += '@dp.callback_query(lambda c: c.data.startswith("ms_") or c.data.startswith("multi_select_"))\n';
  code += 'async def handle_multi_select_callback(callback_query: types.CallbackQuery):\n';
  code += '    await callback_query.answer()\n';
  code += '    user_id = callback_query.from_user.id\n';
  code += '    callback_data = callback_query.data\n';
  code += '    \n';
  code += '    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"\n';
  code += '    if callback_data.startswith("done_"):\n';
  code += '        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)\n';
  code += '        logging.info(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ: {callback_data}")\n';
  code += '        short_node_id = callback_data.replace("done_", "")\n';
  code += '        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π node_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Å—É—Ñ—Ñ–∏–∫—Å—É\n';
  code += '        node_id = None\n';
  multiSelectNodes.forEach(node => {
    const shortNodeId = node.id.slice(-10).replace(/^_+/, '');
    code += `        if short_node_id == "${shortNodeId}":\n`;
    code += `            node_id = "${node.id}"\n`;
    code += `            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª: ${node.id}")\n`;
  });
  code += '    elif callback_data.startswith("multi_select_done_"):\n';
  code += '        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)\n';
  code += '        node_id = callback_data.replace("multi_select_done_", "")\n';
  code += '        selected_options = user_data.get(user_id, {}).get(f"multi_select_{node_id}", [])\n';
  code += '        \n';
  code += '        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '        if selected_options:\n';
  code += '            selected_text = ", ".join(selected_options)\n';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ —Å –µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  multiSelectNodes.forEach(node => {
    const variableName = node.data.multiSelectVariable || `multi_select_${node.id}`;
    code += `            if node_id == "${node.id}":\n`;
    code += `                await save_user_data_to_db(user_id, "${variableName}", selected_text)\n`;
  });
  
  code += '            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n';
  code += '            if not any(node_id == node for node in [' + multiSelectNodes.map(n => `"${n.id}"`).join(', ') + ']):\n';
  code += '                await save_user_data_to_db(user_id, f"multi_select_{node_id}", selected_text)\n';
  code += '        \n';
  code += '        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
  code += '        if user_id in user_data:\n';
  code += '            user_data[user_id].pop(f"multi_select_{node_id}", None)\n';
  code += '            user_data[user_id].pop("multi_select_node", None)\n';
  code += '        \n';
  code += '        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω\n';
  
  // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
  
  if (multiSelectNodes.length > 0) {
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${multiSelectNodes.length} —É–∑–ª–æ–≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`);
    code += '        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ node_id\n';
    multiSelectNodes.forEach(node => {
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ if –¥–ª—è —É–∑–ª–∞ ${node.id}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: continueButtonTarget: ${node.data.continueButtonTarget}`);
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ —É–∑–ª–∞: ${connections.filter(conn => conn.source === node.id).map(c => c.target).join(', ')}`);
      
      code += `        if node_id == "${node.id}":\n`;
      
      let hasContent = false;
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º continueButtonTarget
      if (node.data.continueButtonTarget) {
        const targetNode = nodes.find(n => n.id === node.data.continueButtonTarget);
        if (targetNode) {
          console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª ${targetNode.id} —á–µ—Ä–µ–∑ continueButtonTarget`);
          console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –¢–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞: ${targetNode.type}`);
          code += `            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id}\n`;
          code += `            logging.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É ${targetNode.id} (—Ç–∏–ø: ${targetNode.type})")\n`;
          if (targetNode.type === 'message' || targetNode.type === 'keyboard') {
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            const messageText = targetNode.data.messageText || "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...";
            const formattedText = formatTextForPython(messageText);
            code += `            # –ù–ï –í–´–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!\n`;
            code += `            text = ${formattedText}\n`;
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
            if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ ${targetNode.id}`);
              code += `            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n`;
              code += `            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n`;
              code += `            user_vars = await get_user_from_db(user_id)\n`;
              code += `            if not user_vars:\n`;
              code += `                user_vars = user_data.get(user_id, {})\n`;
              code += `            if not isinstance(user_vars, dict):\n`;
              code += `                user_vars = {}\n`;
              code += generateInlineKeyboardCode(targetNode.data.buttons, '            ', targetNode.id, targetNode.data, allNodeIds);
              code += `            await callback_query.message.answer(text, reply_markup=keyboard)\n`;
            } else {
              code += `            await callback_query.message.answer(text)\n`;
            }
            code += `            return\n`;
            hasContent = true;
          } else if (targetNode.type === 'command') {
            const safeCommandName = targetNode.data.command?.replace(/[^a-zA-Z0-9_]/g, '_') || 'unknown';
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ handle_command_${safeCommandName}`);
            code += `            await handle_command_${safeCommandName}(callback_query.message)\n`;
            hasContent = true;
          } else if (targetNode.type === 'start') {
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã`);
            code += `            # –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n`;
            code += `            await handle_command_start(callback_query.message)\n`;
            code += `            return\n`;
            hasContent = true;
          } else {
            console.log(`‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¢–û–†: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞ ${targetNode.type}, –¥–æ–±–∞–≤–ª—è–µ–º pass`);
            code += `            logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–∑–ª–∞: ${targetNode.type}")\n`;
            code += `            pass\n`;
            hasContent = true;
          }
        } else {
          console.log(`‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¢–û–†: –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è continueButtonTarget: ${node.data.continueButtonTarget}`);
          // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞
          code += `            # –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä\n`;
          code += `            logging.warning(f"‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${node.data.continueButtonTarget}")\n`;
          code += `            await callback_query.message.edit_text("‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")\n`;
          hasContent = true;
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç continueButtonTarget, –∏—â–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const nodeConnections = connections.filter(conn => conn.source === node.id);
        if (nodeConnections.length > 0) {
          const targetNode = nodes.find(n => n.id === nodeConnections[0].target);
          if (targetNode) {
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π —É–∑–µ–ª ${targetNode.id} —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`);
            code += `            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${targetNode.id} —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n`;
            if (targetNode.type === 'message' || targetNode.type === 'keyboard') {
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`);
              const messageText = targetNode.data.messageText || "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...";
              const formattedText = formatTextForPython(messageText);
              code += `            # –ù–ï –í–´–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!\n`;
              code += `            text = ${formattedText}\n`;
              
              // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞
              if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
                console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${targetNode.id}`);
                code += `            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n`;
                code += `            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n`;
                code += `            user_vars = await get_user_from_db(user_id)\n`;
                code += `            if not user_vars:\n`;
                code += `                user_vars = user_data.get(user_id, {})\n`;
                code += `            if not isinstance(user_vars, dict):\n`;
                code += `                user_vars = {}\n`;
                code += generateInlineKeyboardCode(targetNode.data.buttons, '            ', targetNode.id, targetNode.data, allNodeIds);
                code += `            await callback_query.message.answer(text, reply_markup=keyboard)\n`;
              } else {
                code += `            await callback_query.message.answer(text)\n`;
              }
              code += `            return\n`;
            } else if (targetNode.type === 'command') {
              const safeCommandName = targetNode.data.command?.replace(/[^a-zA-Z0-9_]/g, '_') || 'unknown';
              code += `            await handle_command_${safeCommandName}(callback_query.message)\n`;
            }
            hasContent = true;
          }
        }
      }
      
      // –ï—Å–ª–∏ –±–ª–æ–∫ if –æ—Å—Ç–∞–ª—Å—è –ø—É—Å—Ç—ã–º, –¥–æ–±–∞–≤–ª—è–µ–º return
      if (!hasContent) {
        console.log(`‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¢–û–†: –ë–ª–æ–∫ if –¥–ª—è —É–∑–ª–∞ ${node.id} –æ—Å—Ç–∞–ª—Å—è –ø—É—Å—Ç—ã–º, –¥–æ–±–∞–≤–ª—è–µ–º return`);
        code += `            return\n`;
      } else {
        console.log(`‚úÖ –ì–ï–ù–ï–†–ê–¢–û–†: –ë–ª–æ–∫ if –¥–ª—è —É–∑–ª–∞ ${node.id} –∑–∞–ø–æ–ª–Ω–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º`);
      }
    });
  }
  
  code += '        return\n';
  code += '    \n';
  code += '    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏\n';
  code += '    logging.info(f"üì± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data: {callback_data}")\n';
  code += '    \n';
  code += '    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç ms_ –∏ —Å—Ç–∞—Ä—ã–π multi_select_\n';
  code += '    if callback_data.startswith("ms_"):\n';
  code += '        # –ù–æ–≤—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: ms_shortNodeId_shortTarget\n';
  code += '        parts = callback_data.split("_")\n';
  code += '        if len(parts) >= 3:\n';
  code += '            short_node_id = parts[1]\n';
  code += '            button_id = "_".join(parts[2:])\n';
  code += '            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π node_id –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Å—É—Ñ—Ñ–∏–∫—Å—É\n';
  code += '            node_id = None\n';
  code += '            logging.info(f"üîç –ò—â–µ–º —É–∑–µ–ª –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID: {short_node_id}")\n';
  code += '            \n';
  code += '            # –î–ª—è —Å—Ç–∞–Ω—Ü–∏–π –º–µ—Ç—Ä–æ –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É ID\n';
  code += '            if short_node_id == "stations":\n';
  code += '                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª —Å—Ç–∞–Ω—Ü–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏\n';
  
  let hasStationsCode = false;
  multiSelectNodes.forEach(node => {
    const shortNodeId = generateUniqueShortId(node.id, allNodeIds);
    if (shortNodeId === 'stations') {
      const selectionButtons = node.data.buttons?.filter(btn => btn.action === 'selection') || [];
      code += `                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∑–µ–ª ${node.id}\n`;
      selectionButtons.forEach(button => {
        const buttonValue = button.target || button.id || button.text;
        code += `                if button_id == "${buttonValue}":\n`;
        code += `                    node_id = "${node.id}"\n`;
        code += `                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —É–∑–µ–ª –ø–æ –∫–Ω–æ–ø–∫–µ: {node_id}")\n`;
        hasStationsCode = true;
      });
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º pass –µ—Å–ª–∏ –≤ if –±–ª–æ–∫–µ –Ω–µ—Ç –∫–æ–¥–∞
  if (!hasStationsCode) {
    code += '                pass\n';
  }
  
  code += '            else:\n';
  code += '                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —É–∑–ª–æ–≤\n';
  
  let hasElseCode = false;
  multiSelectNodes.forEach(node => {
    const shortNodeId = generateUniqueShortId(node.id, allNodeIds);
    if (shortNodeId !== 'stations') {
      code += `                if short_node_id == "${shortNodeId}":\n`;
      code += `                    node_id = "${node.id}"\n`;
      code += `                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —É–∑–µ–ª: {node_id}")\n`;
      hasElseCode = true;
    }
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º pass –µ—Å–ª–∏ –≤ else –±–ª–æ–∫–µ –Ω–µ—Ç –∫–æ–¥–∞
  if (!hasElseCode) {
    code += '                pass\n';
  }
  code += '    elif callback_data.startswith("multi_select_"):\n';
  code += '        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n';
  code += '        parts = callback_data.split("_")\n';
  code += '        if len(parts) >= 3:\n';
  code += '            node_id = parts[2]\n';
  code += '            button_id = "_".join(parts[3:]) if len(parts) > 3 else parts[2]\n';
  code += '    else:\n';
  code += '        logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")\n';
  code += '        return\n';
  code += '    \n';
  code += '    if not node_id:\n';
  code += '        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ node_id –¥–ª—è callback_data: {callback_data}")\n';
  code += '        return\n';
  code += '    \n';
  code += '    logging.info(f"üì± –û–ø—Ä–µ–¥–µ–ª–∏–ª–∏ node_id: {node_id}, button_id: {button_id}")\n';
  code += '    \n';
  code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∑ –ë–î\n';
  code += '    if user_id not in user_data:\n';
  code += '        user_data[user_id] = {}\n';
  code += '    \n';
  code += '    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n';
  code += '    if f"multi_select_{node_id}" not in user_data[user_id]:\n';
  code += '        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã\n';
  code += '        user_vars = await get_user_from_db(user_id)\n';
  code += '        saved_selections = []\n';
  code += '        \n';
  code += '        if user_vars:\n';
  code += '            # –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏\n';
  code += '            for var_name, var_data in user_vars.items():\n';
  code += '                if "–∏–Ω—Ç–µ—Ä–µ—Å" in var_name.lower() or var_name == "interests" or var_name.startswith("multi_select_"):\n';
  code += '                    if isinstance(var_data, dict) and "value" in var_data:\n';
  code += '                        saved_str = var_data["value"]\n';
  code += '                    elif isinstance(var_data, str):\n';
  code += '                        saved_str = var_data\n';
  code += '                    else:\n';
  code += '                        saved_str = str(var_data) if var_data else ""\n';
  code += '                    \n';
  code += '                    if saved_str:\n';
  code += '                        saved_selections = [item.strip() for item in saved_str.split(",")]\n';
  code += '                        break\n';
  code += '        \n';
  code += '        user_data[user_id][f"multi_select_{node_id}"] = saved_selections\n';
  code += '    \n';
  code += '    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ button_id\n';
  code += '    button_text = None\n';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
  multiSelectNodes.forEach(node => {
    const selectionButtons = node.data.buttons?.filter(btn => btn.action === 'selection') || [];
    if (selectionButtons.length > 0) {
      code += `    if node_id == "${node.id}":\n`;
      selectionButtons.forEach(button => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º target –∏–ª–∏ id –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞, –∫–∞–∫ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        const buttonValue = button.target || button.id || button.text;
        code += `        if button_id == "${buttonValue}":\n`;
        code += `            button_text = "${button.text}"\n`;
      });
    }
  });
  
  code += '    \n';
  code += '    if button_text:\n';
  code += '        logging.info(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É: {button_text}")\n';
  code += '        selected_list = user_data[user_id][f"multi_select_{node_id}"]\n';
  code += '        if button_text in selected_list:\n';
  code += '            # –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö\n';
  code += '            selected_list.remove(button_text)\n';
  code += '            logging.info(f"‚ûñ –£–±—Ä–∞–ª–∏ –≤—ã–±–æ—Ä: {button_text}")\n';
  code += '        else:\n';
  code += '            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º\n';
  code += '            selected_list.append(button_text)\n';
  code += '            logging.info(f"‚ûï –î–æ–±–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä: {button_text}")\n';
  code += '        \n';
  code += '        logging.info(f"üìã –¢–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã: {selected_list}")\n';
  code += '        \n';
  code += '        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–∞–ª–æ—á–∫–∞–º–∏\n';
  code += '        builder = InlineKeyboardBuilder()\n';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
  multiSelectNodes.forEach(node => {
    const selectionButtons = node.data.buttons?.filter(btn => btn.action === 'selection') || [];
    const regularButtons = node.data.buttons?.filter(btn => btn.action !== 'selection') || [];
    
    if (selectionButtons.length > 0) {
      code += `        if node_id == "${node.id}":\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –î–æ–±–∞–≤–ª—è–µ–º ${selectionButtons.length} –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–∑–ª–∞ ${node.id}`);
      selectionButtons.forEach((button, index) => {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç callback_data –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫
        const shortNodeId = generateUniqueShortId(node.id, allNodeIds || []);
        const shortTarget = button.target || button.id || 'btn';
        const callbackData = `ms_${shortNodeId}_${shortTarget}`;
        console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û! –ö–Ω–æ–ø–∫–∞ ${index + 1}: "${button.text}" -> callback_data: ${callbackData}`);
        code += `            selected_mark = "‚úÖ " if "${button.text}" in selected_list else ""\n`;
        code += `            builder.add(InlineKeyboardButton(text=f"{selected_mark}${button.text}", callback_data="${callbackData}"))\n`;
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      regularButtons.forEach(button => {
        if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `            builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        } else if (button.action === 'url') {
          code += `            builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'command') {
          const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
          code += `            builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è  
      const continueText = node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
      const doneCallbackData = `multi_select_done_${node.id}`;
      console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è "${continueText}" —Å callback_data: ${doneCallbackData}`);
      code += `            builder.add(InlineKeyboardButton(text="${continueText}", callback_data="${doneCallbackData}"))\n`;
      code += `            logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ü—Ä–∏–º–µ–Ω—è–µ–º adjust(2) –¥–ª—è —É–∑–ª–∞ ${node.id} (multi-select)")\n`;
      code += `            builder.adjust(2)\n`;
    }
  });
  
  code += '        \n';
  code += '        keyboard = builder.as_markup()\n';
  code += '        logging.info(f"üîÑ –û–ë–ù–û–í–õ–Ø–ï–ú –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∑–ª–∞ {node_id} —Å –≥–∞–ª–æ—á–∫–∞–º–∏")\n';
  code += '        await callback_query.message.edit_reply_markup(reply_markup=keyboard)\n';
  code += '\n';
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ì–æ—Ç–æ–≤–æ" –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - –¥–æ–±–∞–≤–ª–µ–Ω return –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–ë–†–ê–ù–´ –í–°–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –í–´–ó–û–í–´ handle_callback_* –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –¢–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –ì–æ—Ç–æ–≤–æ - —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ return`);
  console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º: ${multiSelectNodes.length}`);
  multiSelectNodes.forEach((node, index) => {
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –£–∑–µ–ª ${index + 1}: ${node.id}, continueButtonTarget: ${node.data.continueButtonTarget}`);
    const targetNode = nodes.find(n => n.id === node.data.continueButtonTarget);
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–∞–π–¥–µ–Ω: ${!!targetNode}, —Ç–∏–ø: ${targetNode?.type}, allowMultipleSelection: ${targetNode?.data?.allowMultipleSelection}`);
    console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –∫–Ω–æ–ø–∫–∏: ${targetNode?.data?.buttons?.length || 0}, keyboardType: ${targetNode?.data?.keyboardType}`);
  });
  
  code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
  code += '@dp.callback_query(lambda callback_query: callback_query.data and callback_query.data.startswith("multi_select_done_"))\n';
  code += 'async def handle_multi_select_done(callback_query: types.CallbackQuery):\n';
  code += '    logging.info(f"üèÅ –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–¢–û–í–û –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! callback_data: {callback_query.data}")\n';
  code += '    await callback_query.answer()\n';
  code += '    user_id = callback_query.from_user.id\n';
  code += '    callback_data = callback_query.data\n';
  code += '    \n';
  code += '    logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞: {callback_data}")\n';
  code += '    logging.info(f"üîç –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {callback_query.message.message_id}")\n';
  code += '    logging.info(f"üîç –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {callback_query.message.text}")\n';
  code += '    logging.info(f"üîç –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ï—Å—Ç—å –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {bool(callback_query.message.reply_markup)}")\n';
  code += '    \n';
  code += '    # –ò–∑–≤–ª–µ–∫–∞–µ–º node_id –∏–∑ callback_data\n';
  code += '    node_id = callback_data.replace("multi_select_done_", "")\n';
  code += '    logging.info(f"üéØ Node ID –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {node_id}")\n';
  code += '    \n';
  
  multiSelectNodes.forEach(node => {
    const variableName = node.data.multiSelectVariable || `multi_select_${node.id}`;
    const continueButtonTarget = node.data.continueButtonTarget;
    
    code += `    if node_id == "${node.id}":\n`;
    code += `        logging.info(f"üîç –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–ª—è —É–∑–ª–∞ ${node.id}")\n`;
    code += `        logging.info(f"üîç –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: continueButtonTarget = ${continueButtonTarget || '–ù–ï–¢'}")\n`;
    code += `        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
    code += `        selected_options = user_data.get(user_id, {}).get("multi_select_${node.id}", [])\n`;
    code += `        logging.info(f"üìã –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è ${node.id}: {selected_options}")\n`;
    code += `        \n`;
    code += `        if selected_options:\n`;
    code += `            selected_text = ", ".join(selected_options)\n`;
    code += `            await save_user_data_to_db(user_id, "${variableName}", selected_text)\n`;
    code += `            logging.info(f"üíæ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ –ë–î: ${variableName} = {selected_text}")\n`;
    code += `        else:\n`;
    code += `            logging.info(f"‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")\n`;
    code += `        \n`;
    
    if (continueButtonTarget) {
      const targetNode = nodes.find(n => n.id === continueButtonTarget);
      if (targetNode) {
        code += `        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É: ${continueButtonTarget}\n`;
        const safeFunctionName = continueButtonTarget.replace(/[^a-zA-Z0-9_]/g, '_');
        code += `        logging.info(f"üöÄ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–∑–ª—É '${continueButtonTarget}'")\n`;
        code += `        logging.info(f"üöÄ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –¢–∏–ø —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞: ${targetNode?.type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")\n`;
        code += `        logging.info(f"üöÄ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: allowMultipleSelection: ${targetNode?.data?.allowMultipleSelection || false}")\n`;
        code += `        logging.info(f"üöÄ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ï—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏: ${targetNode?.data?.buttons?.length || 0}")\n`;
        code += `        logging.info(f"üöÄ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: keyboardType: ${targetNode?.data?.keyboardType || '–Ω–µ—Ç'}")\n`;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–∑–ª–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
        if (targetNode.data.allowMultipleSelection || targetNode.data.multiSelectEnabled) {
          code += `        # –£–∑–µ–ª ${continueButtonTarget} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n`;
          code += `        logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —É–∑–ª–∞ ${targetNode.id}")\n`;
          code += `        if user_id not in user_data:\n`;
          code += `            user_data[user_id] = {}\n`;
          code += `        user_data[user_id]["multi_select_${targetNode.id}"] = []\n`;
          code += `        user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
          code += `        user_data[user_id]["multi_select_type"] = "inline"\n`;
          code += `        logging.info(f"üîß –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}")\n`;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï –í–´–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–∞–º –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if (targetNode.type === 'message' || targetNode.type === 'keyboard') {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
          const messageText = targetNode.data.messageText || "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:";
          const formattedText = formatTextForPython(messageText);
          
          code += `        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞\n`;
          code += `        text = ${formattedText}\n`;
          code += `        \n`;
          code += `        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞\n`;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞
          if (targetNode.data.allowMultipleSelection && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            const multiSelectVariable = targetNode.data.multiSelectVariable || 'user_interests';
            
            code += `        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n`;
            code += `        if user_id not in user_data:\n`;
            code += `            user_data[user_id] = {}\n`;
            code += `        \n`;
            code += `        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –ë–î\n`;
            code += `        saved_selections = []\n`;
            code += `        user_record = await get_user_from_db(user_id)\n`;
            code += `        if user_record and isinstance(user_record, dict):\n`;
            code += `            user_data_field = user_record.get("user_data", {})\n`;
            code += `            if isinstance(user_data_field, str):\n`;
            code += `                import json\n`;
            code += `                try:\n`;
            code += `                    user_vars = json.loads(user_data_field)\n`;
            code += `                except:\n`;
            code += `                    user_vars = {}\n`;
            code += `            elif isinstance(user_data_field, dict):\n`;
            code += `                user_vars = user_data_field\n`;
            code += `            else:\n`;
            code += `                user_vars = {}\n`;
            code += `            \n`;
            code += `            if "${multiSelectVariable}" in user_vars:\n`;
            code += `                var_data = user_vars["${multiSelectVariable}"]\n`;
            code += `                if isinstance(var_data, str) and var_data.strip():\n`;
            code += `                    saved_selections = [sel.strip() for sel in var_data.split(",") if sel.strip()]\n`;
            code += `        \n`;
            code += `        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏\n`;
            code += `        user_data[user_id]["multi_select_${targetNode.id}"] = saved_selections.copy()\n`;
            code += `        user_data[user_id]["multi_select_node"] = "${targetNode.id}"\n`;
            code += `        user_data[user_id]["multi_select_type"] = "inline"\n`;
            code += `        user_data[user_id]["multi_select_variable"] = "${multiSelectVariable}"\n`;
            code += `        \n`;
            code += `        builder = InlineKeyboardBuilder()\n`;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            targetNode.data.buttons.forEach((button, index) => {
              if (button.action === 'selection') {
                const cleanText = button.text.replace(/"/g, '\\"');
                const callbackData = `ms_${generateUniqueShortId(targetNode.id, allNodeIds || [])}_${button.target || button.id || `btn${index}`}`.replace(/[^a-zA-Z0-9_]/g, '_');
                code += `        # –ö–Ω–æ–ø–∫–∞ —Å –≥–∞–ª–æ—á–∫–æ–π: ${cleanText}\n`;
                code += `        selected_mark = "‚úÖ " if "${cleanText}" in user_data[user_id]["multi_select_${targetNode.id}"] else ""\n`;
                code += `        button_text = f"{selected_mark}${cleanText}"\n`;
                code += `        builder.add(InlineKeyboardButton(text=button_text, callback_data="${callbackData}"))\n`;
              }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
            code += `        builder.add(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="multi_select_done_${targetNode.id}"))\n`;
            code += `        builder.adjust(2)\n`;
            code += `        keyboard = builder.as_markup()\n`;
            code += `        \n`;
            code += `        await callback_query.message.answer(text, reply_markup=keyboard)\n`;
            code += `        logging.info(f"üèÅ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ó–ê–í–ï–†–®–ê–ï–ú —Ñ—É–Ω–∫—Ü–∏—é")\n`;
            code += `        return\n`;
          } else {
            // –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
            code += `        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n`;
            if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
              console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ ${targetNode.id}`);
              code += `        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞\n`;
              code += `        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n`;
              code += `        user_vars = await get_user_from_db(user_id)\n`;
              code += `        if not user_vars:\n`;
              code += `            user_vars = user_data.get(user_id, {})\n`;
              code += `        if not isinstance(user_vars, dict):\n`;
              code += `            user_vars = {}\n`;
              code += `        \n`;
              code += generateInlineKeyboardCode(targetNode.data.buttons, '        ', targetNode.id, targetNode.data, allNodeIds);
              code += `        await callback_query.message.answer(text, reply_markup=keyboard)\n`;
              code += `        logging.info(f"üèÅ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –° –ö–õ–ê–í–ò–ê–¢–£–†–û–ô –¥–ª—è —É–∑–ª–∞ ${targetNode.id}")\n`;
            } else {
              code += `        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n`;
              code += `        await callback_query.message.answer(text)\n`;
              code += `        logging.info(f"üèÅ –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ë–ï–ó –ö–õ–ê–í–ò–ê–¢–£–†–´ –¥–ª—è —É–∑–ª–∞ ${targetNode.id}")\n`;
            }
            code += `        return\n`;
          }
        } else {
          // –£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          code += `        logging.info(f"‚ö†Ô∏è –ì–ï–ù–ï–†–ê–¢–û–† DEBUG: –¶–µ–ª–µ–≤–æ–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n`;
          code += `        await callback_query.message.answer("–ü–µ—Ä–µ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")\n`;
          code += `        return\n`;
        }
      }
    }
    
    code += `        return\n`;
    code += `    \n`;
  });
  
  code += '\n';
  

  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è reply –∫–Ω–æ–ø–æ–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è reply –∫–Ω–æ–ø–æ–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
  code += '@dp.message()\n';
  code += 'async def handle_multi_select_reply(message: types.Message):\n';
  code += '    user_id = message.from_user.id\n';
  code += '    user_input = message.text\n';
  code += '    \n';
  code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ reply\n';
  code += '    if user_id in user_data and "multi_select_node" in user_data[user_id] and user_data[user_id].get("multi_select_type") == "reply":\n';
  code += '        node_id = user_data[user_id]["multi_select_node"]\n';
  code += '        \n';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  multiSelectNodes.forEach(node => {
    const continueText = node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
    const variableName = node.data.multiSelectVariable || `multi_select_${node.id}`;
    code += `        if node_id == "${node.id}" and user_input == "${continueText}":\n`;
    code += `            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
    code += `            selected_options = user_data.get(user_id, {}).get("multi_select_{node_id}", [])\n`;
    code += `            if selected_options:\n`;
    code += `                selected_text = ", ".join(selected_options)\n`;
    code += `                await save_user_data_to_db(user_id, "${variableName}", selected_text)\n`;
    code += `            \n`;
    code += `            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n`;
    code += `            user_data[user_id].pop("multi_select_{node_id}", None)\n`;
    code += `            user_data[user_id].pop("multi_select_node", None)\n`;
    code += `            user_data[user_id].pop("multi_select_type", None)\n`;
    code += `            \n`;
    
    if (node.data.continueButtonTarget) {
      const targetNode = nodes.find(n => n.id === node.data.continueButtonTarget);
      if (targetNode) {
        code += `            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–∑–ª—É\n`;
        if (targetNode.type === 'message' || targetNode.type === 'keyboard') {
          console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ò–°–ü–†–ê–í–õ–ï–ù–û - –ù–ï –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ reply mode`);
          const messageText = targetNode.data.messageText || "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...";
          const formattedText = formatTextForPython(messageText);
          code += `            # –ù–ï –í–´–ó–´–í–ê–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò!\n`;
          code += `            text = ${formattedText}\n`;
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —É–∑–ª–∞ –≤ reply mode
          if (targetNode.data.keyboardType === "inline" && targetNode.data.buttons && targetNode.data.buttons.length > 0) {
            console.log(`üîß –ì–ï–ù–ï–†–ê–¢–û–†: –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï! –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply mode ${targetNode.id}`);
            code += `            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è reply mode\n`;
            code += `            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n`;
            code += `            user_vars = await get_user_from_db(user_id)\n`;
            code += `            if not user_vars:\n`;
            code += `                user_vars = user_data.get(user_id, {})\n`;
            code += `            if not isinstance(user_vars, dict):\n`;
            code += `                user_vars = {}\n`;
            code += generateInlineKeyboardCode(targetNode.data.buttons, '            ', targetNode.id, targetNode.data, allNodeIds);
            code += `            await message.answer(text, reply_markup=keyboard)\n`;
          } else {
            code += `            await message.answer(text)\n`;
          };
        } else if (targetNode.type === 'command') {
          const safeCommandName = targetNode.data.command?.replace(/[^a-zA-Z0-9_]/g, '_') || 'unknown';
          code += `            await handle_command_${safeCommandName}(message)\n`;
        }
      }
    }
    code += `            return\n`;
    code += `        \n`;
  });
  
  code += '        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–∏\n';
  multiSelectNodes.forEach(node => {
    const selectionButtons = node.data.buttons?.filter(btn => btn.action === 'selection') || [];
    
    if (selectionButtons.length > 0) {
      code += `        if node_id == "${node.id}":\n`;
      selectionButtons.forEach(button => {
        code += `            if user_input == "${button.text}":\n`;
        code += `                if "multi_select_{node_id}" not in user_data[user_id]:\n`;
        code += `                    user_data[user_id]["multi_select_{node_id}"] = []\n`;
        code += `                \n`;
        code += `                selected_list = user_data[user_id]["multi_select_{node_id}"]\n`;
        code += `                if "${button.text}" in selected_list:\n`;
        code += `                    selected_list.remove("${button.text}")\n`;
        code += `                    await message.answer("‚ùå –£–±—Ä–∞–Ω–æ: ${button.text}")\n`;
        code += `                else:\n`;
        code += `                    selected_list.append("${button.text}")\n`;
        code += `                    await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω–æ: ${button.text}")\n`;
        code += `                return\n`;
        code += `            \n`;
      });
    }
  });
  
  code += '    \n';
  code += '    # –ï—Å–ª–∏ –Ω–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤\n';
  code += '    pass\n';
  code += '\n';

  code += 'if __name__ == "__main__":\n';
  code += '    asyncio.run(main())\n';

  return code;
}

function generateStartHandler(node: Node): string {
  let code = '\n@dp.message(CommandStart())\n';
  code += 'async def start_handler(message: types.Message):\n';

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (node.data.isPrivateOnly) {
    code += '    if not await is_private_chat(message):\n';
    code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
    code += '        return\n';
  }

  if (node.data.adminOnly) {
    code += '    if not await is_admin(message.from_user.id):\n';
    code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
    code += '        return\n';
  }

  if (node.data.requiresAuth) {
    code += '    if not await check_auth(message.from_user.id):\n';
    code += '        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
    code += '        return\n';
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  code += '\n    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ\n';
  code += '    user_id = message.from_user.id\n';
  code += '    username = message.from_user.username\n';
  code += '    first_name = message.from_user.first_name\n';
  code += '    last_name = message.from_user.last_name\n';
  code += '    \n';
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)\n';
  code += '    \n';
  code += '    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n';
  code += '    if not saved_to_db:\n';
  code += '        user_data[user_id] = {\n';
  code += '            "username": username,\n';
  code += '            "first_name": first_name,\n';
  code += '            "last_name": last_name,\n';
  code += '            "registered_at": message.date\n';
  code += '        }\n';
  code += '        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")\n';
  code += '    else:\n';
  code += '        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")\n\n';
  
  // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  // –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
  // –£–ë–ò–†–ê–ï–ú —É—Å–ª–æ–≤–∏–µ node.data.allowMultipleSelection, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞
  code += '    # –í–ê–ñ–ù–û: –í–°–ï–ì–î–ê –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–∑ –ë–î\n';
  code += '    # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä" –∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"\n';
  code += '    user_record = await get_user_from_db(user_id)\n';
  code += '    saved_interests = []\n';
  code += '    \n';
  code += '    if user_record and isinstance(user_record, dict):\n';
  code += '        user_data_field = user_record.get("user_data", {})\n';
  code += '        if isinstance(user_data_field, str):\n';
  code += '            import json\n';
  code += '            try:\n';
  code += '                user_vars = json.loads(user_data_field)\n';
  code += '            except:\n';
  code += '                user_vars = {}\n';
  code += '        elif isinstance(user_data_field, dict):\n';
  code += '            user_vars = user_data_field\n';
  code += '        else:\n';
  code += '            user_vars = {}\n';
  code += '        \n';
  code += '        # –ò—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –ª—é–±–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π\n';
  code += '        for var_name, var_data in user_vars.items():\n';
  code += '            if "–∏–Ω—Ç–µ—Ä–µ—Å" in var_name.lower() or var_name == "user_interests":\n';
  code += '                if isinstance(var_data, str) and var_data:\n';
  code += '                    saved_interests = [interest.strip() for interest in var_data.split(",")]\n';
  code += '                    logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π {var_name}: {saved_interests}")\n';
  code += '                    break\n';
  code += '    \n';
  code += '    # –í–°–ï–ì–î–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏\n';
  code += '    if user_id not in user_data:\n';
  code += '        user_data[user_id] = {}\n';
  const multiSelectVariable = node.data.multiSelectVariable || 'user_interests';
  code += `    user_data[user_id]["multi_select_${node.id}"] = saved_interests.copy()\n`;
  code += `    user_data[user_id]["multi_select_node"] = "${node.id}"\n`;
  code += '    logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å {len(saved_interests)} –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")\n';
  code += '    \n';
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  if (node.data.allowMultipleSelection) {
    code += '    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏\n';
    code += '    builder = InlineKeyboardBuilder()\n';
    code += '    \n';
    code += '    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤\n';
    code += '    def check_interest_match(button_text, saved_list):\n';
    code += '        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ"""\n';
    code += '        if not saved_list:\n';
    code += '            return False\n';
    code += '        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –≥–∞–ª–æ—á–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è\n';
    code += '        clean_button = button_text.replace("‚úÖ ", "").replace("‚¨ú ", "").strip()\n';
    code += '        for saved_interest in saved_list:\n';
    code += '            clean_saved = saved_interest.replace("‚úÖ ", "").replace("‚¨ú ", "").strip()\n';
    code += '            if clean_button == clean_saved or clean_button in clean_saved or clean_saved in clean_button:\n';
    code += '                return True\n';
    code += '        return False\n';
    code += '    \n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
    const buttons = node.data.buttons || [];
    const interestButtons = buttons.filter(btn => btn.action === 'selection');
    
    interestButtons.forEach(button => {
      const buttonText = button.text || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const buttonTarget = button.target || button.id;
      code += `    ${buttonTarget}_selected = check_interest_match("${buttonText}", saved_interests)\n`;
      code += `    ${buttonTarget}_text = "‚úÖ ${buttonText}" if ${buttonTarget}_selected else "${buttonText}"\n`;
      code += `    builder.add(InlineKeyboardButton(text=${buttonTarget}_text, callback_data="multi_select_${node.id}_${buttonTarget}"))\n`;
      code += '    \n';
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ü–ï–†–ï–î –∫–Ω–æ–ø–∫–æ–π "–ì–æ—Ç–æ–≤–æ"
    const allButtons = node.data.buttons || [];
    const nonSelectionButtons = allButtons.filter(btn => btn.action !== 'selection');
    
    nonSelectionButtons.forEach(button => {
      if (button.action === 'command') {
        const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
        code += `    builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
      } else if (button.action === 'goto') {
        const callbackData = button.target || button.id || 'no_action';
        code += `    builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
      } else if (button.action === 'url') {
        code += `    builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    const continueTarget = node.data.continueButtonTarget || 'next';
    const continueText = node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
    code += `    builder.add(InlineKeyboardButton(text="${continueText}", callback_data="multi_select_done_${node.id}"))\n`;
    code += '    builder.adjust(2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n';
    code += '    keyboard = builder.as_markup()\n';
    code += '    \n';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const messageText = node.data.messageText || "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!";
  const formattedText = formatTextForPython(messageText);
  
  if (node.data.enableConditionalMessages && node.data.conditionalMessages && node.data.conditionalMessages.length > 0) {
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
    code += '    text = None\n';
    code += '    \n';
    code += '    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π\n';
    code += '    user_record = await get_user_from_db(user_id)\n';
    code += '    if not user_record:\n';
    code += '        user_record = user_data.get(user_id, {})\n';
    code += '    \n';
    code += '    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º user_data\n';
    code += '    if isinstance(user_record, dict):\n';
    code += '        if "user_data" in user_record and isinstance(user_record["user_data"], dict):\n';
    code += '            user_data_dict = user_record["user_data"]\n';
    code += '        else:\n';
    code += '            user_data_dict = user_record\n';
    code += '    else:\n';
    code += '        user_data_dict = {}\n';
    code += '    \n';
    
    // Generate conditional logic using helper function
    code += generateConditionalMessageLogic(node.data.conditionalMessages, '    ');
    
    // Add fallback
    code += '    else:\n';
    
    if (node.data.fallbackMessage) {
      const fallbackText = formatTextForPython(node.data.fallbackMessage);
      code += `        text = ${fallbackText}\n`;
      code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
    } else {
      code += `        text = ${formattedText}\n`;
      code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞")\n';
    }
    
    code += '    \n';
  } else {
    code += `    text = ${formattedText}\n`;
  }
  
  // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  if (node.data.allowMultipleSelection) {
    code += '    await message.answer(text, reply_markup=keyboard)\n';
    return code;
  }
  
  return code + generateKeyboard(node);
}

function generateCommandHandler(node: Node): string {
  const command = node.data.command || "/help";
  const functionName = command.replace('/', '').replace(/[^a-zA-Z0-9_]/g, '_');
  
  let code = `\n@dp.message(Command("${command.replace('/', '')}"))\n`;
  code += `async def ${functionName}_handler(message: types.Message):\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ ${command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  if (node.data.isPrivateOnly) {
    code += '    if not await is_private_chat(message):\n';
    code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
    code += '        return\n';
  }

  if (node.data.adminOnly) {
    code += '    if not await is_admin(message.from_user.id):\n';
    code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
    code += '        return\n';
  }

  if (node.data.requiresAuth) {
    code += '    if not await check_auth(message.from_user.id):\n';
    code += '        await message.answer("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
    code += '        return\n';
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥\n';
  code += '    user_id = message.from_user.id\n';
  code += '    username = message.from_user.username\n';
  code += '    first_name = message.from_user.first_name\n';
  code += '    last_name = message.from_user.last_name\n';
  code += '    \n';
  code += '    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n';
  code += '    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)\n';
  code += '    \n';
  code += '    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –≤ –ë–î\n';
  code += `    if saved_to_db:\n`;
  code += `        await update_user_data_in_db(user_id, "command_${command.replace('/', '')}", datetime.now().isoformat())\n`;
  code += '    \n';
  code += '    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n';
  code += '    if user_id not in user_data:\n';
  code += '        user_data[user_id] = {}\n';
  code += '    if "commands_used" not in user_data[user_id]:\n';
  code += '        user_data[user_id]["commands_used"] = {}\n';
  code += `    user_data[user_id]["commands_used"]["${command}"] = user_data[user_id]["commands_used"].get("${command}", 0) + 1\n`;

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const messageText = node.data.messageText || "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏";
  const cleanedMessageText = stripHtmlTags(messageText); // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
  const formattedText = formatTextForPython(cleanedMessageText);
  
  if (node.data.enableConditionalMessages && node.data.conditionalMessages && node.data.conditionalMessages.length > 0) {
    code += '\n    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
    code += '    text = None\n';
    code += '    \n';
    code += '    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π\n';
    code += '    user_record = await get_user_from_db(user_id)\n';
    code += '    if not user_record:\n';
    code += '        user_record = user_data.get(user_id, {})\n';
    code += '    \n';
    code += '    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º user_data\n';
    code += '    if isinstance(user_record, dict):\n';
    code += '        if "user_data" in user_record and isinstance(user_record["user_data"], dict):\n';
    code += '            user_data_dict = user_record["user_data"]\n';
    code += '        else:\n';
    code += '            user_data_dict = user_record\n';
    code += '    else:\n';
    code += '        user_data_dict = {}\n';
    code += '    \n';
    
    // Generate conditional logic using helper function
    code += generateConditionalMessageLogic(node.data.conditionalMessages, '    ');
    
    // Add fallback
    code += '    else:\n';
    
    if (node.data.fallbackMessage) {
      const cleanedFallbackText = stripHtmlTags(node.data.fallbackMessage);
      const fallbackText = formatTextForPython(cleanedFallbackText);
      code += `        text = ${fallbackText}\n`;
      code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
    } else {
      code += `        text = ${formattedText}\n`;
      code += '        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∑–ª–∞")\n';
    }
    
    code += '    \n';
  } else {
    code += `\n    text = ${formattedText}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    code += '    \n';
    code += generateUniversalVariableReplacement('    ');
  }
  
  return code + generateKeyboard(node);
}

// generateMessageHandler removed - message nodes are handled via callback handlers only

function generatePhotoHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  // –ï—Å–ª–∏ —É —É–∑–ª–∞ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –∫–∞–∫ —Ç—Ä–∏–≥–≥–µ—Ä
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `photo_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ —Ñ–æ—Ç–æ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const imageUrl = node.data.imageUrl || "https://via.placeholder.com/400x300?text=Photo";
    const caption = node.data.messageText || "üì∏ –§–æ—Ç–æ";
    
    const formattedCaption = formatTextForPython(caption);
    code += `    caption = ${formattedCaption}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    code += '    \n';
    code += generateUniversalVariableReplacement('    ');
    code += '    # –û–±–Ω–æ–≤–ª—è–µ–º caption —Å –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏\n';
    code += '    caption = text\n';
    code += '    \n';
    
    code += `    photo_url = "${imageUrl}"\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
    code += '        if is_local_file(photo_url):\n';
    code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
    code += '            file_path = get_local_file_path(photo_url)\n';
    code += '            if os.path.exists(file_path):\n';
    code += '                photo_file = FSInputFile(file_path)\n';
    code += '            else:\n';
    code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
    code += '        else:\n';
    code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
    code += '            photo_file = photo_url\n';
    code += '        \n';
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ñ–æ—Ç–æ
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      code += generateInlineKeyboardCode(node.data.buttons, '        ', node.id, node.data);
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ inline –∫–Ω–æ–ø–∫–∞–º–∏\n';
      code += '        await message.answer_photo(photo_file, caption=caption, reply_markup=keyboard)\n';
    } else if (node.data.keyboardType === "reply" && node.data.buttons.length > 0) {
      code += '        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
      code += '        builder = ReplyKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "contact" && button.requestContact) {
          code += `        builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
        } else if (button.action === "location" && button.requestLocation) {
          code += `        builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
        } else {
          code += `        builder.add(KeyboardButton(text="${button.text}"))\n`;
        }
      });
      const resizeKeyboard = toPythonBoolean(node.data.resizeKeyboard);
      const oneTimeKeyboard = toPythonBoolean(node.data.oneTimeKeyboard);
      code += `        keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π\n';
      code += '        await message.answer_photo(photo_file, caption=caption, reply_markup=keyboard)\n';
    } else {
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n';
      code += '        await message.answer_photo(photo_file, caption=caption)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ\\n{caption}")\n';
  }
  
  return code;
}

function generateVideoHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `video_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –≤–∏–¥–µ–æ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const videoUrl = node.data.videoUrl || "https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_1mb.mp4";
    const caption = node.data.mediaCaption || node.data.messageText || "üé• –í–∏–¥–µ–æ";
    const duration = node.data.duration || 0;
    const fileSize = node.data.fileSize || 0;
    
    if (caption.includes('\n')) {
      code += `    caption = """${caption}"""\n`;
    } else {
      const escapedCaption = caption.replace(/"/g, '\\"');
      code += `    caption = "${escapedCaption}"\n`;
    }
    
    code += `    video_url = "${videoUrl}"\n`;
    if (duration > 0) code += `    duration = ${duration}\n`;
    if (fileSize > 0) code += `    file_size = ${fileSize * 1024 * 1024}\n`;  // Convert MB to bytes
    code += '    \n';
    code += '    try:\n';
    code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
    code += '        if is_local_file(video_url):\n';
    code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
    code += '            file_path = get_local_file_path(video_url)\n';
    code += '            if os.path.exists(file_path):\n';
    code += '                video_file = FSInputFile(file_path)\n';
    code += '            else:\n';
    code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
    code += '        else:\n';
    code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
    code += '            video_file = video_url\n';
    code += '        \n';
    
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      code += generateInlineKeyboardCode(node.data.buttons, '        ', node.id, node.data);
      code += '        await message.answer_video(\n';
      code += '            video_file,\n';
      code += '            caption=caption';
      if (duration > 0) code += ',\n            duration=duration';
      code += ',\n            reply_markup=keyboard\n';
      code += '        )\n';
    } else {
      code += '        await message.answer_video(\n';
      code += '            video_file,\n';
      code += '            caption=caption';
      if (duration > 0) code += ',\n            duration=duration';
      code += '\n        )\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ\\n{caption}")\n';
  }
  
  return code;
}

function generateAudioHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—É–¥–∏–æ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `audio_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∞—É–¥–∏–æ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const audioUrl = node.data.audioUrl || "https://www.soundjay.com/misc/beep-07a.wav";
    const caption = node.data.mediaCaption || node.data.messageText || "üéµ –ê—É–¥–∏–æ";
    const duration = node.data.duration || 0;
    const performer = node.data.performer || "";
    const title = node.data.title || "";
    
    if (caption.includes('\n')) {
      code += `    caption = """${caption}"""\n`;
    } else {
      const escapedCaption = caption.replace(/"/g, '\\"');
      code += `    caption = "${escapedCaption}"\n`;
    }
    
    code += `    audio_url = "${audioUrl}"\n`;
    if (duration > 0) code += `    duration = ${duration}\n`;
    if (performer) code += `    performer = "${performer}"\n`;
    if (title) code += `    title = "${title}"\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
    code += '        if is_local_file(audio_url):\n';
    code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
    code += '            file_path = get_local_file_path(audio_url)\n';
    code += '            if os.path.exists(file_path):\n';
    code += '                audio_file = FSInputFile(file_path)\n';
    code += '            else:\n';
    code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
    code += '        else:\n';
    code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
    code += '            audio_file = audio_url\n';
    code += '        \n';
    
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer_audio(\n';
      code += '            audio_file,\n';
      code += '            caption=caption';
      if (duration > 0) code += ',\n            duration=duration';
      if (performer) code += ',\n            performer=performer';
      if (title) code += ',\n            title=title';
      code += ',\n            reply_markup=keyboard\n';
      code += '        )\n';
    } else {
      code += '        await message.answer_audio(\n';
      code += '            audio_file,\n';
      code += '            caption=caption';
      if (duration > 0) code += ',\n            duration=duration';
      if (performer) code += ',\n            performer=performer';
      if (title) code += ',\n            title=title';
      code += '\n        )\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ\\n{caption}")\n';
  }
  
  return code;
}

function generateDocumentHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `document_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const documentUrl = node.data.documentUrl || "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf";
    const documentName = node.data.documentName || "document.pdf";
    const caption = node.data.mediaCaption || node.data.messageText || "üìÑ –î–æ–∫—É–º–µ–Ω—Ç";
    const fileSize = node.data.fileSize || 0;
    const mimeType = node.data.mimeType || "";
    
    if (caption.includes('\n')) {
      code += `    caption = """${caption}"""\n`;
    } else {
      const escapedCaption = caption.replace(/"/g, '\\"');
      code += `    caption = "${escapedCaption}"\n`;
    }
    
    code += `    document_url = "${documentUrl}"\n`;
    code += `    document_name = "${documentName}"\n`;
    if (fileSize > 0) code += `    file_size = ${fileSize * 1024 * 1024}\n`;  // Convert MB to bytes
    if (mimeType) code += `    mime_type = "${mimeType}"\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º\n';
    code += '        if is_local_file(document_url):\n';
    code += '            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª\n';
    code += '            file_path = get_local_file_path(document_url)\n';
    code += '            if os.path.exists(file_path):\n';
    code += '                document_file = FSInputFile(file_path, filename=document_name)\n';
    code += '            else:\n';
    code += '                raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")\n';
    code += '        else:\n';
    code += '            # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤\n';
    code += '            document_file = URLInputFile(document_url, filename=document_name)\n';
    code += '        \n';
    
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer_document(\n';
      code += '            document_file,\n';
      code += '            caption=caption,\n';
      code += '            reply_markup=keyboard\n';
      code += '        )\n';
    } else {
      code += '        await message.answer_document(\n';
      code += '            document_file,\n';
      code += '            caption=caption\n';
      code += '        )\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\\n{caption}")\n';
  }
  
  return code;
}

function generateStickerHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `sticker_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∏–∫–µ—Ä–∞ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const stickerUrl = node.data.stickerUrl || node.data.stickerFileId || "CAACAgIAAxkBAAICGGXm2KvQAAG2X8cxTmZHJkRnYwYlAAJGAANWnb0KmgiEKEZDKVQeBA";
    
    code += '    try:\n';
    code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä\n';
    
    if (node.data.stickerFileId) {
      code += `        sticker_file_id = "${node.data.stickerFileId}"\n`;
      code += '        await message.answer_sticker(sticker_file_id)\n';
    } else {
      code += `        sticker_url = "${stickerUrl}"\n`;
      code += '        await message.answer_sticker(sticker_url)\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        \n';
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Å—Ç–∏–∫–µ—Ä–∞\n';
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}")\n';
    code += '        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä")\n';
  }
  
  return code;
}

function generateVoiceHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `voice_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const voiceUrl = node.data.voiceUrl || "https://www.soundjay.com/misc/beep-07a.wav";
    const duration = node.data.duration || 10;
    
    code += `    voice_url = "${voiceUrl}"\n`;
    code += `    duration = ${duration}\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n';
    code += '        await message.answer_voice(voice_url, duration=duration)\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        \n';
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n';
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n';
    code += '        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")\n';
  }
  
  return code;
}

function generateAnimationHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GIF –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `animation_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const animationUrl = node.data.animationUrl || "https://media.giphy.com/media/26tn33aiTi1jkl6H6/giphy.gif";
    const caption = node.data.mediaCaption || node.data.messageText || "üé¨ GIF –∞–Ω–∏–º–∞—Ü–∏—è";
    const duration = node.data.duration || 0;
    const width = node.data.width || 0;
    const height = node.data.height || 0;
    
    if (caption.includes('\n')) {
      code += `    caption = """${caption}"""\n`;
    } else {
      const escapedCaption = caption.replace(/"/g, '\\"');
      code += `    caption = "${escapedCaption}"\n`;
    }
    
    code += `    animation_url = "${animationUrl}"\n`;
    if (duration > 0) code += `    duration = ${duration}\n`;
    if (width > 0) code += `    width = ${width}\n`;
    if (height > 0) code += `    height = ${height}\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –∞–Ω–∏–º–∞—Ü–∏—é\n';
    
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer_animation(animation_url, caption=caption, reply_markup=keyboard';
      if (duration > 0) code += ', duration=duration';
      if (width > 0) code += ', width=width';
      if (height > 0) code += ', height=height';
      code += ')\n';
    } else {
      code += '        await message.answer_animation(animation_url, caption=caption';
      if (duration > 0) code += ', duration=duration';
      if (width > 0) code += ', width=width';
      if (height > 0) code += ', height=height';
      code += ')\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é\\n{caption}")\n';
  }
  
  return code;
}

function generateLocationHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `location_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let latitude = node.data.latitude || 55.7558;
    let longitude = node.data.longitude || 37.6176;
    const title = node.data.title || "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ";
    const address = node.data.address || "";
    const city = node.data.city || "";
    const country = node.data.country || "";
    const foursquareId = node.data.foursquareId || "";
    const foursquareType = node.data.foursquareType || "";
    const mapService = node.data.mapService || 'custom';
    const generateMapPreview = node.data.generateMapPreview !== false;

    code += '    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ä—Ç\n';
    
    if (mapService === 'yandex' && node.data.yandexMapUrl) {
      code += `    yandex_url = "${node.data.yandexMapUrl}"\n`;
      code += '    extracted_lat, extracted_lon = extract_coordinates_from_yandex(yandex_url)\n';
      code += '    if extracted_lat and extracted_lon:\n';
      code += '        latitude, longitude = extracted_lat, extracted_lon\n';
      code += '    else:\n';
      code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
    } else if (mapService === 'google' && node.data.googleMapUrl) {
      code += `    google_url = "${node.data.googleMapUrl}"\n`;
      code += '    extracted_lat, extracted_lon = extract_coordinates_from_google(google_url)\n';
      code += '    if extracted_lat and extracted_lon:\n';
      code += '        latitude, longitude = extracted_lat, extracted_lon\n';
      code += '    else:\n';
      code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
    } else if (mapService === '2gis' && node.data.gisMapUrl) {
      code += `    gis_url = "${node.data.gisMapUrl}"\n`;
      code += '    extracted_lat, extracted_lon = extract_coordinates_from_2gis(gis_url)\n';
      code += '    if extracted_lat and extracted_lon:\n';
      code += '        latitude, longitude = extracted_lat, extracted_lon\n';
      code += '    else:\n';
      code += `        latitude, longitude = ${latitude}, ${longitude}  # Fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n`;
    } else {
      code += `    latitude, longitude = ${latitude}, ${longitude}\n`;
    }
    
    if (title) code += `    title = "${title}"\n`;
    if (address) code += `    address = "${address}"\n`;
    if (city) code += `    city = "${city}"\n`;
    if (country) code += `    country = "${country}"\n`;
    if (foursquareId) code += `    foursquare_id = "${foursquareId}"\n`;
    if (foursquareType) code += `    foursquare_type = "${foursquareType}"\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n';
    
    if (title || address) {
      code += '        await message.answer_venue(\n';
      code += '            latitude=latitude,\n';
      code += '            longitude=longitude,\n';
      code += '            title=title,\n';
      code += '            address=address';
      if (foursquareId) code += ',\n            foursquare_id=foursquare_id';
      if (foursquareType) code += ',\n            foursquare_type=foursquare_type';
      code += '\n        )\n';
    } else {
      code += '        await message.answer_location(latitude=latitude, longitude=longitude)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")\n';
    code += '        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")\n';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (generateMapPreview) {
      code += '        \n';
      code += '        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã\n';
      code += '        map_urls = generate_map_urls(latitude, longitude, title)\n';
      code += '        \n';
      code += '        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ä—Ç\n';
      code += '        map_builder = InlineKeyboardBuilder()\n';
      code += '        map_builder.add(InlineKeyboardButton(text="üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã", url=map_urls["yandex"]))\n';
      code += '        map_builder.add(InlineKeyboardButton(text="üåç Google Maps", url=map_urls["google"]))\n';
      code += '        map_builder.add(InlineKeyboardButton(text="üìç 2–ì–ò–°", url=map_urls["2gis"]))\n';
      code += '        map_builder.add(InlineKeyboardButton(text="üåê OpenStreetMap", url=map_urls["openstreetmap"]))\n';
      
      if (node.data.showDirections) {
        code += '        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞\n';
        code += '        map_builder.add(InlineKeyboardButton(text="üß≠ –ú–∞—Ä—à—Ä—É—Ç (–Ø–Ω–¥–µ–∫—Å)", url=f"https://yandex.ru/maps/?rtext=~{latitude},{longitude}"))\n';
        code += '        map_builder.add(InlineKeyboardButton(text="üöó –ú–∞—Ä—à—Ä—É—Ç (Google)", url=f"https://maps.google.com/maps/dir//{latitude},{longitude}"))\n';
      }
      
      code += '        map_builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç–æ–ª–±—Ü–∞\n';
      code += '        map_keyboard = map_builder.as_markup()\n';
      code += '        \n';
      code += '        await message.answer(\n';
      if (node.data.showDirections) {
        code += '            "üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",\n';
      } else {
        code += '            "üó∫Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ:",\n';
      }
      code += '            reply_markup=map_keyboard\n';
      code += '        )\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        \n';
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏\n';
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")\n';
    code += '        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")\n';
  }
  
  return code;
}

function generateContactHandler(node: Node): string {
  let code = `\n# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —É–∑–ª–∞ ${node.id}\n`;
  
  if (node.data.command) {
    const command = node.data.command.replace('/', '');
    const functionName = `contact_${command}_handler`.replace(/[^a-zA-Z0-9_]/g, '_');
    
    code += `@dp.message(Command("${command}"))\n`;
    code += `async def ${functionName}(message: types.Message):\n`;
    
    code += `    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${node.data.command} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")\n`;
    
    if (node.data.isPrivateOnly) {
      code += '    if not await is_private_chat(message):\n';
      code += '        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö")\n';
      code += '        return\n';
    }

    if (node.data.adminOnly) {
      code += '    if not await is_admin(message.from_user.id):\n';
      code += '        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")\n';
      code += '        return\n';
    }

    const phoneNumber = node.data.phoneNumber || "+7 (999) 123-45-67";
    const firstName = node.data.firstName || "–ò–º—è";
    const lastName = node.data.lastName || "";
    const userId = node.data.userId || 0;
    const vcard = node.data.vcard || "";
    
    code += `    phone_number = "${phoneNumber}"\n`;
    code += `    first_name = "${firstName}"\n`;
    if (lastName) code += `    last_name = "${lastName}"\n`;
    if (userId > 0) code += `    user_id = ${userId}\n`;
    if (vcard) code += `    vcard = "${vcard}"\n`;
    code += '    \n';
    code += '    try:\n';
    code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç\n';
    code += '        await message.answer_contact(\n';
    code += '            phone_number=phone_number,\n';
    code += '            first_name=first_name';
    if (lastName) code += ',\n            last_name=last_name';
    if (userId > 0) code += ',\n            user_id=user_id';
    if (vcard) code += ',\n            vcard=vcard';
    code += '\n        )\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      code += '        \n';
      code += '        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞\n';
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        }
      });
      code += '        keyboard = builder.as_markup()\n';
      code += '        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)\n';
    }
    
    code += '    except Exception as e:\n';
    code += '        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")\n';
    code += '        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")\n';
  }
  
  return code;
}

// –§—É–Ω–∫—Ü–∏–∏-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
function generatePinMessageHandler(node: Node): string {
  let code = `\n# Pin Message Handler\n`;
  const synonyms = node.data.synonyms || ['–∑–∞–∫—Ä–µ–ø–∏—Ç—å', '–ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å', '–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å'];
  const disableNotification = node.data.disableNotification || false;
  const targetGroupId = node.data.targetGroupId;
  const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
  synonyms.forEach((synonym, index) => {
    const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
    
    // –£—Å–ª–æ–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º –∏ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã
    let condition = `lambda message: message.text and message.text.lower().startswith("${synonym.toLowerCase()}") and message.chat.type in ['group', 'supergroup']`;
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ID –≥—Ä—É–ø–ø—ã
    if (targetGroupId) {
      condition += ` and str(message.chat.id) == "${targetGroupId}"`;
    }
    
    code += `\n@dp.message(${condition})\n`;
    code += `async def pin_message_${sanitizedNodeId}_${sanitizedSynonym}_handler(message: types.Message):\n`;
    code += `    """\n`;
    code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ '${synonym}'\n`;
    if (targetGroupId) {
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
    } else {
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
    }
    code += `    """\n`;
    code += `    user_id = message.from_user.id\n`;
    code += `    chat_id = message.chat.id  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n`;
    code += `    \n`;
    code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `    target_message_id = None\n`;
    code += `    \n`;
    code += `    if message.reply_to_message:\n`;
    code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
    code += `        target_message_id = message.reply_to_message.message_id\n`;
    code += `        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `    else:\n`;
    code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
    code += `        text_parts = message.text.split()\n`;
    code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
    code += `            target_message_id = int(text_parts[1])\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `        else:\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç ${synonym} –±–µ–∑ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '${synonym} ID_—Å–æ–æ–±—â–µ–Ω–∏—è'")\n`;
    code += `            return\n`;
    code += `    \n`;
    code += `    try:\n`;
    code += `        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ\n`;
    code += `        await bot.pin_chat_message(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            message_id=target_message_id,\n`;
    code += `            disable_notification=${disableNotification ? 'True' : 'False'}\n`;
    code += `        )\n`;
    code += `        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ")\n`;
    code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `    except TelegramBadRequest as e:\n`;
    code += `        if "message to pin not found" in str(e) or "message not found" in str(e):\n`;
    code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
    code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
    code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
    code += `        else:\n`;
    code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
    code += `        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n`;
    code += `    except Exception as e:\n`;
    code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
    code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")\n`;
    code += `\n`;
  });
  
  return code;
}

function generateUnpinMessageHandler(node: Node): string {
  let code = `\n# Unpin Message Handler\n`;
  const synonyms = node.data.synonyms || ['–æ—Ç–∫—Ä–µ–ø–∏—Ç—å', '–æ—Ç—Ü–µ–ø–∏—Ç—å', '—É–±—Ä–∞—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ'];
  const targetGroupId = node.data.targetGroupId;
  const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
  
  // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
  synonyms.forEach((synonym, index) => {
    const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
    
    // –£—Å–ª–æ–≤–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º –∏ —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø—ã
    let condition = `lambda message: message.text and message.text.lower().startswith("${synonym.toLowerCase()}") and message.chat.type in ['group', 'supergroup']`;
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É ID –≥—Ä—É–ø–ø—ã
    if (targetGroupId) {
      condition += ` and str(message.chat.id) == "${targetGroupId}"`;
    }
    
    code += `\n@dp.message(${condition})\n`;
    code += `async def unpin_message_${sanitizedNodeId}_${sanitizedSynonym}_handler(message: types.Message):\n`;
    code += `    """\n`;
    code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ '${synonym}'\n`;
    if (targetGroupId) {
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
    } else {
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
    }
    code += `    """\n`;
    code += `    user_id = message.from_user.id\n`;
    code += `    chat_id = message.chat.id  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n`;
    code += `    \n`;
    code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `    target_message_id = None\n`;
    code += `    \n`;
    code += `    if message.reply_to_message:\n`;
    code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
    code += `        target_message_id = message.reply_to_message.message_id\n`;
    code += `        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `    else:\n`;
    code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
    code += `        text_parts = message.text.split()\n`;
    code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
    code += `            target_message_id = int(text_parts[1])\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `        else:\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç ${synonym} –±–µ–∑ ID —Å–æ–æ–±—â–µ–Ω–∏—è - –æ—Ç–∫—Ä–µ–ø–∏–º –≤—Å–µ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ\n`;
    code += `            target_message_id = None\n`;
    code += `    \n`;
    code += `    try:\n`;
    code += `        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø–µ\n`;
    code += `        if target_message_id:\n`;
    code += `            await bot.unpin_chat_message(\n`;
    code += `                chat_id=chat_id,\n`;
    code += `                message_id=target_message_id\n`;
    code += `            )\n`;
    code += `            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ")\n`;
    code += `            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `        else:\n`;
    code += `            await bot.unpin_all_chat_messages(chat_id=chat_id)\n`;
    code += `            await message.answer("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã")\n`;
    code += `            logging.info(f"–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `    except TelegramBadRequest as e:\n`;
    code += `        if "message to unpin not found" in str(e) or "message not found" in str(e):\n`;
    code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
    code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
    code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
    code += `        else:\n`;
    code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
    code += `        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n`;
    code += `    except Exception as e:\n`;
    code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
    code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏: {e}")\n`;
    code += `\n`;
  });
  
  return code;
}

function generateDeleteMessageHandler(node: Node): string {
  let code = `\n# Delete Message Handler\n`;
  const synonyms = node.data.synonyms || ['—É–¥–∞–ª–∏—Ç—å', '—Å—Ç–µ—Ä–µ—Ç—å', '—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'];
  const targetGroupId = node.data.targetGroupId;
  const messageText = node.data.messageText || "üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!";
  
  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
  if (targetGroupId) {
    const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
    
    synonyms.forEach((synonym, index) => {
      const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
      code += `\n@dp.message(lambda message: message.text and message.text.lower() == "${synonym.toLowerCase()}")\n`;
      code += `async def delete_message_${sanitizedNodeId}_${sanitizedSynonym}_handler(message: types.Message):\n`;
      code += `    """\n`;
      code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ '${synonym}'\n`;
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
      code += `    """\n`;
      code += `    user_id = message.from_user.id\n`;
      code += `    chat_id = ${targetGroupId}\n`;
      code += `    \n`;
      code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
      code += `    target_message_id = None\n`;
      code += `    \n`;
      code += `    if message.reply_to_message:\n`;
      code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
      code += `        target_message_id = message.reply_to_message.message_id\n`;
      code += `        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")\n`;
      code += `    else:\n`;
      code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
      code += `        text_parts = message.text.split()\n`;
      code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
      code += `            target_message_id = int(text_parts[1])\n`;
      code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")\n`;
      code += `        else:\n`;
      code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç ${synonym} –±–µ–∑ ID —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
      code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '${synonym} ID_—Å–æ–æ–±—â–µ–Ω–∏—è'")\n`;
      code += `            return\n`;
      code += `    \n`;
      code += `    try:\n`;
      code += `        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ\n`;
      code += `        await bot.delete_message(\n`;
      code += `            chat_id=chat_id,\n`;
      code += `            message_id=target_message_id\n`;
      code += `        )\n`;
      code += `        await message.answer("${messageText}")\n`;
      code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
      code += `    except TelegramBadRequest as e:\n`;
      code += `        if "message to delete not found" in str(e) or "message not found" in str(e):\n`;
      code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
      code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
      code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
      code += `        else:\n`;
      code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
      code += `        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n`;
      code += `    except Exception as e:\n`;
      code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
      code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")\n`;
      code += `\n`;
    });
  } else {
    // –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø
    code += `# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω–æ–Ω–∏–º—ã: ${synonyms.join(', ')}\n`;
    code += `# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è target message ID\n`;
    code += `# –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
    
    const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
    code += `\n@dp.message(Command("delete_message"))\n`;
    code += `async def delete_message_${sanitizedNodeId}_command_handler(message: types.Message):\n`;
    code += `    """\n`;
    code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_message\n`;
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
    code += `    """\n`;
    code += `    user_id = message.from_user.id\n`;
    code += `    chat_id = message.chat.id\n`;
    code += `    \n`;
    code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
    code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
    code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
    code += `        return\n`;
    code += `    \n`;
    code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `    target_message_id = None\n`;
    code += `    \n`;
    code += `    if message.reply_to_message:\n`;
    code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
    code += `        target_message_id = message.reply_to_message.message_id\n`;
    code += `        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")\n`;
    code += `    else:\n`;
    code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
    code += `        text_parts = message.text.split()\n`;
    code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
    code += `            target_message_id = int(text_parts[1])\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")\n`;
    code += `        else:\n`;
    code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–µ–∑ ID —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
    code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '/delete_message ID_—Å–æ–æ–±—â–µ–Ω–∏—è'")\n`;
    code += `            return\n`;
    code += `    \n`;
    code += `    try:\n`;
    code += `        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `        await bot.delete_message(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            message_id=target_message_id\n`;
    code += `        )\n`;
    code += `        await message.answer("${messageText}")\n`;
    code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
    code += `    except TelegramBadRequest as e:\n`;
    code += `        if "message to delete not found" in str(e) or "message not found" in str(e):\n`;
    code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
    code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
    code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
    code += `        else:\n`;
    code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
    code += `        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")\n`;
    code += `    except Exception as e:\n`;
    code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
    code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")\n`;
    code += `\n`;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    synonyms.forEach((synonym, index) => {
      const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
      code += `\n@dp.message(lambda message: message.text and (message.text.lower() == "${synonym.toLowerCase()}" or message.text.lower().startswith("${synonym.toLowerCase()} ")) and message.chat.type in ['group', 'supergroup'])\n`;
      code += `async def delete_message_${sanitizedNodeId}_${sanitizedSynonym}_handler(message: types.Message):\n`;
      code += `    """\n`;
      code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω–æ–Ω–∏–º–∞ '${synonym}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
      code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID\n`;
      code += `    """\n`;
      code += `    user_id = message.from_user.id\n`;
      code += `    chat_id = message.chat.id\n`;
      code += `    \n`;
      code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
      code += `    target_message_id = None\n`;
      code += `    \n`;
      code += `    if message.reply_to_message:\n`;
      code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
      code += `        target_message_id = message.reply_to_message.message_id\n`;
      code += `        logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º '${synonym}'")\n`;
      code += `    else:\n`;
      code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
      code += `        text_parts = message.text.split()\n`;
      code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
      code += `            target_message_id = int(text_parts[1])\n`;
      code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω ID —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º '${synonym}'")\n`;
      code += `        else:\n`;
      code += `            logging.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å–∏–Ω–æ–Ω–∏–º '${synonym}' –±–µ–∑ ID —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
      code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '${synonym} ID_—Å–æ–æ–±—â–µ–Ω–∏—è'")\n`;
      code += `            return\n`;
      code += `    \n`;
      code += `    try:\n`;
      code += `        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
      code += `        await bot.delete_message(\n`;
      code += `            chat_id=chat_id,\n`;
      code += `            message_id=target_message_id\n`;
      code += `        )\n`;
      code += `        await message.answer("${messageText}")\n`;
      code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º '${synonym}'")\n`;
      code += `    except TelegramBadRequest as e:\n`;
      code += `        if "message to delete not found" in str(e) or "message not found" in str(e):\n`;
      code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
      code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
      code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")\n`;
      code += `        else:\n`;
      code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
      code += `        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º '${synonym}': {e}")\n`;
      code += `    except Exception as e:\n`;
      code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
      code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–∏–Ω–æ–Ω–∏–º '${synonym}': {e}")\n`;
      code += `\n`;
    });
  }
  
  return code;
}

function generateContentManagementSynonymHandler(node: Node, synonym: string): string {
  const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
  const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
  const messageText = node.data.messageText || (
    node.type === 'pin_message' ? "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ" :
    node.type === 'unpin_message' ? "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ" :
    node.type === 'delete_message' ? "üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!" :
    "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
  );
  
  let code = `\n@dp.message(lambda message: message.text and (message.text.lower() == "${synonym.toLowerCase()}" or message.text.lower().startswith("${synonym.toLowerCase()} ")) and message.chat.type in ['group', 'supergroup'])\n`;
  code += `async def ${node.type}_${sanitizedNodeId}_synonym_${sanitizedSynonym}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω–æ–Ω–∏–º–∞ '${synonym}' –¥–ª—è ${node.type}\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
  code += `    target_message_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
  code += `        target_message_id = message.reply_to_message.message_id\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '${synonym}' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} (—á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç)")\n`;
  code += `    else:\n`;
  code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è\n`;
  code += `        text_parts = message.text.split()\n`;
  code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
  code += `            target_message_id = int(text_parts[1])\n`;
  code += `            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '${synonym}' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {target_message_id} (—á–µ—Ä–µ–∑ ID)")\n`;
  code += `        else:\n`;
  code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '${synonym} ID_—Å–æ–æ–±—â–µ–Ω–∏—è'")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    \n`;
  code += `    try:\n`;
  
  if (node.type === 'pin_message') {
    const disableNotification = node.data.disableNotification || false;
    code += `        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `        await bot.pin_chat_message(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            message_id=target_message_id,\n`;
    code += `            disable_notification=${disableNotification ? 'True' : 'False'}\n`;
    code += `        )\n`;
    code += `        await message.answer("${messageText}")\n`;
    code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")\n`;
  } else if (node.type === 'unpin_message') {
    code += `        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `        await bot.unpin_chat_message(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            message_id=target_message_id\n`;
    code += `        )\n`;
    code += `        await message.answer("${messageText}")\n`;
    code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")\n`;
  } else if (node.type === 'delete_message') {
    code += `        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
    code += `        await bot.delete_message(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            message_id=target_message_id\n`;
    code += `        )\n`;
    code += `        await message.answer("${messageText}")\n`;
    code += `        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {target_message_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")\n`;
  }
  
  code += `    \n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "message to pin not found" in str(e) or "message not found" in str(e):\n`;
  code += `            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")\n`;
  code += `        elif "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ ${node.type}: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {node.type}: {e}")\n`;
  code += `\n`;
  
  return code;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

function generateBanUserHandler(node: Node): string {
  let code = `\n# Ban User Handler\n`;
  const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
  const untilDate = node.data.untilDate || 0;
  const synonyms = node.data.synonyms || ['–∑–∞–±–∞–Ω–∏—Ç—å', '–±–∞–Ω', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'];
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban_user
  code += `@dp.message(Command("ban_user"))\n`;
  code += `async def ban_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `        target_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name\n`;
  code += `    else:\n`;
  code += `        text_parts = message.text.split()\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  if (untilDate && untilDate > 0) {
    code += `        await bot.ban_chat_member(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            user_id=target_user_id,\n`;
    code += `            until_date=${untilDate}\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {untilDate}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  } else {
    code += `        await bot.ban_chat_member(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            user_id=target_user_id\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  }
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö (—Å–∏–Ω–æ–Ω–∏–º—ã)
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}]) and message.chat.type in ['group', 'supergroup']`;
  
  code += `@dp.message(${condition})\n`;
  code += `async def ban_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonymsList.join(', ')}\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `        target_username = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name\n`;
  code += `    else:\n`;
  code += `        text_parts = message.text.split()\n`;
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
    code += `        if message.entities:\n`;
    code += `            for entity in message.entities:\n`;
    code += `                if entity.type == "text_mention":\n`;
    code += `                    target_user_id = entity.user.id\n`;
    code += `                    break\n`;
    code += `        if not target_user_id:\n`;
    code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
    code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  if (untilDate && untilDate > 0) {
    code += `        await bot.ban_chat_member(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            user_id=target_user_id,\n`;
    code += `            until_date=${untilDate}\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ {untilDate}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  } else {
    code += `        await bot.ban_chat_member(\n`;
    code += `            chat_id=chat_id,\n`;
    code += `            user_id=target_user_id\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  }
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateUnbanUserHandler(node: Node): string {
  let code = `\n# Unban User Handler\n`;
  const synonyms = node.data.synonyms || ['—Ä–∞–∑–±–∞–Ω–∏—Ç—å', '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', 'unban'];
  const targetGroupId = node.data.targetGroupId || '';
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban_user
  code += `@dp.message(Command("unban_user"))\n`;
  code += `async def unban_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `        logging.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏–∑ reply: {target_user_id}")\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.unban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            only_if_banned=True\n`;
  code += `        )\n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö (—Å–∏–Ω–æ–Ω–∏–º—ã)
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}]) and message.chat.type in ['group', 'supergroup']`;
  
  code += `@dp.message(${condition})\n`;
  code += `async def unban_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –ì—Ä—É–ø–ø–∞: ${targetGroupId}\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `        logging.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –∏–∑ reply: {target_user_id}")\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.unban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            only_if_banned=True\n`;
  code += `        )\n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateMuteUserHandler(node: Node): string {
  let code = `\n# Mute User Handler\n`;
  const duration = node.data.duration || 3600;
  const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
  const targetGroupId = node.data.targetGroupId || '';
  const synonyms = node.data.synonyms || '–∑–∞–º—É—Ç–∏—Ç—å, –º—É—Ç, –∑–∞—Ç–∫–Ω—É—Ç—å';
  
  // Permissions –¥–ª—è –º—É—Ç–∞
  const canSendMessages = node.data.canSendMessages || false;
  const canSendMediaMessages = node.data.canSendMediaMessages || false;
  const canSendPolls = node.data.canSendPolls || false;
  const canSendOtherMessages = node.data.canSendOtherMessages || false;
  const canAddWebPagePreviews = node.data.canAddWebPagePreviews || false;
  const canChangeGroupInfo = node.data.canChangeGroupInfo || false;
  const canInviteUsers2 = node.data.canInviteUsers2 || false;
  const canPinMessages2 = node.data.canPinMessages2 || false;
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mute_user
  code += `@dp.message(Command("mute_user"))\n`;
  code += `async def mute_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    \"\"\"\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mute_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    \"\"\"\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer(\"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö\")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == \"text_mention\":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer(\"‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è\")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer(\"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞\n`;
  code += `        from datetime import datetime, timedelta\n`;
  code += `        until_date = datetime.now() + timedelta(seconds=${duration})\n`;
  code += `        \n`;
  code += `        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.restrict_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            permissions=types.ChatPermissions(\n`;
  code += `                can_send_messages=${canSendMessages ? 'True' : 'False'},\n`;
  code += `                can_send_media_messages=${canSendMediaMessages ? 'True' : 'False'},\n`;
  code += `                can_send_polls=${canSendPolls ? 'True' : 'False'},\n`;
  code += `                can_send_other_messages=${canSendOtherMessages ? 'True' : 'False'},\n`;
  code += `                can_add_web_page_previews=${canAddWebPagePreviews ? 'True' : 'False'},\n`;
  code += `                can_change_info=${canChangeGroupInfo ? 'True' : 'False'},\n`;
  code += `                can_invite_users=${canInviteUsers2 ? 'True' : 'False'},\n`;
  code += `                can_pin_messages=${canPinMessages2 ? 'True' : 'False'}\n`;
  code += `            ),\n`;
  code += `            until_date=until_date\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        hours = ${duration} // 3600\n`;
  code += `        minutes = (${duration} % 3600) // 60\n`;
  code += `        time_str = f\"{hours}—á {minutes}–º\" if hours > 0 else f\"{minutes}–º\"\n`;
  code += `        \n`;
  code += `        await message.answer(f\"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {time_str}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\")\n`;
  code += `        logging.info(f\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} –Ω–∞ ${duration} —Å–µ–∫—É–Ω–¥\")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if \"not enough rights\" in str(e) or \"CHAT_ADMIN_REQUIRED\" in str(e):\n`;
  code += `            await message.answer(\"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f\"‚ùå –û—à–∏–±–∫–∞: {e}\")\n`;
  code += `        logging.error(f\"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}\")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer(\"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\")\n`;
  code += `        logging.error(f\"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: {e}\")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}])`;
  if (targetGroupId) {
    condition += ` and str(message.chat.id) == "${targetGroupId}"`;
  } else {
    condition += ` and message.chat.type in ['group', 'supergroup']`;
  }
  
  code += `@dp.message(${condition})\n`;
  code += `async def mute_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –ì—Ä—É–ø–ø–∞: ${targetGroupId}\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º—É—Ç–∞\n`;
  code += `        from datetime import datetime, timedelta\n`;
  code += `        until_date = datetime.now() + timedelta(seconds=${duration})\n`;
  code += `        \n`;
  code += `        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.restrict_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            permissions=types.ChatPermissions(\n`;
  code += `                can_send_messages=${canSendMessages ? 'True' : 'False'},\n`;
  code += `                can_send_media_messages=${canSendMediaMessages ? 'True' : 'False'},\n`;
  code += `                can_send_polls=${canSendPolls ? 'True' : 'False'},\n`;
  code += `                can_send_other_messages=${canSendOtherMessages ? 'True' : 'False'},\n`;
  code += `                can_add_web_page_previews=${canAddWebPagePreviews ? 'True' : 'False'},\n`;
  code += `                can_change_info=${canChangeGroupInfo ? 'True' : 'False'},\n`;
  code += `                can_invite_users=${canInviteUsers2 ? 'True' : 'False'},\n`;
  code += `                can_pin_messages=${canPinMessages2 ? 'True' : 'False'}\n`;
  code += `            ),\n`;
  code += `            until_date=until_date\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        hours = ${duration} // 3600\n`;
  code += `        minutes = (${duration} % 3600) // 60\n`;
  code += `        time_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"\n`;
  code += `        \n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {time_str}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id} –Ω–∞ ${duration} —Å–µ–∫—É–Ω–¥")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateUnmuteUserHandler(node: Node): string {
  let code = `\n# Unmute User Handler\n`;
  const targetGroupId = node.data.targetGroupId || '';
  const synonyms = node.data.synonyms || '—Ä–∞–∑–º—É—Ç–∏—Ç—å, —Ä–∞–∑–º—É—Ç, –æ—Å–≤–æ–±–æ–¥–∏—Ç—å';
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unmute_user
  code += `@dp.message(Command("unmute_user"))\n`;
  code += `async def unmute_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    \"\"\"\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unmute_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    \"\"\"\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer(\"‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö\")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == \"text_mention\":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer(\"‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è\")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer(\"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.restrict_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            permissions=types.ChatPermissions(\n`;
  code += `                can_send_messages=True,\n`;
  code += `                can_send_media_messages=True,\n`;
  code += `                can_send_polls=True,\n`;
  code += `                can_send_other_messages=True,\n`;
  code += `                can_add_web_page_previews=True,\n`;
  code += `                can_change_info=False,\n`;
  code += `                can_invite_users=False,\n`;
  code += `                can_pin_messages=False\n`;
  code += `            )\n`;
  code += `        )\n`;
  code += `        await message.answer(f\"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã\")\n`;
  code += `        logging.info(f\"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}\")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if \"not enough rights\" in str(e) or \"CHAT_ADMIN_REQUIRED\" in str(e):\n`;
  code += `            await message.answer(\"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f\"‚ùå –û—à–∏–±–∫–∞: {e}\")\n`;
  code += `        logging.error(f\"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}\")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer(\"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\")\n`;
  code += `        logging.error(f\"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}\")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}])`;
  if (targetGroupId) {
    condition += ` and str(message.chat.id) == "${targetGroupId}"`;
  } else {
    condition += ` and message.chat.type in ['group', 'supergroup']`;
  }
  
  code += `@dp.message(${condition})\n`;
  code += `async def unmute_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –ì—Ä—É–ø–ø–∞: ${targetGroupId}\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        await bot.restrict_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            permissions=types.ChatPermissions(\n`;
  code += `                can_send_messages=True,\n`;
  code += `                can_send_media_messages=True,\n`;
  code += `                can_send_polls=True,\n`;
  code += `                can_send_other_messages=True,\n`;
  code += `                can_add_web_page_previews=True,\n`;
  code += `                can_change_info=False,\n`;
  code += `                can_invite_users=False,\n`;
  code += `                can_pin_messages=False\n`;
  code += `            )\n`;
  code += `        )\n`;
  code += `        await message.answer(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã")\n`;
  code += `        logging.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateKickUserHandler(node: Node): string {
  let code = `\n# Kick User Handler\n`;
  const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
  const targetGroupId = node.data.targetGroupId || '';
  const synonyms = node.data.synonyms || ['–∫–∏–∫–Ω—É—Ç—å', '–∫–∏–∫', '–∏—Å–∫–ª—é—á–∏—Ç—å'];
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kick_user
  code += `@dp.message(Command("kick_user"))\n`;
  code += `async def kick_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kick_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ban + unban)\n`;
  code += `        await bot.ban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è\n`;
  code += `        await bot.unban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            only_if_banned=True\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏: {e}")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}])`;
  if (targetGroupId) {
    condition += ` and str(message.chat.id) == "${targetGroupId}"`;
  } else {
    condition += ` and message.chat.type in ['group', 'supergroup']`;
  }
  
  code += `@dp.message(${condition})\n`;
  code += `async def kick_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
  } else {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã (–∫–∏–∫)\n`;
  code += `        await bot.ban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            revoke_messages=False  # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n`;
  code += `        import asyncio\n`;
  code += `        await asyncio.sleep(0.5)\n`;
  code += `        \n`;
  code += `        # –°—Ä–∞–∑—É –∂–µ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ\n`;
  code += `        await bot.unban_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            only_if_banned=True\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generatePromoteUserHandler(node: Node): string {
  let code = `\n# Promote User Handler\n`;

  const targetGroupId = node.data.targetGroupId || '';
  const synonyms = node.data.synonyms || ['–ø–æ–≤—ã—Å–∏—Ç—å', '–∞–¥–º–∏–Ω', '–Ω–∞–∑–Ω–∞—á–∏—Ç—å'];
  
  // Admin rights
  const canChangeInfo = node.data.canChangeInfo || false;
  const canDeleteMessages = node.data.canDeleteMessages || true;
  const canBanUsers = node.data.canBanUsers || false;
  const canInviteUsers = node.data.canInviteUsers || true;
  const canPinMessages = node.data.canPinMessages || true;
  const canAddAdmins = node.data.canAddAdmins || false;
  const canRestrictMembers = node.data.canRestrictMembers || false;
  const canPromoteMembers = node.data.canPromoteMembers || false;
  const canManageVideoChats = node.data.canManageVideoChats || false;
  const canManageTopics = node.data.canManageTopics || false;
  const isAnonymous = node.data.isAnonymous || false;
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promote_user
  code += `@dp.message(Command("promote_user"))\n`;
  code += `async def promote_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /promote_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ü–æ–≤—ã—à–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞\n`;
  code += `        await bot.promote_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            can_change_info=${canChangeInfo ? 'True' : 'False'},\n`;
  code += `            can_delete_messages=${canDeleteMessages ? 'True' : 'False'},\n`;
  code += `            can_invite_users=${canInviteUsers ? 'True' : 'False'},\n`;
  code += `            can_restrict_members=${canRestrictMembers ? 'True' : 'False'},\n`;
  code += `            can_pin_messages=${canPinMessages ? 'True' : 'False'},\n`;
  code += `            can_promote_members=${canPromoteMembers ? 'True' : 'False'},\n`;
  code += `            can_manage_video_chats=${canManageVideoChats ? 'True' : 'False'},\n`;
  if (canManageTopics) {
    code += `            can_manage_topics=${canManageTopics ? 'True' : 'False'},\n`;
  }
  code += `            is_anonymous=${isAnonymous ? 'True' : 'False'}\n`;
  code += `        )\n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}])`;
  if (targetGroupId) {
    condition += ` and str(message.chat.id) == "${targetGroupId}"`;
  } else {
    condition += ` and message.chat.type in ['group', 'supergroup']`;
  }
  
  code += `@dp.message(${condition})\n`;
  code += `async def promote_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
  } else {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n`;
  code += `        await bot.promote_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            can_change_info=${canChangeInfo ? 'True' : 'False'},\n`;
  code += `            can_delete_messages=${canDeleteMessages ? 'True' : 'False'},\n`;
  code += `            can_invite_users=${canInviteUsers ? 'True' : 'False'},\n`;
  code += `            can_restrict_members=${canRestrictMembers ? 'True' : 'False'},\n`;
  code += `            can_pin_messages=${canPinMessages ? 'True' : 'False'},\n`;
  code += `            can_promote_members=${canPromoteMembers ? 'True' : 'False'},\n`;
  code += `            can_manage_video_chats=${canManageVideoChats ? 'True' : 'False'},\n`;
  if (canManageTopics) {
    code += `            can_manage_topics=${canManageTopics ? 'True' : 'False'},\n`;
  }
  code += `            is_anonymous=${isAnonymous ? 'True' : 'False'}\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤\n`;
  code += `        rights = []\n`;
  if (canChangeInfo) code += `        rights.append("–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")\n`;
  if (canDeleteMessages) code += `        rights.append("—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")\n`;
  if (canBanUsers) code += `        rights.append("–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")\n`;
  if (canInviteUsers) code += `        rights.append("–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")\n`;
  if (canPinMessages) code += `        rights.append("–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")\n`;
  if (canRestrictMembers) code += `        rights.append("–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")\n`;
  if (canPromoteMembers) code += `        rights.append("–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")\n`;
  if (canManageVideoChats) code += `        rights.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞–º–∏")\n`;
  if (canManageTopics) code += `        rights.append("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")\n`;
  
  code += `        rights_text = ", ".join(rights) if rights else "–±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"\n`;
  code += `        \n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\\n–ü—Ä–∞–≤–∞: {rights_text}")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateDemoteUserHandler(node: Node): string {
  let code = `\n# Demote User Handler\n`;

  const targetGroupId = node.data.targetGroupId || '';
  const synonyms = node.data.synonyms || ['–ø–æ–Ω–∏–∑–∏—Ç—å', '—Å–Ω—è—Ç—å —Å –∞–¥–º–∏–Ω–∫–∏', '–¥–µ–º–æ—É—Ç'];
  
  // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const synonymsList = Array.isArray(synonyms) ? synonyms.map((s: string) => s.trim().toLowerCase()).filter((s: string) => s) : synonyms.split(',').map((s: string) => s.trim().toLowerCase()).filter((s: string) => s);
  const synonymsPattern = synonymsList.map((s: string) => `"${s}"`).join(', ');
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /demote_user
  code += `@dp.message(Command("demote_user"))\n`;
  code += `async def demote_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_command_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /demote_user\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–∞\n`;
  code += `    if message.chat.type not in ['group', 'supergroup']:\n`;
  code += `        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –ü–æ–Ω–∏–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n`;
  code += `        await bot.promote_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            can_change_info=False,\n`;
  code += `            can_delete_messages=False,\n`;
  code += `            can_invite_users=False,\n`;
  code += `            can_restrict_members=False,\n`;
  code += `            can_pin_messages=False,\n`;
  code += `            can_promote_members=False,\n`;
  code += `            can_manage_video_chats=False,\n`;
  code += `            can_manage_topics=False,\n`;
  code += `            is_anonymous=False\n`;
  code += `        )\n`;
  code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–Ω–∏–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: {e}")\n`;
  code += `\n`;
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ —Å —É—á—ë—Ç–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  let condition = `lambda message: message.text and any(message.text.lower().startswith(word) for word in [${synonymsPattern}])`;
  if (targetGroupId) {
    condition += ` and str(message.chat.id) == "${targetGroupId}"`;
  } else {
    condition += ` and message.chat.type in ['group', 'supergroup']`;
  }
  
  code += `@dp.message(${condition})\n`;
  code += `async def demote_user_${node.id.replace(/[^a-zA-Z0-9_]/g, '_')}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    –°–∏–Ω–æ–Ω–∏–º—ã: ${synonyms}\n`;
  if (targetGroupId) {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ ${targetGroupId}\n`;
  } else {
    code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≥–¥–µ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  }
  code += `    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ ID\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `    else:\n`;
  code += `        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏\n`;
  code += `        if message.entities:\n`;
  code += `            for entity in message.entities:\n`;
  code += `                if entity.type == "text_mention":\n`;
  code += `                    target_user_id = entity.user.id\n`;
  code += `                    break\n`;
  code += `        if not target_user_id:\n`;
  code += `            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")\n`;
  code += `            return\n`;
  
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")\n`;
  code += `        return\n`;
  code += `    \n`;
  code += `    try:\n`;
  code += `        # –°–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
  code += `        await bot.promote_chat_member(\n`;
  code += `            chat_id=chat_id,\n`;
  code += `            user_id=target_user_id,\n`;
  code += `            can_change_info=False,\n`;
  code += `            can_delete_messages=False,\n`;
  code += `            can_invite_users=False,\n`;
  code += `            can_restrict_members=False,\n`;
  code += `            can_pin_messages=False,\n`;
  code += `            can_promote_members=False,\n`;
  code += `            can_manage_video_chats=False,\n`;
  code += `            can_manage_topics=False,\n`;
  code += `            is_anonymous=False\n`;
  code += `        )\n`;
  code += `        \n`;
  code += `        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")\n`;
  code += `        logging.info(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}")\n`;
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateUserManagementSynonymHandler(node: Node, synonym: string): string {
  const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
  const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
  
  let code = `\n@dp.message(lambda message: message.text and (message.text.lower() == "${synonym.toLowerCase()}" or message.text.lower().startswith("${synonym.toLowerCase()} ")) and message.chat.type in ['group', 'supergroup'])\n`;
  code += `async def ${node.type}_${sanitizedNodeId}_synonym_${sanitizedSynonym}_handler(message: types.Message):\n`;
  code += `    """\n`;
  code += `    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–Ω–æ–Ω–∏–º–∞ '${synonym}' –¥–ª—è ${node.type}\n`;
  code += `    –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    """\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    chat_id = message.chat.id\n`;
  code += `    \n`;
  code += `    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `    target_user_id = None\n`;
  code += `    \n`;
  code += `    if message.reply_to_message:\n`;
  code += `        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ\n`;
  code += `        target_user_id = message.reply_to_message.from_user.id\n`;
  code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '${synonym}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (—á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç)")\n`;
  code += `    else:\n`;
  code += `        # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
  code += `        text_parts = message.text.split()\n`;
  code += `        if len(text_parts) > 1 and text_parts[1].isdigit():\n`;
  code += `            target_user_id = int(text_parts[1])\n`;
  code += `            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É '${synonym}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} (—á–µ—Ä–µ–∑ ID)")\n`;
  code += `        else:\n`;
  code += `            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '${synonym} ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'")\n`;
  code += `            return\n`;
  code += `    \n`;
  code += `    if not target_user_id:\n`;
  code += `        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")\n`;
  code += `        return\n`;
  code += `    \n`;
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–∑–ª–∞
  code += `    try:\n`;
  if (node.type === 'ban_user') {
    const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
    const untilDate = node.data.untilDate || 0;
    
    if (untilDate && untilDate > 0) {
      code += `        await bot.ban_chat_member(chat_id=chat_id, user_id=target_user_id, until_date=${untilDate})\n`;
      code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ ${untilDate}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
    } else {
      code += `        await bot.ban_chat_member(chat_id=chat_id, user_id=target_user_id)\n`;
      code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
    }
    code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  } else if (node.type === 'unban_user') {
    code += `        await bot.unban_chat_member(chat_id=chat_id, user_id=target_user_id, only_if_banned=True)\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")\n`;
    code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  } else if (node.type === 'kick_user') {
    const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
    code += `        await bot.ban_chat_member(chat_id=chat_id, user_id=target_user_id)\n`;
    code += `        await bot.unban_chat_member(chat_id=chat_id, user_id=target_user_id)\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
    code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –∏—Å–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  } else if (node.type === 'mute_user') {
    const duration = node.data.duration || 3600;
    const reason = node.data.reason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –≥—Ä—É–ø–ø—ã';
    const canSendMessages = node.data.canSendMessages || false;
    const canSendMediaMessages = node.data.canSendMediaMessages || false;
    
    code += `        from datetime import datetime, timedelta\n`;
    code += `        until_date = datetime.now() + timedelta(seconds=${duration})\n`;
    code += `        await bot.restrict_chat_member(\n`;
    code += `            chat_id=chat_id, user_id=target_user_id,\n`;
    code += `            permissions=types.ChatPermissions(\n`;
    code += `                can_send_messages=${canSendMessages ? 'True' : 'False'},\n`;
    code += `                can_send_media_messages=${canSendMediaMessages ? 'True' : 'False'}\n`;
    code += `            ), until_date=until_date\n`;
    code += `        )\n`;
    code += `        hours = ${duration} // 3600\n`;
    code += `        minutes = (${duration} % 3600) // 60\n`;
    code += `        time_str = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –Ω–∞ {time_str}\\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}")\n`;
    code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  } else if (node.type === 'unmute_user') {
    code += `        await bot.restrict_chat_member(\n`;
    code += `            chat_id=chat_id, user_id=target_user_id,\n`;
    code += `            permissions=types.ChatPermissions(\n`;
    code += `                can_send_messages=True, can_send_media_messages=True,\n`;
    code += `                can_send_polls=True, can_send_other_messages=True,\n`;
    code += `                can_add_web_page_previews=True\n`;
    code += `            )\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã")\n`;
    code += `        logging.info(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  } else if (node.type === 'promote_user') {
    const canDeleteMessages = node.data.canDeleteMessages !== false;
    const canInviteUsers = node.data.canInviteUsers !== false;
    const canPinMessages = node.data.canPinMessages !== false;
    
    code += `        await bot.promote_chat_member(\n`;
    code += `            chat_id=chat_id, user_id=target_user_id,\n`;
    code += `            can_delete_messages=${canDeleteMessages ? 'True' : 'False'},\n`;
    code += `            can_invite_users=${canInviteUsers ? 'True' : 'False'},\n`;
    code += `            can_pin_messages=${canPinMessages ? 'True' : 'False'}\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")\n`;
    code += `        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")\n`;
  } else if (node.type === 'demote_user') {
    code += `        await bot.promote_chat_member(\n`;
    code += `            chat_id=chat_id, user_id=target_user_id,\n`;
    code += `            can_change_info=False, can_delete_messages=False,\n`;
    code += `            can_invite_users=False, can_restrict_members=False,\n`;
    code += `            can_pin_messages=False, can_promote_members=False\n`;
    code += `        )\n`;
    code += `        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")\n`;
    code += `        logging.info(f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–Ω—è—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {user_id}")\n`;
  }
  
  code += `    except TelegramBadRequest as e:\n`;
  code += `        if "not enough rights" in str(e) or "CHAT_ADMIN_REQUIRED" in str(e):\n`;
  code += `            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏")\n`;
  code += `        else:\n`;
  code += `            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")\n`;
  code += `        logging.error(f"–û—à–∏–±–∫–∞ ${node.type}: {e}")\n`;
  code += `    except Exception as e:\n`;
  code += `        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")\n`;
  code += `        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {node.type}: {e}")\n`;
  code += `\n`;
  
  return code;
}

function generateSynonymHandler(node: Node, synonym: string): string {
  const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
  const originalCommand = node.data.command || (node.type === 'start' ? '/start' : '/help');
  const functionName = originalCommand.replace('/', '').replace(/[^a-zA-Z0-9_]/g, '_');
  
  let code = `\n@dp.message(lambda message: message.text and message.text.lower() == "${synonym.toLowerCase()}")\n`;
  code += `async def ${functionName}_synonym_${sanitizedSynonym}_handler(message: types.Message):\n`;
  code += `    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ${originalCommand}\n`;
  
  if (node.type === 'start') {
    code += '    await start_handler(message)\n';
  } else {
    code += `    await ${functionName}_handler(message)\n`;
  }
  
  return code;
}

function generateMessageSynonymHandler(node: Node, synonym: string): string {
  const sanitizedSynonym = synonym.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9_]/g, '_');
  const sanitizedNodeId = node.id.replace(/[^a-zA-Z0-9_]/g, '_');
  
  let code = `\n@dp.message(lambda message: message.text and message.text.lower() == "${synonym.toLowerCase()}")\n`;
  code += `async def message_${sanitizedNodeId}_synonym_${sanitizedSynonym}_handler(message: types.Message):\n`;
  code += `    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${node.id}\n`;
  code += `    user_id = message.from_user.id\n`;
  code += `    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–ø–∏—Å–∞–ª —Å–∏–Ω–æ–Ω–∏–º '${synonym}' –¥–ª—è —É–∑–ª–∞ ${node.id}")\n`;
  code += `    \n`;
  code += `    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É ${node.id}\n`;
  code += `    # –°–æ–∑–¥–∞–µ–º Mock callback –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏\n`;
  code += `    class MockCallback:\n`;
  code += `        def __init__(self, data, user, msg):\n`;
  code += `            self.data = data\n`;
  code += `            self.from_user = user\n`;
  code += `            self.message = msg\n`;
  code += `        async def answer(self):\n`;
  code += `            pass  # Mock –º–µ—Ç–æ–¥, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º\n`;
  code += `        async def edit_text(self, text, **kwargs):\n`;
  code += `            return await self.message.answer(text, **kwargs)\n`;
  code += `    \n`;
  code += `    mock_callback = MockCallback("${node.id}", message.from_user, message)\n`;
  code += `    await handle_callback_${sanitizedNodeId}(mock_callback)\n`;
  
  return code;
}

function generateKeyboard(node: Node): string {
  let code = '';
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  if (node.data.enableConditionalMessages && node.data.conditionalMessages && node.data.conditionalMessages.length > 0) {
    code += generateUniversalVariableReplacement('    ');
    code += '    text = replace_variables_in_text(text, user_vars)\n';
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
    code += '    user_record = await get_user_from_db(user_id)\n';
    code += '    if not user_record:\n';
    code += '        user_record = user_data.get(user_id, {})\n';
    code += '    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n';
    code += generateConditionalMessageLogic(node.data.conditionalMessages, '    ');
    code += '    \n';
    
    // Use conditional message if available, otherwise use default text
    code += '    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É—Å–ª–æ–≤–∏–µ\n';
    code += '    if "text" not in locals():\n';
    code += '        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ\n';
    code += '        pass  # text —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ\n';
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
    code += '    use_conditional_keyboard = conditional_keyboard is not None\n';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
  code += '    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —É—Å–ª–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)\n';
  code += '    if "conditional_parse_mode" in locals() and conditional_parse_mode is not None:\n';
  code += '        current_parse_mode = conditional_parse_mode\n';
  code += '    else:\n';
  if (node.data.formatMode === 'markdown' || node.data.markdown === true) {
    code += '        current_parse_mode = ParseMode.MARKDOWN\n';
  } else if (node.data.formatMode === 'html') {
    code += '        current_parse_mode = ParseMode.HTML\n';
  } else {
    code += '        current_parse_mode = None\n';
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º parseMode —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
  let parseMode = '';
  if (node.data.formatMode === 'markdown' || node.data.markdown === true || node.data.formatMode === 'html') {
    parseMode = ', parse_mode=current_parse_mode';
  } else {
    // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª—è–µ–º parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    parseMode = ', parse_mode=current_parse_mode if current_parse_mode else None';
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º use_conditional_keyboard –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤
  if (!node.data.enableConditionalMessages || !node.data.conditionalMessages || node.data.conditionalMessages.length === 0) {
    code += '    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n';
    code += '    use_conditional_keyboard = False\n';
    code += '    conditional_keyboard = None\n';
  }

  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–±–æ—Ä –≤–≤–æ–¥–∞ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫ –æ–±—ã—á–Ω—ã–º –∫–Ω–æ–ø–∫–∞–º
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É —É–∑–ª–∞
  const hasRegularButtons = node.data.keyboardType !== "none" && node.data.buttons && node.data.buttons.length > 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –ò–õ–ò —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
  const hasInputCollection = node.data.collectUserInput === true || node.data.enableTextInput === true;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Python –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ)
  code += `    has_regular_buttons = ${toPythonBoolean(hasRegularButtons)}\n`;
  code += `    has_input_collection = ${toPythonBoolean(hasInputCollection)}\n`;
  code += `    logging.info(f"DEBUG: generateKeyboard –¥–ª—è —É–∑–ª–∞ ${node.id} - hasRegularButtons={has_regular_buttons}, hasInputCollection={has_input_collection}, collectUserInput=${node.data.collectUserInput}, enableTextInput=${node.data.enableTextInput}")\n`;
  
  // CASE 1: –ï—Å—Ç—å –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ + —Å–±–æ—Ä –≤–≤–æ–¥–∞ = –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç—ã
  if (hasRegularButtons && hasInputCollection) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
    code += '    if use_conditional_keyboard:\n';
    code += '        await message.answer(text, reply_markup=conditional_keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n';
    code += '    else:\n';
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ
    if (node.data.keyboardType === "reply") {
      code += '        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)\n';
      code += '        builder = ReplyKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "contact" && button.requestContact) {
          code += `        builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
        } else if (button.action === "location" && button.requestLocation) {
          code += `        builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
        } else {
          code += `        builder.add(KeyboardButton(text="${button.text}"))\n`;
        }
      });
      
      const resizeKeyboard = toPythonBoolean(node.data.resizeKeyboard);
      const oneTimeKeyboard = toPythonBoolean(node.data.oneTimeKeyboard);
      code += `        keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
      code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
      
    } else if (node.data.keyboardType === "inline") {
      code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (+ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω)\n';
      code += '        builder = InlineKeyboardBuilder()\n';
      node.data.buttons.forEach(button => {
        if (button.action === "url") {
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
        } else if (button.action === 'goto') {
          const callbackData = button.target || button.id || 'no_action';
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
        } else if (button.action === 'command') {
          const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
          code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
        }
      });
      
      code += '        builder.adjust(2)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏\n';
      code += '        keyboard = builder.as_markup()\n';
      code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–±–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    code += '    \n';
    code += '    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è —É–∑–ª–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n';
    code += '    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})\n';
    const inputType = node.data.inputType || 'text';
    const inputVariable = node.data.inputVariable || `response_${node.id}`;
    const inputTargetNodeId = node.data.inputTargetNodeId || '';
    code += `    user_data[message.from_user.id]["waiting_for_input"] = {\n`;
    code += `        "type": "${inputType}",\n`;
    code += `        "variable": "${inputVariable}",\n`;
    code += '        "save_to_database": True,\n';
    code += `        "node_id": "${node.id}",\n`;
    code += `        "next_node_id": "${inputTargetNodeId}",\n`;
    code += `        "min_length": ${node.data.minLength || 0},\n`;
    code += `        "max_length": ${node.data.maxLength || 0},\n`;
    code += '        "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
    code += '        "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
    code += '    }\n';
    code += `    logging.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è —É–∑–ª–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: ${inputType} –≤–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${inputVariable} (—É–∑–µ–ª ${node.id})")\n`;
    
    return code;
  }
  
  // CASE 2: –¢–æ–ª—å–∫–æ —Å–±–æ—Ä –≤–≤–æ–¥–∞ –ë–ï–ó –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ = —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
  else if (!hasRegularButtons && hasInputCollection) {
    
    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
    if (node.data.responseType === 'buttons' && node.data.responseOptions && node.data.responseOptions.length > 0) {
      const buttonType = node.data.inputButtonType || 'inline';
      
      if (buttonType === 'reply') {
        code += '    \n';
        code += '    # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤\n';
        code += '    builder = ReplyKeyboardBuilder()\n';
        node.data.responseOptions.forEach(option => {
          code += `    builder.add(KeyboardButton(text="${option.text}"))\n`;
        });
        const resizeKeyboard = toPythonBoolean(node.data.resizeKeyboard);
        const oneTimeKeyboard = toPythonBoolean(node.data.oneTimeKeyboard);
        code += `    keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
        code += `    await message.answer(text, reply_markup=keyboard${parseMode})\n`;
        
      } else {
        // inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
        code += '    \n';
        code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤\n';
        code += '    builder = InlineKeyboardBuilder()\n';
        node.data.responseOptions.forEach(option => {
          const callbackData = `input_${node.id}_${option.id}`;
          code += `    builder.add(InlineKeyboardButton(text="${option.text}", callback_data="${callbackData}"))\n`;
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        const columns = calculateOptimalColumns(node.data.responseOptions, node.data);
        code += `    builder.adjust(${columns})\n`;
        code += '    keyboard = builder.as_markup()\n';
        code += `    await message.answer(text, reply_markup=keyboard${parseMode})\n`;
      }
      
    } else {
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
      code += `    await message.answer(text${parseMode})\n`;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    code += '    \n';
    code += '    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π\n';
    code += '    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})\n';
    const inputType = node.data.inputType || 'text';
    const inputVariable = node.data.inputVariable || `response_${node.id}`;
    const inputTargetNodeId = node.data.inputTargetNodeId || '';
    code += `    user_data[message.from_user.id]["waiting_for_input"] = {\n`;
    code += `        "type": "${inputType}",\n`;
    code += `        "variable": "${inputVariable}",\n`;
    code += '        "save_to_database": True,\n';
    code += `        "node_id": "${node.id}",\n`;
    code += `        "next_node_id": "${inputTargetNodeId}",\n`;
    code += `        "min_length": ${node.data.minLength || 0},\n`;
    code += `        "max_length": ${node.data.maxLength || 0},\n`;
    code += '        "retry_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",\n';
    code += '        "success_message": "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!"\n';
    code += '    }\n';
    code += `    logging.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: ${inputType} –≤–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ${inputVariable} (—É–∑–µ–ª ${node.id})")\n`;
    
    return code;
  }
  
  // CASE 3: –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ë–ï–ó —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞ = —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  else {
    code += `    # DEBUG: –£–∑–µ–ª ${node.id} - hasRegularButtons=${toPythonBoolean(hasRegularButtons)}, hasInputCollection=${toPythonBoolean(hasInputCollection)}\n`;
    code += `    logging.info(f"DEBUG: –£–∑–µ–ª ${node.id} –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - keyboardType=${node.data.keyboardType}, buttons=${node.data.buttons ? node.data.buttons.length : 0}")\n`;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å–ª–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    code += '    \n';
    code += '    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n';
    code += '    if use_conditional_keyboard:\n';
    code += '        await message.answer(text, reply_markup=conditional_keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n';
    code += '    else:\n';
    
    if (node.data.keyboardType === "reply" && node.data.buttons.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
      if (node.data.allowMultipleSelection) {
        code += '        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
        code += '        builder = ReplyKeyboardBuilder()\n';
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        const selectionButtons = node.data.buttons.filter(button => button.action === 'selection');
        const regularButtons = node.data.buttons.filter(button => button.action !== 'selection');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        selectionButtons.forEach(button => {
          code += `        builder.add(KeyboardButton(text="${button.text}"))\n`;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        regularButtons.forEach(button => {
          if (button.action === "contact" && button.requestContact) {
            code += `        builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
          } else if (button.action === "location" && button.requestLocation) {
            code += `        builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
          } else {
            code += `        builder.add(KeyboardButton(text="${button.text}"))\n`;
          }
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
        if (selectionButtons.length > 0) {
          const continueText = node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
          code += `        builder.add(KeyboardButton(text="${continueText}"))\n`;
        }
        
        const resizeKeyboard = toPythonBoolean(node.data.resizeKeyboard);
        const oneTimeKeyboard = toPythonBoolean(node.data.oneTimeKeyboard);
        code += `        keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
        code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if (selectionButtons.length > 0) {
          code += '        \n';
          code += '        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
          code += '        user_data[message.from_user.id] = user_data.get(message.from_user.id, {})\n';
          code += `        user_data[message.from_user.id]["multi_select_${node.id}"] = []\n`;
          code += `        user_data[message.from_user.id]["multi_select_node"] = "${node.id}"\n`;
          code += `        user_data[message.from_user.id]["multi_select_type"] = "reply"\n`;
        }
      } else {
        // –û–±—ã—á–Ω–∞—è reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        code += '        builder = ReplyKeyboardBuilder()\n';
        node.data.buttons.forEach(button => {
          if (button.action === "contact" && button.requestContact) {
            code += `        builder.add(KeyboardButton(text="${button.text}", request_contact=True))\n`;
          } else if (button.action === "location" && button.requestLocation) {
            code += `        builder.add(KeyboardButton(text="${button.text}", request_location=True))\n`;
          } else {
            code += `        builder.add(KeyboardButton(text="${button.text}"))\n`;
          }
        });
        
        const resizeKeyboard = toPythonBoolean(node.data.resizeKeyboard);
        const oneTimeKeyboard = toPythonBoolean(node.data.oneTimeKeyboard);
        code += `        keyboard = builder.as_markup(resize_keyboard=${resizeKeyboard}, one_time_keyboard=${oneTimeKeyboard})\n`;
        code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
      }
    } else if (node.data.keyboardType === "inline" && node.data.buttons.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
      if (node.data.allowMultipleSelection) {
        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ user_vars
        code += generateUniversalVariableReplacement('        ');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        const multiSelectVariable = node.data.multiSelectVariable || 'user_interests';
        
        code += '        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è\n';
        code += '        if user_id not in user_data:\n';
        code += '            user_data[user_id] = {}\n';
        code += '        \n';
        code += '        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n';
        code += '        saved_interests = []\n';
        code += '        if user_vars:\n';
        code += '            # –ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤ –ª—é–±–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –∏—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—å\n';
        code += '            for var_name, var_data in user_vars.items():\n';
        code += '                if "–∏–Ω—Ç–µ—Ä–µ—Å" in var_name.lower() or var_name == "interests" or var_name == "' + multiSelectVariable + '":\n';
        code += '                    if isinstance(var_data, dict) and "value" in var_data:\n';
        code += '                        interests_str = var_data["value"]\n';
        code += '                    elif isinstance(var_data, str):\n';
        code += '                        interests_str = var_data\n';
        code += '                    else:\n';
        code += '                        interests_str = str(var_data) if var_data else ""\n';
        code += '                    \n';
        code += '                    if interests_str:\n';
        code += '                        saved_interests = [interest.strip() for interest in interests_str.split(",")]\n';
        code += '                        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –ë–î: {saved_interests}")\n';
        code += '                        break\n';
        code += '        \n';
        code += '        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏\n';
        code += `        user_data[user_id]["multi_select_${node.id}"] = saved_interests.copy()\n`;
        code += `        user_data[user_id]["multi_select_node"] = "${node.id}"\n`;
        code += '        logging.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å {len(saved_interests)} –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏")\n';
        code += '        \n';
        
        code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞\n';
        code += '        builder = InlineKeyboardBuilder()\n';
        
        // –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∏ –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        const selectionButtons = node.data.buttons.filter(button => button.action === 'selection');
        const regularButtons = node.data.buttons.filter(button => button.action !== 'selection');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å –ª–æ–≥–∏–∫–æ–π –≥–∞–ª–æ—á–µ–∫
        selectionButtons.forEach(button => {
          const buttonValue = button.target || button.id || button.text;
          const safeVarName = buttonValue.toLowerCase().replace(/[^a-z0-9]/g, '_');
          code += `        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω\n`;
          code += `        logging.info(f"üîß /START: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ '${button.text}' –≤ —Å–ø–∏—Å–∫–µ: {saved_interests}")\n`;
          code += `        ${safeVarName}_selected = "${button.text}" in saved_interests\n`;
          code += `        logging.info(f"üîç /START: –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è '${button.text}': selected={${safeVarName}_selected}")\n`;
          code += `        ${safeVarName}_text = "‚úÖ ${button.text}" if ${safeVarName}_selected else "${button.text}"\n`;
          code += `        logging.info(f"üì± /START: –°–û–ó–î–ê–ï–ú –ö–ù–û–ü–ö–£: text='{${safeVarName}_text}'")\n`;
          code += `        builder.add(InlineKeyboardButton(text=${safeVarName}_text, callback_data="multi_select_start_${buttonValue}"))\n`;
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        regularButtons.forEach(button => {
          if (button.action === "url") {
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
          } else if (button.action === 'goto') {
            const callbackData = button.target || button.id || 'no_action';
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
          } else if (button.action === 'command') {
            const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
          }
        });
        code += '        \n';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
        if (selectionButtons.length > 0) {
          const continueText = node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ';
          code += `        builder.add(InlineKeyboardButton(text="${continueText}", callback_data="multi_select_done_${node.id}"))\n`;
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏: —Å–µ–ª–µ–∫—Ü–∏–∏ + —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ + "–ì–æ—Ç–æ–≤–æ"
        const allButtons = [...selectionButtons, ...regularButtons];
        if (selectionButtons.length > 0) {
          allButtons.push({ text: node.data.continueButtonText || '–ì–æ—Ç–æ–≤–æ' });
        }
        const columns = calculateOptimalColumns(allButtons, node.data);
        code += `        builder.adjust(${columns})\n`;
        code += '        keyboard = builder.as_markup()\n';
        code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      } else {
        // –û–±—ã—á–Ω–∞—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        code += '        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n';
        code += `        logging.info(f"DEBUG: –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∑–ª–∞ ${node.id} —Å ${node.data.buttons ? node.data.buttons.length : 0} –∫–Ω–æ–ø–∫–∞–º–∏")\n`;
        code += '        builder = InlineKeyboardBuilder()\n';
        node.data.buttons.forEach(button => {
          if (button.action === "url") {
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", url="${button.url || '#'}"))\n`;
          } else if (button.action === 'goto') {
            // –ï—Å–ª–∏ –µ—Å—Ç—å target, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ callback_data
            const callbackData = button.target || button.id || 'no_action';
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${callbackData}"))\n`;
          } else if (button.action === 'command') {
            // –î–ª—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é callback_data
            const commandCallback = `cmd_${button.target ? button.target.replace('/', '') : 'unknown'}`;
            code += `        builder.add(InlineKeyboardButton(text="${button.text}", callback_data="${commandCallback}"))\n`;
          }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
        const columns = calculateOptimalColumns(node.data.buttons, node.data);
        code += `        builder.adjust(${columns})\n`;
        code += '        keyboard = builder.as_markup()\n';
        code += `        await message.answer(text, reply_markup=keyboard${parseMode})\n`;
      }
    } else {
      // –ë–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      code += `        await message.answer(text${parseMode})\n`;
    }
  }
  
  return code;
}

export function validateBotStructure(botData: BotData): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  const { nodes, connections } = botData;

  // Check if there's a start node
  const startNodes = (nodes || []).filter(node => node.type === 'start');
  if (startNodes.length === 0) {
    errors.push("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É");
  }
  if (startNodes.length > 1) {
    errors.push("–ë–æ—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É");
  }

  // Validate each node
  nodes.forEach(node => {
    if (!node.data.messageText && node.type !== 'condition') {
      errors.push(`–£–∑–µ–ª "${node.id}" –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è`);
    }

    // Validate commands
    if ((node.type === 'start' || node.type === 'command') && node.data.command) {
      const commandValidation = validateCommand(node.data.command);
      if (!commandValidation.isValid) {
        errors.push(...commandValidation.errors.map(err => `–ö–æ–º–∞–Ω–¥–∞ "${node.data.command}": ${err}`));
      }
    }

    // Validate buttons
    node.data.buttons.forEach(button => {
      if (!button.text.trim()) {
        errors.push(`–ö–Ω–æ–ø–∫–∞ –≤ —É–∑–ª–µ "${node.id}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç`);
      }
      if (button.action === 'url' && !button.url) {
        errors.push(`–ö–Ω–æ–ø–∫–∞ "${button.text}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL`);
      }
      if (button.action === 'goto' && !button.target) {
        errors.push(`–ö–Ω–æ–ø–∫–∞ "${button.text}" –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∞`);
      }
    });
  });

  return {
    isValid: errors.length === 0,
    errors
  };
}

function validateCommand(command: string): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (!command) {
    errors.push('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π');
    return { isValid: false, errors };
  }
  
  if (!command.startsWith('/')) {
    errors.push('–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ "/"');
  }
  
  if (command.length < 2) {
    errors.push('–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ "/"');
  }
  
  if (command.length > 32) {
    errors.push('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
  const validPattern = /^\/[a-zA-Z][a-zA-Z0-9_]*$/;
  if (!validPattern.test(command)) {
    errors.push('–ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è');
  }
  
  return {
    isValid: errors.length === 0,
    errors
  };
}

export function generateRequirementsTxt(): string {
  const lines = [
    '# Telegram Bot Requirements - Updated compatible versions',
    '# Install with: pip install -r requirements.txt',
    '# If you get Rust compilation errors, use: pip install --only-binary=all -r requirements.txt',
    '',
    '# Core dependencies (using newer versions to avoid Rust compilation issues)',
    'aiogram>=3.21.0',
    'aiohttp>=3.12.13',
    'requests>=2.32.4',
    'python-dotenv>=1.0.0',
    'aiofiles>=23.2.1',
    'asyncpg>=0.29.0',
    '',
    '# Note: These versions have pre-compiled wheels and do not require Rust',
    '# If you still encounter issues, try:',
    '# pip install --upgrade pip setuptools wheel',
    '# pip install --only-binary=all aiogram aiohttp requests python-dotenv aiofiles asyncpg',
    '',
    '# Optional dependencies for extended functionality',
    '# redis>=5.0.1  # For session storage',
    '# motor>=3.3.2  # For MongoDB',
    '# pillow>=10.1.0  # For image processing'
  ];
  return lines.join('\n');
}

export function generateReadme(botData: BotData, botName: string): string {
  const commandNodes = (botData.nodes || []).filter(node => 
    (node.type === 'start' || node.type === 'command') && node.data.command
  );
  
  let readme = '# ' + botName + '\n\n';
  readme += 'Telegram –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é TelegramBot Builder.\n\n';
  readme += '## –û–ø–∏—Å–∞–Ω–∏–µ\n\n';
  readme += '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç ' + botData.nodes.length + ' —É–∑–ª–æ–≤ –∏ ' + botData.connections.length + ' —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.\n\n';
  readme += '### –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n';

  commandNodes.forEach(node => {
    const command = node.data.command || '/unknown';
    const description = node.data.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    readme += '- `' + command + '` - ' + description + '\n';
    
    if (node.data.adminOnly) {
      readme += '  - üîí –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n';
    }
    if (node.data.isPrivateOnly) {
      readme += '  - üë§ –¢–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö\n';
    }
    if (node.data.requiresAuth) {
      readme += '  - üîê –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n';
    }
  });

  readme += '\n## –£—Å—Ç–∞–Ω–æ–≤–∫–∞\n\n';
  readme += '1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞\n';
  readme += '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:\n';
  readme += '   ```bash\n';
  readme += '   pip install -r requirements.txt\n';
  readme += '   ```\n\n';
  readme += '3. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª `.env` –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n';
  readme += '   ```\n';
  readme += '   BOT_TOKEN=your_bot_token_here\n';
  readme += '   DATABASE_URL=postgresql://user:password@localhost:5432/bot_db\n';
  readme += '   ```\n\n';
  readme += '4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):\n';
  readme += '   - –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL\n';
  readme += '   - –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ\n';
  readme += '   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n';
  readme += '   - –ï—Å–ª–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n\n';
  readme += '5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:\n';
  readme += '   ```bash\n';
  readme += '   python bot.py\n';
  readme += '   ```\n\n';
  
  readme += '## –ù–∞—Å—Ç—Ä–æ–π–∫–∞\n\n';
  readme += '### –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞\n\n';
  readme += '1. –ù–∞–π–¥–∏—Ç–µ [@BotFather](https://t.me/BotFather) –≤ Telegram\n';
  readme += '2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/newbot`\n';
  readme += '3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞\n';
  readme += '4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n\n';
  
  readme += '### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ @BotFather\n\n';
  readme += '1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/setcommands` –≤ @BotFather\n';
  readme += '2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞\n';
  readme += '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';
  readme += '```\n';
  readme += generateBotFatherCommands(botData.nodes);
  readme += '\n```\n\n';
  
  readme += '## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞\n\n';
  readme += '- `bot.py` - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞\n';
  readme += '- `requirements.txt` - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python\n';
  readme += '- `config.yaml` - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n';
  readme += '- `README.md` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n';
  readme += '- `Dockerfile` - –î–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n\n';
  
  readme += '## –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n\n';
  readme += '### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n';
  readme += '- **–í—Å–µ–≥–æ —É–∑–ª–æ–≤**: ' + botData.nodes.length + '\n';
  readme += '- **–ö–æ–º–∞–Ω–¥**: ' + commandNodes.length + '\n';
  readme += '- **–°–æ–æ–±—â–µ–Ω–∏–π**: ' + (botData.nodes || []).filter(n => n.type === 'message').length + '\n';
  readme += '- **–§–æ—Ç–æ**: ' + (botData.nodes || []).filter(n => n.type === 'photo').length + '\n';
  readme += '- **–ö–Ω–æ–ø–æ–∫**: ' + botData.nodes.reduce((sum, node) => sum + node.data.buttons.length, 0) + '\n\n';
  
  readme += '### –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n';
  readme += '–ë–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n';
  readme += '- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤\n';
  readme += '- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã\n';
  readme += '- –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n';
  
  readme += '## –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n\n';
  readme += '–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:\n';
  readme += '- [aiogram 3.x](https://docs.aiogram.dev/) - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Telegram Bot API\n';
  readme += '- Python 3.8+\n';
  readme += '- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n';
  
  readme += '## –õ–∏—Ü–µ–Ω–∑–∏—è\n\n';
  readme += '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é TelegramBot Builder\n';

  return readme;
}

export function generateDockerfile(): string {
  const lines = [
    '# Dockerfile –¥–ª—è Telegram –±–æ—Ç–∞',
    'FROM python:3.11-slim',
    '',
    '# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    'RUN apt-get update && apt-get install -y \\',
    '    gcc \\',
    '    && rm -rf /var/lib/apt/lists/*',
    '',
    '# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏',
    'WORKDIR /app',
    '',
    '# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements.txt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    'COPY requirements.txt .',
    'RUN pip install --no-cache-dir -r requirements.txt',
    '',
    '# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞',
    'COPY . .',
    '',
    '# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    'RUN adduser --disabled-password --gecos \'\' botuser',
    'RUN chown -R botuser:botuser /app',
    'USER botuser',
    '',
    '# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
    'CMD ["python", "bot.py"]'
  ];
  return lines.join('\n');
}

export function generateConfigYaml(botName: string): string {
  const lines = [
    '# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞',
    'bot:',
    '  name: "' + botName + '"',
    '  description: "Telegram –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é TelegramBot Builder"',
    '',
    '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
    'logging:',
    '  level: INFO',
    '  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"',
    '',
    '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
    'database:',
    '  # type: sqlite',
    '  # url: "sqlite:///bot.db"',
    '',
    '  # type: postgresql',
    '  # host: localhost',
    '  # port: 5432',
    '  # name: botdb',
    '  # user: botuser',
    '  # password: botpass',
    '',
    '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)',
    'redis:',
    '  # host: localhost',
    '  # port: 6379',
    '  # db: 0',
    '  # password: ""',
    '',
    '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)',
    'webhook:',
    '  # enabled: false',
    '  # host: "0.0.0.0"',
    '  # port: 8080',
    '  # path: "/webhook"',
    '  # url: "https://yourdomain.com/webhook"',
    '',
    '# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
    'admins:',
    '  - 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
    '',
    '# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
    'settings:',
    '  timezone: "UTC"',
    '  language: "ru"',
    '  debug: false'
  ];
  return lines.join('\n');
}

