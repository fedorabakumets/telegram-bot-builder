import { Node, Connection } from '@/types/bot';

interface LayoutNode extends Node {
  level?: number;
  children?: LayoutNode[];
  visited?: boolean;
}

interface HierarchicalLayoutOptions {
  levelHeight: number;
  nodeWidth: number;
  nodeHeight: number; // –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —É–∑–ª–∞
  horizontalSpacing: number;
  verticalSpacing: number;
  startX: number;
  startY: number;
  nodeSizes?: Map<string, { width: number; height: number }>; // –ö–∞—Ä—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —É–∑–ª–æ–≤
}

const DEFAULT_OPTIONS: HierarchicalLayoutOptions = {
  levelHeight: 150,
  nodeWidth: 320,
  nodeHeight: 120, // –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏—á–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —É–∑–ª–∞
  horizontalSpacing: 150, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 150 –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  verticalSpacing: 120, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 120 –¥–ª—è –ª—É—á—à–µ–≥–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
  startX: 50,
  startY: 50
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —É–∑–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
function getNodeSize(nodeId: string, options: HierarchicalLayoutOptions): { width: number; height: number } {
  const realSize = options.nodeSizes?.get(nodeId);
  return realSize || { width: options.nodeWidth, height: options.nodeHeight };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * @param nodes - –º–∞—Å—Å–∏–≤ —É–∑–ª–æ–≤ –¥–ª—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
 * @param connections - –º–∞—Å—Å–∏–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
 * @param options - –æ–ø—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
 * @returns –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É–∑–ª—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
 */
export function createHierarchicalLayout(
  nodes: Node[], 
  connections: Connection[], 
  options: Partial<HierarchicalLayoutOptions> = {}
): Node[] {
  console.log('üîÑ Hierarchical layout called with', nodes.length, 'nodes, nodeSizes:', !!options.nodeSizes);
  const opts = { ...DEFAULT_OPTIONS, ...options };
  
  if (nodes.length === 0) return nodes;

  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —É–∑–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const layoutNodes: LayoutNode[] = nodes.map(node => ({ 
    ...node, 
    level: 0, 
    children: [], 
    visited: false 
  }));

  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª (–æ–±—ã—á–Ω–æ —Å —Ç–∏–ø–æ–º 'start' –∏–ª–∏ –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
  const startNode = findStartNode(layoutNodes, connections);
  if (!startNode) {
    // –ï—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
    return arrangeNodesLinear(layoutNodes, opts);
  }

  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  buildDependencyTree(layoutNodes, connections, startNode);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
  assignLevels(startNode);

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
  const levels = groupNodesByLevel(layoutNodes);
  
  // –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
  return arrangeNodesByLevel(levels, opts);
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª (—É–∑–µ–ª —Ç–∏–ø–∞ 'start' –∏–ª–∏ —É–∑–µ–ª –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
 */
function findStartNode(nodes: LayoutNode[], connections: Connection[]): LayoutNode | null {
  // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —É–∑–µ–ª —Ç–∏–ø–∞ 'start'
  const startNode = nodes.find(node => node.type === 'start');
  if (startNode) return startNode;

  // –ï—Å–ª–∏ –Ω–µ—Ç —É–∑–ª–∞ 'start', –∏—â–µ–º —É–∑–µ–ª –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const nodeIds = nodes.map(n => n.id);
  const targetIds = new Set(connections.map(c => c.target));
  
  const rootNodes = nodes.filter(node => !targetIds.has(node.id));
  return rootNodes.length > 0 ? rootNodes[0] : nodes[0];
}

/**
 * –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
function buildDependencyTree(nodes: LayoutNode[], connections: Connection[], startNode: LayoutNode) {
  const nodeMap = new Map(nodes.map(node => [node.id, node]));
  
  // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  const graph = new Map<string, string[]>();
  connections.forEach(connection => {
    if (!graph.has(connection.source)) {
      graph.set(connection.source, []);
    }
    graph.get(connection.source)!.push(connection.target);
  });

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
  function buildTree(node: LayoutNode, visited = new Set<string>()) {
    if (visited.has(node.id)) return; // –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–æ–≤
    visited.add(node.id);
    
    const children = graph.get(node.id) || [];
    node.children = children
      .map(childId => nodeMap.get(childId))
      .filter(Boolean) as LayoutNode[];
    
    node.children.forEach(child => buildTree(child, visited));
  }

  buildTree(startNode);
}

/**
 * –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ —É–∑–ª–∞–º –≤ –¥–µ—Ä–µ–≤–µ
 */
function assignLevels(startNode: LayoutNode, level = 0) {
  startNode.level = level;
  startNode.visited = true;
  
  if (startNode.children) {
    startNode.children.forEach(child => {
      if (!child.visited) {
        assignLevels(child, level + 1);
      }
    });
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
 */
function groupNodesByLevel(nodes: LayoutNode[]): LayoutNode[][] {
  const levels: LayoutNode[][] = [];
  
  nodes.forEach(node => {
    const level = node.level || 0;
    if (!levels[level]) {
      levels[level] = [];
    }
    levels[level].push(node);
  });
  
  return levels;
}

/**
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏ —É–∑–ª–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
 */
function fixCollisions(nodes: Node[], options: HierarchicalLayoutOptions): Node[] {
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ —É—Ä–æ–≤–Ω—è–º (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø–æ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
  const levelGroups = new Map<number, Node[]>();
  const levelWidth = options.nodeWidth + options.horizontalSpacing;
  
  nodes.forEach(node => {
    // –û–∫—Ä—É–≥–ª—è–µ–º X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const level = Math.round((node.position.x - options.startX) / levelWidth);
    if (!levelGroups.has(level)) {
      levelGroups.set(level, []);
    }
    levelGroups.get(level)!.push(node);
  });
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏
  levelGroups.forEach((levelNodes) => {
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–∑–ª—ã –ø–æ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    levelNodes.sort((a, b) => a.position.y - b.position.y);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
    for (let i = 1; i < levelNodes.length; i++) {
      const currentNode = levelNodes[i];
      const prevNode = levelNodes[i - 1];
      
      const currentSize = getNodeSize(currentNode.id, options);
      const prevSize = getNodeSize(prevNode.id, options);
      
      const prevBottom = prevNode.position.y + prevSize.height;
      const currentTop = currentNode.position.y;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
      const minSpacing = options.verticalSpacing;
      if (currentTop < prevBottom + minSpacing) {
        // –°–¥–≤–∏–≥–∞–µ–º —Ç–µ–∫—É—â–∏–π —É–∑–µ–ª –≤–Ω–∏–∑
        currentNode.position.y = prevBottom + minSpacing;
      }
    }
  });
  
  return nodes;
}

/**
 * –†–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç —É–∑–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
 */
function arrangeNodesByLevel(levels: LayoutNode[][], options: HierarchicalLayoutOptions): Node[] {
  const result: Node[] = [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —É–∑–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const nodeMap = new Map<string, LayoutNode>();
  levels.flat().forEach(node => nodeMap.set(node.id, node));
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–¥–µ—Ä–µ–≤–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç—å–µ–≤) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
  function computeLeafCount(node: LayoutNode): number {
    if (!node.children || node.children.length === 0) {
      return 1;
    }
    return node.children.reduce((sum, child) => sum + computeLeafCount(child), 0);
  }
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º y –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤
  function assignYPositions(node: LayoutNode, startY: number): number {
    const nodeSize = getNodeSize(node.id, options);
    
    if (!node.children || node.children.length === 0) {
      // –õ–∏—Å—Ç–æ–≤–æ–π —É–∑–µ–ª - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
      (node as any)._y = startY;
      return startY + nodeSize.height + options.verticalSpacing;
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç—è–º
    let childY = startY;
    const childCenters: number[] = [];
    
    for (const child of node.children) {
      childY = assignYPositions(child, childY);
      const childSize = getNodeSize(child.id, options);
      const childCenterY = (child as any)._y + childSize.height / 2;
      childCenters.push(childCenterY);
    }
    
    // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —É–∑–µ–ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–æ–≤ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
    const avgChildCenterY = childCenters.reduce((sum, y) => sum + y, 0) / childCenters.length;
    const parentSize = getNodeSize(node.id, options);
    (node as any)._y = avgChildCenterY - parentSize.height / 2;
    
    return childY;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã (—É—Ä–æ–≤–µ–Ω—å 0)
  const rootNodes = levels[0] || [];
  let currentY = options.startY;
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —É–∑–ª–∞
  rootNodes.forEach(rootNode => {
    currentY = assignYPositions(rootNode, currentY);
    currentY += options.verticalSpacing; // –ü–æ–ª–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–æ—Ä–Ω–µ–≤—ã–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏
  });
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
  levels.forEach((levelNodes, levelIndex) => {
    // –í—ã—á–∏—Å–ª—è–µ–º X –ø–æ–∑–∏—Ü–∏—é —Å —É—á–µ—Ç–æ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã —É–∑–ª–æ–≤ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö
    let x = options.startX;
    for (let i = 0; i < levelIndex; i++) {
      const prevLevel = levels[i] || [];
      const prevLevelMaxWidth = prevLevel.length > 0 
        ? Math.max(...prevLevel.map(n => getNodeSize(n.id, options).width))
        : 0; // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Å—Ç—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
      x += prevLevelMaxWidth + options.horizontalSpacing;
    }
    
    levelNodes.forEach((node) => {
      const y = (node as any)._y || (options.startY + result.length * options.verticalSpacing);
      
      // –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const { children, visited, level, ...cleanNode } = node;
      result.push({
        ...cleanNode,
        position: { x, y }
      });
    });
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π
  const resultWithCollisionFix = fixCollisions(result, options);
  
  return resultWithCollisionFix;
}

/**
 * –õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–∑–ª–æ–≤ (fallback)
 */
function arrangeNodesLinear(nodes: LayoutNode[], options: HierarchicalLayoutOptions): Node[] {
  return nodes.map((node, index) => {
    // –£–±–∏—Ä–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
    const { children, visited, level, ...cleanNode } = node;
    return {
      ...cleanNode,
      position: {
        x: options.startX + (index % 3) * (options.nodeWidth + options.horizontalSpacing),
        y: options.startY + Math.floor(index / 3) * options.verticalSpacing
      }
    };
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ VProgulke
 */
export function createVProgulkeHierarchicalLayout(nodes: Node[], connections: Connection[]): Node[] {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∑–ª–æ–≤ –¥–ª—è VProgulke –±–æ—Ç–∞
  const nodeSequence = [
    'start',
    'join_request', 
    'decline_response',
    'gender_selection',
    'name_input',
    'age_input', 
    'metro_selection',
    'interests_categories',
    'hobby_interests',
    'relationship_status',
    'sexual_orientation',
    'telegram_channel_ask',
    'telegram_channel_input',
    'additional_info',
    'profile_complete',
    'chat_link',
    'show_profile'
  ];

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —É–∑–ª–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  const nodeMap = new Map(nodes.map(node => [node.id, node]));
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∑–ª–æ–≤ VProgulke
  const specialPositions: Record<string, {x: number, y: number}> = {
    // –£—Ä–æ–≤–µ–Ω—å 1: –°—Ç–∞—Ä—Ç
    'start': { x: 100, y: 50 },
    
    // –£—Ä–æ–≤–µ–Ω—å 2: –í—ã–±–æ—Ä —É—á–∞—Å—Ç–∏—è
    'join_request': { x: 100, y: 250 },
    'decline_response': { x: 450, y: 250 },
    
    // –£—Ä–æ–≤–µ–Ω—å 3: –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    'gender_selection': { x: 100, y: 450 },
    'name_input': { x: 450, y: 450 },
    'age_input': { x: 800, y: 450 },
    
    // –£—Ä–æ–≤–µ–Ω—å 4: –õ–æ–∫–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    'metro_selection': { x: 100, y: 650 },
    'interests_categories': { x: 450, y: 650 },
    'hobby_interests': { x: 800, y: 650 },
    
    // –£—Ä–æ–≤–µ–Ω—å 5: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    'relationship_status': { x: 100, y: 850 },
    'sexual_orientation': { x: 450, y: 850 },
    'telegram_channel_ask': { x: 800, y: 850 },
    
    // –£—Ä–æ–≤–µ–Ω—å 6: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    'telegram_channel_input': { x: 100, y: 1050 },
    'additional_info': { x: 450, y: 1050 },
    
    // –£—Ä–æ–≤–µ–Ω—å 7: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    'profile_complete': { x: 100, y: 1250 },
    'chat_link': { x: 450, y: 1250 },
    'show_profile': { x: 800, y: 1250 }
  };

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∫ —É–∑–ª–∞–º
  const layoutNodes = nodes.map(node => {
    const position = specialPositions[node.id] || { 
      x: Math.random() * 800 + 100, 
      y: Math.random() * 600 + 100 
    };
    
    return {
      ...node,
      position
    };
  });

  return layoutNodes;
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —à–∞–±–ª–æ–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
 */
export function applyTemplateLayout(
  nodes: Node[], 
  connections: Connection[], 
  templateName?: string, 
  nodeSizes?: Map<string, { width: number; height: number }>
): Node[] {
  console.log('üéØ ApplyTemplateLayout called:', templateName, 'nodes:', nodes.length, 'nodeSizes:', !!nodeSizes);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —à–∞–±–ª–æ–Ω VProgulke
  if (templateName?.toLowerCase().includes('vprogulke') || templateName?.toLowerCase().includes('–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞')) {
    console.log('üåü Using VProgulke layout');
    return createVProgulkeHierarchicalLayout(nodes, connections);
  }
  
  // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é –∫–æ–º–ø–æ–Ω–æ–≤–∫—É
  console.log('üìè Using standard hierarchical layout with real sizes');
  return createHierarchicalLayout(nodes, connections, {
    levelHeight: 150,
    nodeWidth: 320,
    nodeHeight: 120,
    horizontalSpacing: 100, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    verticalSpacing: 80, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    startX: 100,
    startY: 100,
    nodeSizes
  });
}