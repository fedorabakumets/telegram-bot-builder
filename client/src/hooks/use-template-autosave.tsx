import { useCallback, useEffect, useRef, useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import { BotData } from '@shared/schema';

interface TemplateAutoSaveOptions {
  enabled?: boolean;
  instantSave?: boolean; // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
  delay?: number; // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  showToasts?: boolean;
  onSaveSuccess?: (templateId: number) => void;
  onSaveError?: (error: any) => void;
}

interface TemplateFormData {
  name: string;
  description: string;
  category: string;
  tags: string[];
  isPublic: boolean;
  difficulty: 'easy' | 'medium' | 'hard';
  language: string;
  requiresToken: boolean;
  complexity: number;
  estimatedTime: number;
}

interface TemplateAutoSaveState {
  isSaving: boolean;
  lastSaved: Date | null;
  hasUnsavedChanges: boolean;
  templateId: number | null;
  isCreating: boolean;
}

export function useTemplateAutoSave(
  botData: BotData,
  formData: TemplateFormData,
  options: TemplateAutoSaveOptions = {}
) {
  const {
    enabled = true,
    instantSave = false,
    delay = 500, // –ë—ã—Å—Ç—Ä–µ–µ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    showToasts = true,
    onSaveSuccess,
    onSaveError
  } = options;

  const { toast } = useToast();
  const queryClient = useQueryClient();
  const saveTimeoutRef = useRef<NodeJS.Timeout>();
  const lastDataRef = useRef<string>('');
  const lastFormRef = useRef<string>('');
  
  const [isSaving, setIsSaving] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [templateId, setTemplateId] = useState<number | null>(null);

  // Mutation –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  const createTemplateMutation = useMutation({
    mutationFn: async (data: { formData: TemplateFormData; botData: BotData }) => {
      return await apiRequest('POST', '/api/templates', {
        name: data.formData.name,
        description: data.formData.description,
        category: data.formData.category,
        tags: data.formData.tags,
        isPublic: data.formData.isPublic ? 1 : 0,
        difficulty: data.formData.difficulty,
        language: data.formData.language,
        requiresToken: data.formData.requiresToken ? 1 : 0,
        complexity: data.formData.complexity,
        estimatedTime: data.formData.estimatedTime,
        data: data.botData,
      });
    },
    onMutate: () => {
      setIsCreating(true);
      setIsSaving(true);
    },
    onSuccess: (response: any) => {
      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });
      queryClient.invalidateQueries({ queryKey: ['/api/templates/category/custom'] });
      
      const now = new Date();
      setLastSaved(now);
      setHasUnsavedChanges(false);
      setIsSaving(false);
      setIsCreating(false);
      setTemplateId(response.id);
      
      if (showToasts) {
        toast({
          title: "‚ú® –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω",
          description: "–í–∞—à —à–∞–±–ª–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
          duration: 3000,
        });
      }
      
      onSaveSuccess?.(response.id);
    },
    onError: (error) => {
      setIsSaving(false);
      setIsCreating(false);
      
      if (showToasts) {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω",
          variant: "destructive",
          duration: 4000,
        });
      }
      
      onSaveError?.(error);
    }
  });

  // Mutation –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
  const updateTemplateMutation = useMutation({
    mutationFn: async (data: { templateId: number; formData: TemplateFormData; botData: BotData }) => {
      return await apiRequest('PUT', `/api/templates/${data.templateId}`, {
        name: data.formData.name,
        description: data.formData.description,
        category: data.formData.category,
        tags: data.formData.tags,
        isPublic: data.formData.isPublic ? 1 : 0,
        difficulty: data.formData.difficulty,
        language: data.formData.language,
        requiresToken: data.formData.requiresToken ? 1 : 0,
        complexity: data.formData.complexity,
        estimatedTime: data.formData.estimatedTime,
        data: data.botData,
      });
    },
    onMutate: () => {
      setIsSaving(true);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });
      queryClient.invalidateQueries({ queryKey: ['/api/templates/category/custom'] });
      
      const now = new Date();
      setLastSaved(now);
      setHasUnsavedChanges(false);
      setIsSaving(false);
      
      if (showToasts) {
        toast({
          title: "üíæ –®–∞–±–ª–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω",
          description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
          duration: 2000,
        });
      }
      
      onSaveSuccess?.(templateId!);
    },
    onError: (error) => {
      setIsSaving(false);
      
      if (showToasts) {
        toast({
          title: "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω",
          variant: "destructive",
          duration: 4000,
        });
      }
      
      onSaveError?.(error);
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –∏–ª–∏ —Ñ–æ—Ä–º–µ
  const hasDataChanged = useCallback(() => {
    const newBotDataString = JSON.stringify(botData);
    const newFormDataString = JSON.stringify(formData);
    
    const botDataChanged = newBotDataString !== lastDataRef.current;
    const formDataChanged = newFormDataString !== lastFormRef.current;
    
    if (botDataChanged || formDataChanged) {
      lastDataRef.current = newBotDataString;
      lastFormRef.current = newFormDataString;
      setHasUnsavedChanges(true);
      return true;
    }
    
    return false;
  }, [botData, formData]);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const validateTemplate = useCallback(() => {
    if (!formData.name.trim()) {
      toast({
        title: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
        description: "–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ",
        variant: "destructive",
        duration: 3000,
      });
      return false;
    }
    
    if (!botData.nodes || botData.nodes.length === 0) {
      toast({
        title: "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π",
        description: "–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —É–∑–µ–ª",
        variant: "destructive",
        duration: 3000,
      });
      return false;
    }
    
    return true;
  }, [formData.name, botData.nodes, toast]);

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const saveTemplate = useCallback(() => {
    if (!enabled || isSaving || !validateTemplate()) return;
    
    if (templateId) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
      updateTemplateMutation.mutate({ templateId, formData, botData });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω
      createTemplateMutation.mutate({ formData, botData });
    }
  }, [enabled, isSaving, validateTemplate, templateId, formData, botData, updateTemplateMutation, createTemplateMutation]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –∏–ª–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
  const triggerAutoSave = useCallback(() => {
    if (!enabled || isSaving) return;
    
    if (!hasDataChanged()) return;
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    if (instantSave) {
      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
      saveTemplate();
    } else {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
      saveTimeoutRef.current = setTimeout(() => {
        if (!isSaving && hasUnsavedChanges) {
          saveTemplate();
        }
      }, delay);
    }
  }, [enabled, isSaving, hasDataChanged, instantSave, saveTemplate, delay, hasUnsavedChanges]);

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const forceSave = useCallback(() => {
    if (!enabled || isSaving) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
    if (saveTimeoutRef.current) {
      clearTimeout(saveTimeoutRef.current);
    }
    
    hasDataChanged(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveTemplate();
  }, [enabled, isSaving, hasDataChanged, saveTemplate]);

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
  const resetAutoSave = useCallback(() => {
    setTemplateId(null);
    setHasUnsavedChanges(false);
    setLastSaved(null);
    lastDataRef.current = JSON.stringify(botData);
    lastFormRef.current = JSON.stringify(formData);
  }, [botData, formData]);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const setExistingTemplateId = useCallback((id: number) => {
    setTemplateId(id);
    setHasUnsavedChanges(false);
    lastDataRef.current = JSON.stringify(botData);
    lastFormRef.current = JSON.stringify(formData);
  }, [botData, formData]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const getAutoSaveState = useCallback((): TemplateAutoSaveState => ({
    isSaving,
    lastSaved,
    hasUnsavedChanges,
    templateId,
    isCreating
  }), [isSaving, lastSaved, hasUnsavedChanges, templateId, isCreating]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    lastDataRef.current = JSON.stringify(botData);
    lastFormRef.current = JSON.stringify(formData);
    setHasUnsavedChanges(false);
  }, []);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (hasUnsavedChanges && enabled) {
        e.preventDefault();
        e.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–µ. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
        return e.returnValue;
      }
    };

    const handleVisibilityChange = () => {
      if (document.visibilityState === 'hidden' && hasUnsavedChanges && enabled) {
        forceSave();
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    document.addEventListener('visibilitychange', handleVisibilityChange);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [enabled, forceSave, hasUnsavedChanges]);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (saveTimeoutRef.current) {
        clearTimeout(saveTimeoutRef.current);
      }
    };
  }, []);

  return {
    // –ú–µ—Ç–æ–¥—ã
    triggerAutoSave,
    forceSave,
    resetAutoSave,
    setExistingTemplateId,
    getAutoSaveState,
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isSaving,
    isCreating,
    lastSaved,
    hasUnsavedChanges,
    templateId,
    isEnabled: enabled
  };
}