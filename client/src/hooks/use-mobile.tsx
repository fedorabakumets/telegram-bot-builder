import * as React from "react"

const MOBILE_BREAKPOINT = 768

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function getIsMobile() {
  if (typeof window === 'undefined') {
    console.log('üì± getIsMobile: window undefined, returning false');
    return false;
  }
  const result = window.innerWidth < MOBILE_BREAKPOINT;
  console.log(`üì± getIsMobile: window.innerWidth=${window.innerWidth}, breakpoint=${MOBILE_BREAKPOINT}, isMobile=${result}`);
  return result;
}

export function useIsMobile() {
  console.log('üöÄ useIsMobile hook: Initializing...');
  
  // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ window –¥–æ—Å—Ç—É–ø–µ–Ω
  const [isMobile, setIsMobile] = React.useState<boolean>(() => {
    console.log('üöÄ useIsMobile hook: Initial state calculation');
    return getIsMobile();
  })

  React.useEffect(() => {
    console.log('üöÄ useIsMobile hook: useEffect triggered');
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      console.log('üì± useIsMobile: Media query changed, recalculating...');
      setIsMobile(getIsMobile())
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    console.log('üöÄ useIsMobile hook: Setting initial value in useEffect');
    setIsMobile(getIsMobile())
    
    mql.addEventListener("change", onChange)
    return () => {
      console.log('üöÄ useIsMobile hook: Cleanup');
      mql.removeEventListener("change", onChange);
    }
  }, [])

  console.log(`üì± useIsMobile hook: Returning ${isMobile}`);
  return isMobile
}
