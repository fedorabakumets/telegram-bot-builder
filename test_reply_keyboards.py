#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""

import re
import json
from typing import Dict, List

def analyze_reply_keyboards(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∫–æ–¥–µ"""
    results = {
        'total_reply_keyboards': 0,
        'reply_buttons': 0,
        'contact_buttons': 0,
        'location_buttons': 0,
        'one_time_keyboards': 0,
        'permanent_keyboards': 0,
        'resizable_keyboards': 0,
        'fixed_size_keyboards': 0,
        'proper_reply_structure': 0,
        'keyboard_removals': 0
    }
    
    # –ò—â–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_pattern = r'builder = ReplyKeyboardBuilder\(\)(.*?)keyboard = builder\.as_markup\([^)]*\)'
    reply_matches = re.findall(reply_pattern, code, re.DOTALL)
    results['total_reply_keyboards'] = len(reply_matches)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for match in reply_matches:
        # –°—á–∏—Ç–∞–µ–º –∫–Ω–æ–ø–∫–∏
        buttons = re.findall(r'builder\.add\(KeyboardButton\(', match)
        results['reply_buttons'] += len(buttons)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'one_time_keyboard=True' in match:
            results['one_time_keyboards'] += 1
        else:
            results['permanent_keyboards'] += 1
            
        if 'resize_keyboard=True' in match:
            results['resizable_keyboards'] += 1
        else:
            results['fixed_size_keyboards'] += 1
    
    # –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    contact_buttons = re.findall(r'request_contact=True', code)
    results['contact_buttons'] = len(contact_buttons)
    
    location_buttons = re.findall(r'request_location=True', code)
    results['location_buttons'] = len(location_buttons)
    
    # –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    proper_structure = re.findall(r'builder = ReplyKeyboardBuilder\(\)\s*\n(?:\s*builder\.add\([^)]+\)\s*\n)+\s*keyboard = builder\.as_markup\([^)]*\)\s*\n[^#]*await message\.answer\([^,]+, reply_markup=keyboard\)', code, re.DOTALL)
    results['proper_reply_structure'] = len(proper_structure)
    
    # –ò—â–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    removals = re.findall(r'ReplyKeyboardRemove\(\)', code)
    results['keyboard_removals'] = len(removals)
    
    return results

def analyze_reply_handlers(code: str) -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Reply –∫–Ω–æ–ø–æ–∫"""
    results = {
        'reply_handlers': 0,
        'message_text_handlers': 0,
        'contact_handlers': 0,
        'location_handlers': 0,
        'proper_text_matching': 0
    }
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Reply –∫–Ω–æ–ø–æ–∫
    reply_handler_pattern = r'async def handle_reply_btn_\w+\(message: types\.Message\)'
    reply_handlers = re.findall(reply_handler_pattern, code)
    results['reply_handlers'] = len(reply_handlers)
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    text_handler_pattern = r'@dp\.message\(lambda message: message\.text'
    text_handlers = re.findall(text_handler_pattern, code)
    results['message_text_handlers'] = len(text_handlers)
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contact_handler_pattern = r'@dp\.message\(.*content_types.*contact'
    contact_handlers = re.findall(contact_handler_pattern, code)
    results['contact_handlers'] = len(contact_handlers)
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_handler_pattern = r'@dp\.message\(.*content_types.*location'
    location_handlers = re.findall(location_handler_pattern, code)
    results['location_handlers'] = len(location_handlers)
    
    return results

def test_reply_message_flow(code: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏"""
    results = {
        'commands_with_reply': 0,
        'messages_with_reply': 0,
        'single_answer_calls': 0,
        'multiple_answer_calls': 0,
        'keyboard_consistency': True,
        'problematic_flows': []
    }
    
    # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—ã —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏
    command_pattern = r'@dp\.message\(Command\("[^"]+"\)\)(.*?)(?=@dp\.|\\Z)'
    command_matches = re.findall(command_pattern, code, re.DOTALL)
    
    for i, cmd_code in enumerate(command_matches):
        has_reply = 'ReplyKeyboardBuilder()' in cmd_code
        if has_reply:
            results['commands_with_reply'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ answer –≤—ã–∑–æ–≤–æ–≤
            answer_calls = re.findall(r'await message\.answer\(', cmd_code)
            if len(answer_calls) == 1:
                results['single_answer_calls'] += 1
            else:
                results['multiple_answer_calls'] += 1
                results['problematic_flows'].append(f"Command {i+1}: {len(answer_calls)} answer calls")
    
    # –ò—â–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å Reply –∫–Ω–æ–ø–∫–∞–º–∏
    message_handlers = re.findall(r'async def handle_[^(]+\(message: types\.Message\)(.*?)(?=async def|\Z)', code, re.DOTALL)
    
    for i, msg_code in enumerate(message_handlers):
        has_reply = 'ReplyKeyboardBuilder()' in msg_code
        if has_reply:
            results['messages_with_reply'] += 1
    
    return results

def check_keyboard_transitions(code: str) -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏"""
    results = {
        'keyboard_changes': 0,
        'keyboard_removals': 0,
        'smooth_transitions': 0,
        'jarring_transitions': 0,
        'transition_patterns': []
    }
    
    # –ò—â–µ–º —Å–º–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    keyboard_changes = re.findall(r'ReplyKeyboardBuilder\(\)', code)
    results['keyboard_changes'] = len(keyboard_changes)
    
    # –ò—â–µ–º —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    removals = re.findall(r'ReplyKeyboardRemove\(\)', code)
    results['keyboard_removals'] = len(removals)
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    transition_pattern = r'await message\.answer\([^,]+, reply_markup=[^)]+\)'
    transitions = re.findall(transition_pattern, code)
    
    for transition in transitions:
        if 'ReplyKeyboardRemove' in transition:
            results['transition_patterns'].append('Remove keyboard')
        elif 'ReplyKeyboardBuilder' in transition:
            results['transition_patterns'].append('Change keyboard')
    
    return results

def run_reply_keyboard_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("‚å®Ô∏è –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ REPLY –ö–õ–ê–í–ò–ê–¢–£–†")
    print("=" * 45)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥ Reply –±–æ—Ç–∞
    try:
        with open('reply_keyboard_test_4_fixed.py', 'r', encoding='utf-8') as f:
            code = f.read()
        print(f"üìÑ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–¥–∞: {e}")
        return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    print("\n‚å®Ô∏è –ê–ù–ê–õ–ò–ó REPLY –ö–õ–ê–í–ò–ê–¢–£–†:")
    print("-" * 25)
    keyboards = analyze_reply_keyboards(code)
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['total_reply_keyboards']}")
    print(f"  ‚Ä¢ Reply –∫–Ω–æ–ø–∫–∏: {keyboards['reply_buttons']}")
    print(f"  ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {keyboards['contact_buttons']}")
    print(f"  ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {keyboards['location_buttons']}")
    print(f"  ‚Ä¢ –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboards['one_time_keyboards']}")
    print(f"  ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboards['permanent_keyboards']}")
    print(f"  ‚Ä¢ –ê–≤—Ç–æ-—Ä–∞–∑–º–µ—Ä: {keyboards['resizable_keyboards']}")
    print(f"  ‚Ä¢ –§–∏–∫—Å-—Ä–∞–∑–º–µ—Ä: {keyboards['fixed_size_keyboards']}")
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {keyboards['proper_reply_structure']}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {keyboards['keyboard_removals']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("\nüîß –ê–ù–ê–õ–ò–ó –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í:")
    print("-" * 22)
    handlers = analyze_reply_handlers(code)
    print(f"  ‚Ä¢ Reply –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers['reply_handlers']}")
    print(f"  ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers['message_text_handlers']}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {handlers['contact_handlers']}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {handlers['location_handlers']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüì± –¢–ï–°–¢ –ü–û–¢–û–ö–ê –°–û–û–ë–©–ï–ù–ò–ô:")
    print("-" * 24)
    flow = test_reply_message_flow(code)
    print(f"  ‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Å Reply: {flow['commands_with_reply']}")
    print(f"  ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å Reply: {flow['messages_with_reply']}")
    print(f"  ‚Ä¢ –û–¥–∏–Ω answer() –≤—ã–∑–æ–≤: {flow['single_answer_calls']}")
    print(f"  ‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ answer() –≤—ã–∑–æ–≤–æ–≤: {flow['multiple_answer_calls']}")
    
    if flow['problematic_flows']:
        print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Ç–æ–∫–∏:")
        for problem in flow['problematic_flows'][:3]:
            print(f"    - {problem}")
    else:
        print(f"  ‚úÖ –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
    print("\nüîÑ –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–•–û–î–û–í:")
    print("-" * 18)
    transitions = check_keyboard_transitions(code)
    print(f"  ‚Ä¢ –°–º–µ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {transitions['keyboard_changes']}")
    print(f"  ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {transitions['keyboard_removals']}")
    
    if transitions['transition_patterns']:
        pattern_counts = {}
        for pattern in transitions['transition_patterns']:
            pattern_counts[pattern] = pattern_counts.get(pattern, 0) + 1
        
        print(f"  ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:")
        for pattern, count in pattern_counts.items():
            print(f"    - {pattern}: {count}")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è Reply
    print("\nüéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
    print("-" * 23)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ Reply –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
    total_reply_buttons = keyboards['reply_buttons']
    total_handlers = handlers['reply_handlers'] + handlers['message_text_handlers']
    
    print(f"  ‚Ä¢ –ö–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {total_reply_buttons}")
    print(f"  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_handlers}")
    
    if total_handlers >= total_reply_buttons * 0.8:  # 80% –ø–æ–∫—Ä—ã—Ç–∏–µ
        print(f"  ‚úÖ –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    special_buttons = keyboards['contact_buttons'] + keyboards['location_buttons']
    special_handlers = handlers['contact_handlers'] + handlers['location_handlers']
    
    print(f"  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: {special_buttons}")
    print(f"  ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {special_handlers}")
    
    if special_handlers >= special_buttons:
        print(f"  ‚úÖ –í—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    else:
        print(f"  ‚ö†Ô∏è –ù–µ –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure_ratio = keyboards['proper_reply_structure'] / max(keyboards['total_reply_keyboards'], 1)
    print(f"  ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {structure_ratio*100:.1f}%")
    
    if structure_ratio >= 0.9:
        print(f"  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    elif structure_ratio >= 0.7:
        print(f"  üëç –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    else:
        print(f"  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print(f"-" * 17)
    
    score = 0
    max_score = 100
    
    # –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (40 –±–∞–ª–ª–æ–≤)
    score += min(keyboards['total_reply_keyboards'] * 4, 20)  # –î–æ 20 –∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    score += min(keyboards['reply_buttons'] * 1, 15)          # –î–æ 15 –∑–∞ –∫–Ω–æ–ø–∫–∏
    score += 5 if keyboards['contact_buttons'] > 0 else 0     # 5 –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    
    # –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (30 –±–∞–ª–ª–æ–≤)
    score += int(structure_ratio * 20)                        # –î–æ 20 –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    score += 5 if flow['multiple_answer_calls'] == 0 else 0   # 5 –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã
    score += 5 if keyboards['keyboard_removals'] > 0 else 0   # 5 –∑–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ñ—É–Ω–∫—Ü–∏–π (30 –±–∞–ª–ª–æ–≤)
    score += 5 if keyboards['one_time_keyboards'] > 0 else 0      # 5 –∑–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ
    score += 5 if keyboards['permanent_keyboards'] > 0 else 0     # 5 –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ
    score += 5 if keyboards['contact_buttons'] > 0 else 0        # 5 –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    score += 5 if keyboards['location_buttons'] > 0 else 0       # 5 –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    score += 5 if keyboards['resizable_keyboards'] > 0 else 0    # 5 –∑–∞ –∞–≤—Ç–æ-—Ä–∞–∑–º–µ—Ä
    score += 5 if keyboards['fixed_size_keyboards'] > 0 else 0   # 5 –∑–∞ —Ñ–∏–∫—Å-—Ä–∞–∑–º–µ—Ä
    
    print(f"üéñÔ∏è –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª: {score}/{max_score} ({score/max_score*100:.1f}%)")
    
    if score >= 85:
        print(f"üåü –ü–†–ï–í–û–°–•–û–î–ù–û! Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∏–¥–µ–∞–ª—å–Ω–æ")
        success = True
    elif score >= 70:
        print(f"‚úÖ –û–¢–õ–ò–ß–ù–û! Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        success = True
    elif score >= 55:
        print(f"üëç –•–û–†–û–®–û! –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã")
        success = True
    else:
        print(f"‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò! –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        success = False
    
    return success

def compare_with_inline_test():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    print(f"\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –° INLINE –ö–ù–û–ü–ö–ê–ú–ò:")
    print(f"-" * 32)
    
    try:
        # Reply –±–æ—Ç
        with open('reply_keyboard_test_4.py', 'r', encoding='utf-8') as f:
            reply_code = f.read()
        
        reply_keyboards = len(re.findall(r'ReplyKeyboardBuilder\(\)', reply_code))
        reply_buttons = len(re.findall(r'KeyboardButton\(', reply_code))
        
        # Inline –±–æ—Ç
        with open('complex_test_bot_3.py', 'r', encoding='utf-8') as f:
            inline_code = f.read()
        
        inline_keyboards = len(re.findall(r'InlineKeyboardBuilder\(\)', inline_code))
        inline_buttons = len(re.findall(r'InlineKeyboardButton\(', inline_code))
        
        print(f"‚Ä¢ Reply –±–æ—Ç: {reply_keyboards} –∫–ª–∞–≤–∏–∞—Ç—É—Ä, {reply_buttons} –∫–Ω–æ–ø–æ–∫")
        print(f"‚Ä¢ Inline –±–æ—Ç: {inline_keyboards} –∫–ª–∞–≤–∏–∞—Ç—É—Ä, {inline_buttons} –∫–Ω–æ–ø–æ–∫")
        print(f"‚Ä¢ Reply —Ñ—É–Ω–∫—Ü–∏–π –±–æ–ª—å—à–µ –≤ {reply_keyboards/max(inline_keyboards,1):.1f}x —Ä–∞–∑")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = run_reply_keyboard_test()
    compare_with_inline_test()
    
    print(f"\n" + "="*50)
    if success:
        print(f"üèÜ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REPLY –ö–õ–ê–í–ò–ê–¢–£–† –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Reply –∫–Ω–æ–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üéØ –í—Å–µ —Ç–∏–ø—ã Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")
    else:
        print(f"‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–´–Ø–í–ò–õ–û –ü–†–û–ë–õ–ï–ú–´")
        print(f"üîß Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

if __name__ == "__main__":
    main()