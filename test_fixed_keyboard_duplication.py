"""
–¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
"""

import os
import logging
import asyncio
from datetime import datetime, timezone
import json
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove,
    URLInputFile,
    FSInputFile,
    Location
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot_token = input("ü§ñ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ").strip()
if not bot_token:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
    exit(1)

bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
db_pool = None

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    global db_pool
    try:
        database_url = os.getenv('DATABASE_URL')
        if database_url:
            db_pool = await asyncpg.create_pool(database_url)
            async with db_pool.acquire() as conn:
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS bot_users (
                        user_id BIGINT PRIMARY KEY,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        user_data JSONB DEFAULT '{}'::jsonb
                    )
                ''')
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            logger.warning("DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def save_user_to_db(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return
    try:
        async with db_pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO bot_users (user_id, username, first_name, last_name, registration_date, last_activity)
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    first_name = EXCLUDED.first_name,
                    last_name = EXCLUDED.last_name,
                    last_activity = EXCLUDED.last_activity
            ''', user_id, username, first_name, last_name, datetime.now(timezone.utc), datetime.now(timezone.utc))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def get_user_from_db(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return None
    try:
        async with db_pool.acquire() as conn:
            row = await conn.fetchrow('SELECT * FROM bot_users WHERE user_id = $1', user_id)
            return dict(row) if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def update_user_data_in_db(user_id: int, data_key: str, data_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if not db_pool:
        return
    try:
        async with db_pool.acquire() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            current_data = await conn.fetchval('SELECT user_data FROM bot_users WHERE user_id = $1', user_id)
            if current_data is None:
                current_data = {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            current_data[data_key] = data_value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            await conn.execute('UPDATE bot_users SET user_data = $1 WHERE user_id = $2', json.dumps(current_data), user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def is_admin(user_id: int) -> bool:
    return user_id in []

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == 'private'

async def check_auth(user_id: int) -> bool:
    return True

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    """
    –¢–ï–°–¢: –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–∫–Ω–æ–ø–æ—á–Ω—ã–π)
    –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –¢–û–õ–¨–ö–û –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞, –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await save_user_to_db(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:"
    
    # –°–ò–°–¢–ï–ú–ê –°–ë–û–†–ê –í–í–û–î–ê: –ö–Ω–æ–ø–æ—á–Ω—ã–π —Ç–∏–ø (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ (—Å–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞)
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="18-25", callback_data="input_start-1_age_18_25"))
    builder.add(InlineKeyboardButton(text="26-35", callback_data="input_start-1_age_26_35"))
    builder.add(InlineKeyboardButton(text="36-45", callback_data="input_start-1_age_36_45"))
    builder.add(InlineKeyboardButton(text="46+", callback_data="input_start-1_age_46_plus"))
    keyboard = builder.as_markup()
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    
    # –í—ã–±–æ—Ä –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    """
    –¢–ï–°–¢: –ö–æ–º–∞–Ω–¥–∞ /help —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Å–±–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
    –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
    """
    text = "‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º:"
    
    # –°–ò–°–¢–ï–ú–ê –°–ë–û–†–ê –í–í–û–î–ê: –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä)
    await message.answer(text, parse_mode=ParseMode.HTML)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä)
    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})
    user_data[message.from_user.id]["waiting_for_input"] = "help-1"
    user_data[message.from_user.id]["input_type"] = "text"

@dp.message(Command("menu"))
async def menu_handler(message: types.Message):
    """
    –¢–ï–°–¢: –ö–æ–º–∞–Ω–¥–∞ /menu –ë–ï–ó —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    –î–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    """
    text = "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞):"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    builder.add(InlineKeyboardButton(text="–û –±–æ—Ç–µ", callback_data="about"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

# CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¥–ª—è —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞

@dp.callback_query(lambda query: query.data.startswith("input_start-1_age_"))
async def handle_age_response(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ"""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    age_choice = callback_query.data.replace("input_start-1_age_", "").replace("_", "-")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[callback_query.from_user.id] = user_data.get(callback_query.from_user.id, {})
    user_data[callback_query.from_user.id]["age"] = age_choice
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await update_user_data_in_db(callback_query.from_user.id, "age", age_choice)
    
    await callback_query.message.edit_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {age_choice}\n\nüéØ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä!",
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞)

@dp.callback_query(lambda query: query.data == "settings")
async def handle_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await callback_query.answer()
    await callback_query.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", parse_mode=ParseMode.HTML)

@dp.callback_query(lambda query: query.data == "about")
async def handle_about(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ –±–æ—Ç–µ"""
    await callback_query.answer()
    await callback_query.message.edit_text("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä", parse_mode=ParseMode.HTML)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞

@dp.message()
async def handle_user_input(message: types.Message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data and "waiting_for_input" in user_data[user_id]:
        node_id = user_data[user_id]["waiting_for_input"]
        input_type = user_data[user_id].get("input_type", "text")
        
        if node_id == "help-1":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è help
            question = message.text
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            user_data[user_id]["question"] = question
            await update_user_data_in_db(user_id, "question", question)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del user_data[user_id]["waiting_for_input"]
            
            await message.answer(f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: {question}\n\nüéØ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!", parse_mode=ParseMode.HTML)
        else:
            await message.answer("‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å")
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /help –∏–ª–∏ /menu –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†")
    print("==========================================")
    print("1. /start - —Ç–µ—Å—Ç –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞")
    print("2. /help - —Ç–µ—Å—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –≤–≤–æ–¥–∞") 
    print("3. /menu - —Ç–µ—Å—Ç –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    print("==========================================")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())