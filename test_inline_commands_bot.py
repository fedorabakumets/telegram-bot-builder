"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""
import json

def create_test_bot_with_inline_commands():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start", 
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "help-1"
                        },
                        {
                            "id": "btn-menu", 
                            "text": "üì± –ú–µ–Ω—é",
                            "action": "goto",
                            "target": "menu-1"
                        }
                    ],
                    "synonyms": ["—Å—Ç–∞—Ä—Ç", "–ø—Ä–∏–≤–µ—Ç"]
                }
            },
            {
                "id": "help-1",
                "type": "command",
                "position": {"x": 300, "y": 100},
                "data": {
                    "command": "/help",
                    "messageText": "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "üîô –ù–∞–∑–∞–¥",
                            "action": "goto", 
                            "target": "start-1"
                        },
                        {
                            "id": "btn-commands",
                            "text": "üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã",
                            "action": "goto",
                            "target": "commands-1"
                        }
                    ],
                    "synonyms": ["–ø–æ–º–æ—â—å", "—Å–ø—Ä–∞–≤–∫–∞"]
                }
            },
            {
                "id": "menu-1",
                "type": "message",
                "position": {"x": 500, "y": 100},
                "data": {
                    "messageText": "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-help-from-menu",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "help-1"
                        },
                        {
                            "id": "btn-home",
                            "text": "üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                            "action": "goto",
                            "target": "start-1" 
                        }
                    ]
                }
            },
            {
                "id": "commands-1",
                "type": "message",
                "position": {"x": 100, "y": 300},
                "data": {
                    "messageText": "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞\n‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã: —Å—Ç–∞—Ä—Ç, –ø–æ–º–æ—â—å, —Å–ø—Ä–∞–≤–∫–∞",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-to-help",
                            "text": "üîô –ö —Å–ø—Ä–∞–≤–∫–µ",
                            "action": "goto",
                            "target": "help-1"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {"id": "conn-1", "source": "start-1", "target": "help-1"},
            {"id": "conn-2", "source": "start-1", "target": "menu-1"},
            {"id": "conn-3", "source": "help-1", "target": "start-1"},
            {"id": "conn-4", "source": "help-1", "target": "commands-1"},
            {"id": "conn-5", "source": "menu-1", "target": "help-1"},
            {"id": "conn-6", "source": "menu-1", "target": "start-1"},
            {"id": "conn-7", "source": "commands-1", "target": "help-1"}
        ]
    }
    
    return bot_data

def test_bot_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞"""
    bot_data = create_test_bot_with_inline_commands()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ—Ç–∞
    with open('test_inline_commands_bot.json', 'w', encoding='utf-8') as f:
        json.dump(bot_data, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ test_inline_commands_bot.json")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    try:
        import sys
        sys.path.append('client/src/lib')
        from bot_generator import generatePythonCode
        
        code = generatePythonCode(bot_data, "TestInlineCommandsBot")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        with open('test_inline_commands_generated.py', 'w', encoding='utf-8') as f:
            f.write(code)
        
        print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_inline_commands_generated.py")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        print("\n=== –ü–†–û–í–ï–†–ö–ê –ö–û–î–ê ===")
        
        if 'Command(")' in code:
            print("‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ —Å –ª–∏—à–Ω–µ–π —Å–∫–æ–±–∫–æ–π")
        else:
            print("‚úÖ –ù–µ—Ç –æ–ø–µ—á–∞—Ç–æ–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö")
            
        if '@dp.message(CommandStart())' in code and '@dp.message(Command("help"))' in code:
            print("‚úÖ –ö–æ–º–∞–Ω–¥—ã /start –∏ /help –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥")
            
        if 'InlineKeyboardBuilder()' in code and 'await message.answer(text, reply_markup=keyboard)' in code:
            print("‚úÖ Inline –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if '@dp.callback_query(lambda c: c.data ==' in code:
            print("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
        else:
            print("‚ùå –ù–µ—Ç callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        if 'lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç"' in code:
            print("‚úÖ –°–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_bot_generation()
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û! –ö–æ–º–∞–Ω–¥—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")