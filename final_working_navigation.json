{"code":"\"\"\"\nМой первый бот - Telegram Bot\nСгенерировано с помощью TelegramBot Builder\n\"\"\"\n\nimport asyncio\nimport logging\nimport os\nfrom aiogram import Bot, Dispatcher, types, F\nfrom aiogram.filters import CommandStart, Command\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove, URLInputFile, FSInputFile\nfrom aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\nfrom aiogram.enums import ParseMode\nfrom typing import Optional\nimport asyncpg\nfrom datetime import datetime, timezone, timedelta\nimport json\n\n# Функция для получения московского времени\ndef get_moscow_time():\n    \"\"\"Возвращает текущее время в московском часовом поясе\"\"\"\n    moscow_tz = timezone(timedelta(hours=3))  # UTC+3 для Москвы\n    return datetime.now(moscow_tz).isoformat()\n\n# Токен вашего бота (получите у @BotFather)\nBOT_TOKEN = \"YOUR_BOT_TOKEN_HERE\"\n\n# Настройка логирования\nlogging.basicConfig(level=logging.INFO)\n\n# Создание бота и диспетчера\nbot = Bot(token=BOT_TOKEN)\ndp = Dispatcher()\n\n# Список администраторов (добавьте свой Telegram ID)\nADMIN_IDS = [123456789]  # Замените на реальные ID администраторов\n\n# Настройки базы данных\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n# Пул соединений с базой данных\ndb_pool = None\n\n# Хранилище пользователей (резервное для случаев без БД)\nuser_data = {}\n\n\n# Функции для работы с базой данных\nasync def init_database():\n    \"\"\"Инициализация подключения к базе данных и создание таблиц\"\"\"\n    global db_pool\n    try:\n        db_pool = await asyncpg.create_pool(DATABASE_URL, min_size=1, max_size=10)\n        # Создаем таблицу пользователей если её нет\n        async with db_pool.acquire() as conn:\n            await conn.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS bot_users (\n                    user_id BIGINT PRIMARY KEY,\n                    username TEXT,\n                    first_name TEXT,\n                    last_name TEXT,\n                    registered_at TIMESTAMP DEFAULT NOW(),\n                    last_interaction TIMESTAMP DEFAULT NOW(),\n                    interaction_count INTEGER DEFAULT 0,\n                    user_data JSONB DEFAULT '{}',\n                    is_active BOOLEAN DEFAULT TRUE\n                );\n            \"\"\")\n        logging.info(\"✅ База данных инициализирована\")\n    except Exception as e:\n        logging.warning(f\"⚠️ Не удалось подключиться к БД: {e}. Используем локальное хранилище.\")\n        db_pool = None\n\nasync def save_user_to_db(user_id: int, username: Optional[str] = None, first_name: Optional[str] = None, last_name: Optional[str] = None):\n    \"\"\"Сохраняет пользователя в базу данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        async with db_pool.acquire() as conn:\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id, username, first_name, last_name)\n                VALUES ($1, $2, $3, $4)\n                ON CONFLICT (user_id) DO UPDATE SET\n                    username = EXCLUDED.username,\n                    first_name = EXCLUDED.first_name,\n                    last_name = EXCLUDED.last_name,\n                    last_interaction = NOW(),\n                    interaction_count = bot_users.interaction_count + 1\n            \"\"\", user_id, username, first_name, last_name)\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка сохранения пользователя в БД: {e}\")\n        return False\n\nasync def get_user_from_db(user_id: int):\n    \"\"\"Получает данные пользователя из базы данных\"\"\"\n    if not db_pool:\n        return None\n    try:\n        async with db_pool.acquire() as conn:\n            row = await conn.fetchrow(\"SELECT * FROM bot_users WHERE user_id = $1\", user_id)\n            if row:\n                return dict(row)\n        return None\n    except Exception as e:\n        logging.error(f\"Ошибка получения пользователя из БД: {e}\")\n        return None\n\nasync def update_user_data_in_db(user_id: int, data_key: str, data_value):\n    \"\"\"Обновляет пользовательские данные в базе данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        import json\n        async with db_pool.acquire() as conn:\n            # Сначала создаём или получаем существующую запись\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id) \n                VALUES ($1) \n                ON CONFLICT (user_id) DO NOTHING\n            \"\"\", user_id)\n            \n            # Обновляем данные пользователя\n            update_data = {data_key: data_value}\n            await conn.execute(\"\"\"\n                UPDATE bot_users \n                SET user_data = COALESCE(user_data, '{}'::jsonb) || $2::jsonb,\n                    last_interaction = NOW()\n                WHERE user_id = $1\n            \"\"\", user_id, json.dumps(update_data))\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка обновления данных пользователя: {e}\")\n        return False\n\nasync def update_user_variable_in_db(user_id: int, variable_name: str, variable_value: str):\n    \"\"\"Сохраняет переменную пользователя в базу данных\"\"\"\n    if not db_pool:\n        return False\n    try:\n        import json\n        async with db_pool.acquire() as conn:\n            # Сначала создаём или получаем существующую запись\n            await conn.execute(\"\"\"\n                INSERT INTO bot_users (user_id) \n                VALUES ($1) \n                ON CONFLICT (user_id) DO NOTHING\n            \"\"\", user_id)\n            \n            # Обновляем переменную пользователя\n            update_data = {variable_name: variable_value}\n            await conn.execute(\"\"\"\n                UPDATE bot_users \n                SET user_data = COALESCE(user_data, '{}'::jsonb) || $2::jsonb,\n                    last_interaction = NOW()\n                WHERE user_id = $1\n            \"\"\", user_id, json.dumps(update_data))\n        return True\n    except Exception as e:\n        logging.error(f\"Ошибка сохранения переменной пользователя: {e}\")\n        return False\n\n\n# Утилитарные функции\nasync def is_admin(user_id: int) -> bool:\n    return user_id in ADMIN_IDS\n\nasync def is_private_chat(message: types.Message) -> bool:\n    return message.chat.type == \"private\"\n\nasync def check_auth(user_id: int) -> bool:\n    # Проверяем наличие пользователя в БД или локальном хранилище\n    if db_pool:\n        user = await get_user_from_db(user_id)\n        return user is not None\n    return user_id in user_data\n\ndef is_local_file(url: str) -> bool:\n    \"\"\"Проверяет, является ли URL локальным загруженным файлом\"\"\"\n    return url.startswith(\"/uploads/\") or url.startswith(\"uploads/\")\n\ndef get_local_file_path(url: str) -> str:\n    \"\"\"Получает локальный путь к файлу из URL\"\"\"\n    if url.startswith(\"/\"):\n        return url[1:]  # Убираем ведущий слеш\n    return url\n\ndef extract_coordinates_from_yandex(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки Яндекс.Карт\"\"\"\n    import re\n    # Ищем координаты в формате ll=longitude,latitude\n    match = re.search(r\"ll=([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    # Ищем координаты в формате /longitude,latitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    return None, None\n\ndef extract_coordinates_from_google(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки Google Maps\"\"\"\n    import re\n    # Ищем координаты в формате @latitude,longitude\n    match = re.search(r\"@([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(1)), float(match.group(2))  # lat, lon\n    # Ищем координаты в формате /latitude,longitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(1)), float(match.group(2))  # lat, lon\n    return None, None\n\ndef extract_coordinates_from_2gis(url: str) -> tuple:\n    \"\"\"Извлекает координаты из ссылки 2ГИС\"\"\"\n    import re\n    # Ищем координаты в различных форматах 2ГИС\n    # Формат: center/longitude,latitude\n    match = re.search(r\"center/([\\d.-]+),([\\d.-]+)\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    # Формат: /longitude,latitude/\n    match = re.search(r\"/([\\d.-]+),([\\d.-]+)/\", url)\n    if match:\n        return float(match.group(2)), float(match.group(1))  # lat, lon\n    return None, None\n\ndef generate_map_urls(latitude: float, longitude: float, title: str = \"\") -> dict:\n    \"\"\"Генерирует ссылки на различные картографические сервисы\"\"\"\n    import urllib.parse\n    \n    encoded_title = urllib.parse.quote(title) if title else \"\"\n    \n    return {\n        \"yandex\": f\"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15&l=map&pt={longitude},{latitude}\",\n        \"google\": f\"https://maps.google.com/?q={latitude},{longitude}\",\n        \"2gis\": f\"https://2gis.ru/geo/{longitude},{latitude}\",\n        \"openstreetmap\": f\"https://www.openstreetmap.org/?mlat={latitude}&mlon={longitude}&zoom=15\"\n    }\n\n\n@dp.message(CommandStart())\nasync def start_handler(message: types.Message):\n\n    # Регистрируем пользователя в системе\n    user_id = message.from_user.id\n    username = message.from_user.username\n    first_name = message.from_user.first_name\n    last_name = message.from_user.last_name\n    \n    # Сохраняем пользователя в базу данных\n    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)\n    \n    # Резервное сохранение в локальное хранилище\n    if not saved_to_db:\n        user_data[user_id] = {\n            \"username\": username,\n            \"first_name\": first_name,\n            \"last_name\": last_name,\n            \"registered_at\": message.date\n        }\n        logging.info(f\"Пользователь {user_id} сохранен в локальное хранилище\")\n    else:\n        logging.info(f\"Пользователь {user_id} сохранен в базу данных\")\n\n    text = \"\"\"Привет! 🌟\nДобро пожаловать в наш бот!\nОткуда вы узнали о нас?\"\"\"\n    # Определяем режим форматирования (приоритет у условного сообщения)\n    if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n        current_parse_mode = conditional_parse_mode\n    else:\n        current_parse_mode = None\n    # Инициализируем переменную для проверки условной клавиатуры\n    use_conditional_keyboard = False\n    conditional_keyboard = None\n    await message.answer(text, parse_mode=current_parse_mode if current_parse_mode else None)\n    \n    # Устанавливаем состояние ожидания ввода\n    user_data[message.from_user.id] = user_data.get(message.from_user.id, {})\n    user_data[message.from_user.id][\"waiting_for_input\"] = \"start_node\"\n\n@dp.message(Command(\"profile\"))\nasync def profile_handler(message: types.Message):\n    logging.info(f\"Команда /profile вызвана пользователем {message.from_user.id}\")\n    # Сохраняем пользователя и статистику использования команд\n    user_id = message.from_user.id\n    username = message.from_user.username\n    first_name = message.from_user.first_name\n    last_name = message.from_user.last_name\n    \n    # Сохраняем пользователя в базу данных\n    saved_to_db = await save_user_to_db(user_id, username, first_name, last_name)\n    \n    # Обновляем статистику команд в БД\n    if saved_to_db:\n        await update_user_data_in_db(user_id, \"command_profile\", datetime.now().isoformat())\n    \n    # Резервное сохранение в локальное хранилище\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    if \"commands_used\" not in user_data[user_id]:\n        user_data[user_id][\"commands_used\"] = {}\n    user_data[user_id][\"commands_used\"][\"/profile\"] = user_data[user_id][\"commands_used\"].get(\"/profile\", 0) + 1\n\n    # Проверяем условные сообщения\n    text = None\n    \n    # Получаем данные пользователя для проверки условий\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record and isinstance(user_record[\"user_data\"], dict):\n            user_data_dict = user_record[\"user_data\"]\n        else:\n            user_data_dict = user_record\n    else:\n        user_data_dict = {}\n    \n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: источник, желание, пол, имя\n    if (\n        check_user_variable(\"источник\", user_data_dict)[0] and\n        check_user_variable(\"желание\", user_data_dict)[0] and\n        check_user_variable(\"пол\", user_data_dict)[0] and\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        _, variable_values[\"желание\"] = check_user_variable(\"желание\", user_data_dict)\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\n🔍 Источник: {источник}\n💭 Желание продолжить: {желание}\n⚧️ Пол: {пол}\n👋 Имя: {имя}\n\nПрофиль полностью заполнен! ✅\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        if \"{желание}\" in text and variable_values[\"желание\"] is not None:\n            text = text.replace(\"{желание}\", variable_values[\"желание\"])\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_with_all_data\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    # Условие 2: user_data_exists для переменных: имя\n    elif (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\n👋 Имя: {имя}\n\nОсновная информация заполнена. Хотите пройти полный опрос?\"\"\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_basic_info\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    # Условие 3: user_data_exists для переменных: источник\n    elif (\n        check_user_variable(\"источник\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        text = \"\"\"👤 Частичный профиль:\n\n🔍 Источник: {источник}\n\nПрофиль заполнен частично. Пройдите полный опрос для получения более детальной информации.\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_partial\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (OR)\")\n    # Условие 4: user_data_exists для переменных: источник, желание, пол, имя\n    elif (\n        check_user_variable(\"источник\", user_data_dict)[0] or\n        check_user_variable(\"желание\", user_data_dict)[0] or\n        check_user_variable(\"пол\", user_data_dict)[0] or\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        _, variable_values[\"желание\"] = check_user_variable(\"желание\", user_data_dict)\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\nУ нас есть некоторая информация о вас. Пройдите полный опрос чтобы заполнить профиль полностью.\n\nИмеющиеся данные:\n🔍 Источник: {источник}\n💭 Желание: {желание}\n⚧️ Пол: {пол}\n👋 Имя: {имя}\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        if \"{желание}\" in text and variable_values[\"желание\"] is not None:\n            text = text.replace(\"{желание}\", variable_values[\"желание\"])\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_any_data\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (OR)\")\n    else:\n        text = \"\"\"👤 Профиль недоступен\n\nПохоже, вы еще не прошли опрос. Пожалуйста, введите /start чтобы заполнить профиль.\"\"\"\n        logging.info(\"Используется запасное сообщение\")\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    text = replace_variables_in_text(text, user_vars)\n    \n    # Проверка условных сообщений для клавиатуры\n    user_data_dict = user_record if user_record else user_data.get(user_id, {})\n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: источник, желание, пол, имя\n    if (\n        check_user_variable(\"источник\", user_data_dict)[0] and\n        check_user_variable(\"желание\", user_data_dict)[0] and\n        check_user_variable(\"пол\", user_data_dict)[0] and\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        _, variable_values[\"желание\"] = check_user_variable(\"желание\", user_data_dict)\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\n🔍 Источник: {источник}\n💭 Желание продолжить: {желание}\n⚧️ Пол: {пол}\n👋 Имя: {имя}\n\nПрофиль полностью заполнен! ✅\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        if \"{желание}\" in text and variable_values[\"желание\"] is not None:\n            text = text.replace(\"{желание}\", variable_values[\"желание\"])\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_with_all_data\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    # Условие 2: user_data_exists для переменных: имя\n    elif (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\n👋 Имя: {имя}\n\nОсновная информация заполнена. Хотите пройти полный опрос?\"\"\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_basic_info\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    # Условие 3: user_data_exists для переменных: источник\n    elif (\n        check_user_variable(\"источник\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        text = \"\"\"👤 Частичный профиль:\n\n🔍 Источник: {источник}\n\nПрофиль заполнен частично. Пройдите полный опрос для получения более детальной информации.\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_partial\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (OR)\")\n    # Условие 4: user_data_exists для переменных: источник, желание, пол, имя\n    elif (\n        check_user_variable(\"источник\", user_data_dict)[0] or\n        check_user_variable(\"желание\", user_data_dict)[0] or\n        check_user_variable(\"пол\", user_data_dict)[0] or\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"источник\"] = check_user_variable(\"источник\", user_data_dict)\n        _, variable_values[\"желание\"] = check_user_variable(\"желание\", user_data_dict)\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"\"\"👤 Ваш профиль:\n\nУ нас есть некоторая информация о вас. Пройдите полный опрос чтобы заполнить профиль полностью.\n\nИмеющиеся данные:\n🔍 Источник: {источник}\n💭 Желание: {желание}\n⚧️ Пол: {пол}\n👋 Имя: {имя}\"\"\"\n        conditional_parse_mode = None\n        if \"{источник}\" in text and variable_values[\"источник\"] is not None:\n            text = text.replace(\"{источник}\", variable_values[\"источник\"])\n        if \"{желание}\" in text and variable_values[\"желание\"] is not None:\n            text = text.replace(\"{желание}\", variable_values[\"желание\"])\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"profile_any_data\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (OR)\")\n    \n    # Используем условное сообщение если есть подходящее условие\n    if \"text\" not in locals():\n        # Используем исходный текст клавиатуры если условие не сработало\n        pass  # text уже установлен выше\n    \n    # Проверяем, нужно ли использовать условную клавиатуру\n    use_conditional_keyboard = conditional_keyboard is not None\n    # Определяем режим форматирования (приоритет у условного сообщения)\n    if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n        current_parse_mode = conditional_parse_mode\n    else:\n        current_parse_mode = None\n    \n    # Проверяем, нужно ли использовать условную клавиатуру\n    if use_conditional_keyboard:\n        await message.answer(text, reply_markup=conditional_keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n    else:\n        # Создаем inline клавиатуру с кнопками\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"📝 Пройти опрос\", callback_data=\"cmd_start\"))\n        builder.add(InlineKeyboardButton(text=\"✏️ Редактировать имя\", callback_data=\"XDSrTrNly5EtDtr85nN4P\"))\n        keyboard = builder.as_markup()\n        await message.answer(text, reply_markup=keyboard, parse_mode=current_parse_mode if current_parse_mode else None)\n\n# Обработчики inline кнопок\n\n@dp.callback_query(lambda c: c.data == \"nr3wIiTfBYYmpkkXMNH7n\" or c.data.startswith(\"nr3wIiTfBYYmpkkXMNH7n_btn_\"))\nasync def handle_callback_nr3wIiTfBYYmpkkXMNH7n(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"Да\"\n    \n    # Сохраняем правильную переменную в базу данных\n    await update_user_data_in_db(user_id, \"желание\", button_text)\n    logging.info(f\"Переменная желание сохранена: \" + str(button_text) + f\" (пользователь {user_id})\")\n    \n    \n    # Обрабатываем узел типа keyboard: nr3wIiTfBYYmpkkXMNH7n\n    text = \"Какой твой пол?\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Проверка условных сообщений для keyboard узла\n    user_data_dict = user_record if user_record else user_data.get(callback_query.from_user.id, {})\n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: пол\n    if (\n        check_user_variable(\"пол\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        text = \"\"\"Ваш пол: {пол}\n\nВыберите действие:\"\"\"\n        conditional_parse_mode = None\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        # Создаем inline клавиатуру для условного сообщения\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"Женщина\", callback_data=\"conditional_пол_Женщина\"))\n        builder.add(InlineKeyboardButton(text=\"Мужчина\", callback_data=\"conditional_пол_Мужчина\"))\n        keyboard = builder.as_markup()\n        conditional_keyboard = keyboard\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"gender_already_set\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    \n    # Используем условное сообщение если есть подходящее условие\n    if \"text\" not in locals():\n        text = \"Какой твой пол?\"\n    \n    # Используем условную клавиатуру если есть\n    if conditional_keyboard is not None:\n        keyboard = conditional_keyboard\n    else:\n        keyboard = None\n    \n    # Активируем сбор пользовательского ввода (основной цикл)\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"nr3wIiTfBYYmpkkXMNH7n\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"пол\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"\"\n    \n    # Проверяем, есть ли условная клавиатуря для этого узла\n    if \"keyboard\" not in locals() or keyboard is None:\n        # Создаем inline клавиатуру с кнопками (+ сбор ввода включен)\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"Женщина\", callback_data=\"XDSrTrNly5EtDtr85nN4P_btn_0_btn_0\"))\n        builder.add(InlineKeyboardButton(text=\"Мужчина\", callback_data=\"XDSrTrNly5EtDtr85nN4P_btn_1_btn_1\"))\n        keyboard = builder.as_markup()\n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text, reply_markup=keyboard)\n    \n\n@dp.callback_query(lambda c: c.data == \"1BHSLWPMao9qQvSAzuzRl\" or c.data.startswith(\"1BHSLWPMao9qQvSAzuzRl_btn_\"))\nasync def handle_callback_1BHSLWPMao9qQvSAzuzRl(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"Нет\"\n    \n    # Сохраняем правильную переменную в базу данных\n    await update_user_data_in_db(user_id, \"желание\", button_text)\n    logging.info(f\"Переменная желание сохранена: \" + str(button_text) + f\" (пользователь {user_id})\")\n    \n    \n    # Отправляем сообщение для узла 1BHSLWPMao9qQvSAzuzRl\n    text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n    \n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Без условных сообщений - используем обычную клавиатуру\n    keyboard = None\n    # Проверяем, есть ли условная клавиатура\n    if keyboard is None:\n        # Создаем inline клавиатуру для целевого узла\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"cmd_start\"))\n        builder.add(InlineKeyboardButton(text=\"👤 Профиль\", callback_data=\"cmd_profile\"))\n        keyboard = builder.as_markup()\n    # Отправляем сообщение\n    try:\n        if keyboard is not None:\n            await callback_query.message.edit_text(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.edit_text(text)\n    except Exception:\n        if keyboard is not None:\n            await callback_query.message.answer(text, reply_markup=keyboard)\n        else:\n            await callback_query.message.answer(text)\n\n@dp.callback_query(lambda c: c.data == \"XDSrTrNly5EtDtr85nN4P\" or c.data.startswith(\"XDSrTrNly5EtDtr85nN4P_btn_\"))\nasync def handle_callback_XDSrTrNly5EtDtr85nN4P(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"Женщина\"\n    \n    # Сохраняем правильную переменную в базу данных\n    await update_user_data_in_db(user_id, \"пол\", button_text)\n    logging.info(f\"Переменная пол сохранена: \" + str(button_text) + f\" (пользователь {user_id})\")\n    \n    \n    # Обрабатываем узел типа keyboard: XDSrTrNly5EtDtr85nN4P\n    text = \"Как тебя зовут?\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Проверка условных сообщений для keyboard узла\n    user_data_dict = user_record if user_record else user_data.get(callback_query.from_user.id, {})\n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: имя\n    if (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"name_already_exists\",\n            \"wait_for_input\": True,\n            \"input_variable\": \"имя\",\n            \"next_node_id\": \"profile_command\",\n            \"source_type\": \"conditional_message\"\n        }\n        \n        # Если есть условное сообщение с ожиданием ввода\n        if conditional_message_config and conditional_message_config.get(\"wait_for_input\"):\n            user_data[user_id][\"waiting_for_conditional_input\"] = conditional_message_config\n            logging.info(f\"Активировано ожидание условного ввода: {conditional_message_config}\")\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    \n    # Используем условное сообщение если есть подходящее условие\n    if \"text\" not in locals():\n        text = \"Как тебя зовут?\"\n    \n    # Используем условную клавиатуру если есть\n    if conditional_keyboard is not None:\n        keyboard = conditional_keyboard\n    else:\n        keyboard = None\n    \n    # Активируем сбор пользовательского ввода (основной цикл)\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"XDSrTrNly5EtDtr85nN4P\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"имя\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"final-message-node\"\n    \n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text)\n    \n\n@dp.callback_query(lambda c: c.data == \"XDSrTrNly5EtDtr85nN4P\" or c.data.startswith(\"XDSrTrNly5EtDtr85nN4P_btn_\"))\nasync def handle_callback_XDSrTrNly5EtDtr85nN4P(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"Мужчина\"\n    \n    # Сохраняем правильную переменную в базу данных\n    await update_user_data_in_db(user_id, \"пол\", button_text)\n    logging.info(f\"Переменная пол сохранена: \" + str(button_text) + f\" (пользователь {user_id})\")\n    \n    \n    # Обрабатываем узел типа keyboard: XDSrTrNly5EtDtr85nN4P\n    text = \"Как тебя зовут?\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Проверка условных сообщений для keyboard узла\n    user_data_dict = user_record if user_record else user_data.get(callback_query.from_user.id, {})\n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: имя\n    if (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"name_already_exists\",\n            \"wait_for_input\": True,\n            \"input_variable\": \"имя\",\n            \"next_node_id\": \"profile_command\",\n            \"source_type\": \"conditional_message\"\n        }\n        \n        # Если есть условное сообщение с ожиданием ввода\n        if conditional_message_config and conditional_message_config.get(\"wait_for_input\"):\n            user_data[user_id][\"waiting_for_conditional_input\"] = conditional_message_config\n            logging.info(f\"Активировано ожидание условного ввода: {conditional_message_config}\")\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    \n    # Используем условное сообщение если есть подходящее условие\n    if \"text\" not in locals():\n        text = \"Как тебя зовут?\"\n    \n    # Используем условную клавиатуру если есть\n    if conditional_keyboard is not None:\n        keyboard = conditional_keyboard\n    else:\n        keyboard = None\n    \n    # Активируем сбор пользовательского ввода (основной цикл)\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"XDSrTrNly5EtDtr85nN4P\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"имя\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"final-message-node\"\n    \n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text)\n    \n\n@dp.callback_query(lambda c: c.data == \"XDSrTrNly5EtDtr85nN4P\" or c.data.startswith(\"XDSrTrNly5EtDtr85nN4P_btn_\"))\nasync def handle_callback_XDSrTrNly5EtDtr85nN4P(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    user_id = callback_query.from_user.id\n    button_text = \"✏️ Редактировать имя\"\n    \n    # Сохраняем кнопку в базу данных\n    timestamp = get_moscow_time()\n    response_data = button_text  # Простое значение\n    await update_user_data_in_db(user_id, button_text, response_data)\n    logging.info(f\"Кнопка сохранена: {button_text} (пользователь {user_id})\")\n    \n    # Обрабатываем узел типа keyboard: XDSrTrNly5EtDtr85nN4P\n    text = \"Как тебя зовут?\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    \n    # Проверка условных сообщений для keyboard узла\n    user_data_dict = user_record if user_record else user_data.get(callback_query.from_user.id, {})\n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: имя\n    if (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"name_already_exists\",\n            \"wait_for_input\": True,\n            \"input_variable\": \"имя\",\n            \"next_node_id\": \"profile_command\",\n            \"source_type\": \"conditional_message\"\n        }\n        \n        # Если есть условное сообщение с ожиданием ввода\n        if conditional_message_config and conditional_message_config.get(\"wait_for_input\"):\n            user_data[user_id][\"waiting_for_conditional_input\"] = conditional_message_config\n            logging.info(f\"Активировано ожидание условного ввода: {conditional_message_config}\")\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    \n    # Используем условное сообщение если есть подходящее условие\n    if \"text\" not in locals():\n        text = \"Как тебя зовут?\"\n    \n    # Используем условную клавиатуру если есть\n    if conditional_keyboard is not None:\n        keyboard = conditional_keyboard\n    else:\n        keyboard = None\n    \n    # Активируем сбор пользовательского ввода (основной цикл)\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"XDSrTrNly5EtDtr85nN4P\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"имя\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"final-message-node\"\n    \n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text)\n    \n\n@dp.callback_query(lambda c: c.data == \"nr3wIiTfBYYmpkkXMNH7n\" or c.data.startswith(\"nr3wIiTfBYYmpkkXMNH7n_btn_\"))\nasync def handle_callback_nr3wIiTfBYYmpkkXMNH7n(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Сохраняем нажатие кнопки в базу данных\n    user_id = callback_query.from_user.id\n    \n    # Ищем текст кнопки по callback_data\n    button_display_text = \"Да\"\n    \n    # Сохраняем ответ в базу данных\n    timestamp = get_moscow_time()\n    \n    response_data = button_display_text  # Простое значение\n    \n    # Сохраняем в пользовательские данные\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    user_data[user_id][\"button_click\"] = button_display_text\n    \n    # Сохраняем в базу данных с правильным именем переменной\n    await update_user_data_in_db(user_id, \"желание\", button_display_text)\n    logging.info(f\"Переменная желание сохранена: \" + str(button_display_text) + f\" (пользователь {user_id})\")\n    \n    # Показываем сообщение об обработке\n    await callback_query.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n    \n    # ПЕРЕАДРЕСАЦИЯ: Переходим к следующему узлу после сохранения данных\n    next_node_id = \"nr3wIiTfBYYmpkkXMNH7n\"\n    try:\n        logging.info(f\"🚀 Переходим к следующему узлу после выбора кнопки: {next_node_id}\")\n        if next_node_id == \"start_node\":\n            logging.info(\"Переход к узлу start_node\")\n        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            logging.info(\"Переход к узлу --2N9FeeykMHVVlsVnSQW\")\n        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            logging.info(\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n\")\n        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n            nav_text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            await callback_query.message.delete()\n            # Узел с условными сообщениями - проверяем условия\n            user_id = callback_query.from_user.id\n            user_data_dict = await get_user_from_db(user_id) or {}\n            user_data_dict.update(user_data.get(user_id, {}))\n\n            # Функция для проверки переменных пользователя\n            def check_user_variable(var_name, user_data_dict):\n                \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n                # Сначала проверяем в поле user_data (из БД)\n                if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n                    try:\n                        import json\n                        parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                        if var_name in parsed_data:\n                            raw_value = parsed_data[var_name]\n                            if isinstance(raw_value, dict) and \"value\" in raw_value:\n                                var_value = raw_value[\"value\"]\n                                # Проверяем, что значение действительно существует и не пустое\n                                if var_value is not None and str(var_value).strip() != \"\":\n                                    return True, str(var_value)\n                            else:\n                                # Проверяем, что значение действительно существует и не пустое\n                                if raw_value is not None and str(raw_value).strip() != \"\":\n                                    return True, str(raw_value)\n                    except (json.JSONDecodeError, TypeError):\n                        pass\n                \n                # Проверяем в локальных данных (без вложенности user_data)\n                if var_name in user_data_dict:\n                    variable_data = user_data_dict.get(var_name)\n                    if isinstance(variable_data, dict) and \"value\" in variable_data:\n                        var_value = variable_data[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    elif variable_data is not None and str(variable_data).strip() != \"\":\n                        return True, str(variable_data)\n                \n                return False, None\n\n            # Условие 1: user_data_exists для переменных: имя\n            if (\n                check_user_variable(\"имя\", user_data_dict)[0]\n            ):\n                # Собираем значения переменных\n                variable_values = {}\n                _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n                text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n                if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n                    text = text.replace(\"{имя}\", variable_values[\"имя\"])\n                await bot.send_message(user_id, text)\n                # Настраиваем ожидание текстового ввода для условного сообщения\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"profile_command\"\n                }\n            else:\n                # Fallback сообщение\n                nav_text = \"Как тебя зовут?\"\n                # Настраиваем ожидание ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n                await bot.send_message(user_id, nav_text)\n        elif next_node_id == \"final-message-node\":\n            nav_text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"profile_command\":\n            # Выполняем команду /profile\n            from types import SimpleNamespace\n            fake_message = SimpleNamespace()\n            fake_message.from_user = callback_query.from_user\n            fake_message.chat = callback_query.message.chat\n            fake_message.date = callback_query.message.date\n            fake_message.answer = callback_query.message.answer\n            await profile_handler(fake_message)\n        else:\n            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n    except Exception as e:\n        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n    \n    return  # Завершаем обработку после переадресации\n    \n    # Проверяем условные сообщения\n    text = None\n    \n    # Получаем данные пользователя для проверки условий\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_data_dict = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_data_dict = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_data_dict = user_record[\"user_data\"]\n            else:\n                user_data_dict = {}\n        else:\n            user_data_dict = user_record\n    else:\n        user_data_dict = {}\n    \n    # Функция для замены переменных в тексте\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: пол\n    if (\n        check_user_variable(\"пол\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"пол\"] = check_user_variable(\"пол\", user_data_dict)\n        text = \"\"\"Ваш пол: {пол}\n\nВыберите действие:\"\"\"\n        conditional_parse_mode = None\n        if \"{пол}\" in text and variable_values[\"пол\"] is not None:\n            text = text.replace(\"{пол}\", variable_values[\"пол\"])\n        # Создаем inline клавиатуру для условного сообщения\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"Женщина\", callback_data=\"conditional_пол_Женщина\"))\n        builder.add(InlineKeyboardButton(text=\"Мужчина\", callback_data=\"conditional_пол_Мужчина\"))\n        keyboard = builder.as_markup()\n        conditional_keyboard = keyboard\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"gender_already_set\",\n            \"wait_for_input\": False,\n            \"input_variable\": \"\",\n            \"next_node_id\": \"\",\n            \"source_type\": \"conditional_message\"\n        }\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    else:\n        text = \"Какой твой пол?\"\n        text = replace_variables_in_text(text, user_data_dict)\n        logging.info(\"Используется запасное сообщение\")\n    \n    # Активируем сбор пользовательского ввода\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"nr3wIiTfBYYmpkkXMNH7n\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"пол\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"\"\n    \n    # Проверяем, есть ли условная клавиатура\n    if \"keyboard\" not in locals() or keyboard is None:\n        # Создаем inline клавиатуру с кнопками (+ сбор ввода включен)\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"Женщина\", callback_data=\"btn-female\"))\n        builder.add(InlineKeyboardButton(text=\"Мужчина\", callback_data=\"btn-male\"))\n        keyboard = builder.as_markup()\n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text, reply_markup=keyboard)\n    \n\n@dp.callback_query(lambda c: c.data == \"1BHSLWPMao9qQvSAzuzRl\" or c.data.startswith(\"1BHSLWPMao9qQvSAzuzRl_btn_\"))\nasync def handle_callback_1BHSLWPMao9qQvSAzuzRl(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Сохраняем нажатие кнопки в базу данных\n    user_id = callback_query.from_user.id\n    \n    # Ищем текст кнопки по callback_data\n    button_display_text = \"Нет\"\n    \n    # Сохраняем ответ в базу данных\n    timestamp = get_moscow_time()\n    \n    response_data = button_display_text  # Простое значение\n    \n    # Сохраняем в пользовательские данные\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    user_data[user_id][\"button_click\"] = button_display_text\n    \n    # Сохраняем в базу данных с правильным именем переменной\n    await update_user_data_in_db(user_id, \"желание\", button_display_text)\n    logging.info(f\"Переменная желание сохранена: \" + str(button_display_text) + f\" (пользователь {user_id})\")\n    \n    # Показываем сообщение об обработке\n    await callback_query.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n    \n    # ПЕРЕАДРЕСАЦИЯ: Переходим к следующему узлу после сохранения данных\n    next_node_id = \"1BHSLWPMao9qQvSAzuzRl\"\n    try:\n        logging.info(f\"🚀 Переходим к следующему узлу после выбора кнопки: {next_node_id}\")\n        if next_node_id == \"start_node\":\n            logging.info(\"Переход к узлу start_node\")\n        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            logging.info(\"Переход к узлу --2N9FeeykMHVVlsVnSQW\")\n        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            logging.info(\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n\")\n        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n            nav_text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            await callback_query.message.delete()\n            # Узел с условными сообщениями - проверяем условия\n            user_id = callback_query.from_user.id\n            user_data_dict = await get_user_from_db(user_id) or {}\n            user_data_dict.update(user_data.get(user_id, {}))\n\n            # Функция для проверки переменных пользователя\n            def check_user_variable(var_name, user_data_dict):\n                \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n                # Сначала проверяем в поле user_data (из БД)\n                if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n                    try:\n                        import json\n                        parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                        if var_name in parsed_data:\n                            raw_value = parsed_data[var_name]\n                            if isinstance(raw_value, dict) and \"value\" in raw_value:\n                                var_value = raw_value[\"value\"]\n                                # Проверяем, что значение действительно существует и не пустое\n                                if var_value is not None and str(var_value).strip() != \"\":\n                                    return True, str(var_value)\n                            else:\n                                # Проверяем, что значение действительно существует и не пустое\n                                if raw_value is not None and str(raw_value).strip() != \"\":\n                                    return True, str(raw_value)\n                    except (json.JSONDecodeError, TypeError):\n                        pass\n                \n                # Проверяем в локальных данных (без вложенности user_data)\n                if var_name in user_data_dict:\n                    variable_data = user_data_dict.get(var_name)\n                    if isinstance(variable_data, dict) and \"value\" in variable_data:\n                        var_value = variable_data[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    elif variable_data is not None and str(variable_data).strip() != \"\":\n                        return True, str(variable_data)\n                \n                return False, None\n\n            # Условие 1: user_data_exists для переменных: имя\n            if (\n                check_user_variable(\"имя\", user_data_dict)[0]\n            ):\n                # Собираем значения переменных\n                variable_values = {}\n                _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n                text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n                if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n                    text = text.replace(\"{имя}\", variable_values[\"имя\"])\n                await bot.send_message(user_id, text)\n                # Настраиваем ожидание текстового ввода для условного сообщения\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"profile_command\"\n                }\n            else:\n                # Fallback сообщение\n                nav_text = \"Как тебя зовут?\"\n                # Настраиваем ожидание ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n                await bot.send_message(user_id, nav_text)\n        elif next_node_id == \"final-message-node\":\n            nav_text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"profile_command\":\n            # Выполняем команду /profile\n            from types import SimpleNamespace\n            fake_message = SimpleNamespace()\n            fake_message.from_user = callback_query.from_user\n            fake_message.chat = callback_query.message.chat\n            fake_message.date = callback_query.message.date\n            fake_message.answer = callback_query.message.answer\n            await profile_handler(fake_message)\n        else:\n            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n    except Exception as e:\n        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n    \n    return  # Завершаем обработку после переадресации\n    \n    text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"cmd_start\"))\n    builder.add(InlineKeyboardButton(text=\"👤 Профиль\", callback_data=\"cmd_profile\"))\n    keyboard = builder.as_markup()\n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text, reply_markup=keyboard)\n\n@dp.callback_query(lambda c: c.data == \"XDSrTrNly5EtDtr85nN4P\" or c.data.startswith(\"XDSrTrNly5EtDtr85nN4P_btn_\"))\nasync def handle_callback_XDSrTrNly5EtDtr85nN4P(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Сохраняем нажатие кнопки в базу данных\n    user_id = callback_query.from_user.id\n    \n    # Ищем текст кнопки по callback_data\n    # Определяем текст кнопки по callback_data\n    button_display_text = \"Неизвестная кнопка\"\n    if callback_query.data.endswith(\"_btn_0\"):\n        button_display_text = \"Женщина\"\n    if callback_query.data.endswith(\"_btn_1\"):\n        button_display_text = \"Мужчина\"\n    # Дополнительная проверка по точному соответствию callback_data\n    if callback_query.data == \"XDSrTrNly5EtDtr85nN4P\":\n        button_display_text = \"Женщина\"\n    if callback_query.data == \"XDSrTrNly5EtDtr85nN4P\":\n        button_display_text = \"Мужчина\"\n    \n    # Сохраняем ответ в базу данных\n    timestamp = get_moscow_time()\n    \n    response_data = button_display_text  # Простое значение\n    \n    # Сохраняем в пользовательские данные\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    user_data[user_id][\"button_click\"] = button_display_text\n    \n    # Сохраняем в базу данных с правильным именем переменной\n    await update_user_data_in_db(user_id, \"пол\", \"Женщина\")\n    logging.info(f\"Переменная пол сохранена: \" + str(\"Женщина\") + f\" (пользователь {user_id})\")\n    \n    # Показываем сообщение об обработке\n    await callback_query.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n    \n    # ПЕРЕАДРЕСАЦИЯ: Переходим к следующему узлу после сохранения данных\n    next_node_id = \"XDSrTrNly5EtDtr85nN4P\"\n    try:\n        logging.info(f\"🚀 Переходим к следующему узлу после выбора кнопки: {next_node_id}\")\n        if next_node_id == \"start_node\":\n            logging.info(\"Переход к узлу start_node\")\n        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            logging.info(\"Переход к узлу --2N9FeeykMHVVlsVnSQW\")\n        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            logging.info(\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n\")\n        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n            nav_text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            await callback_query.message.delete()\n            # Узел с условными сообщениями - проверяем условия\n            user_id = callback_query.from_user.id\n            user_data_dict = await get_user_from_db(user_id) or {}\n            user_data_dict.update(user_data.get(user_id, {}))\n\n            # Функция для проверки переменных пользователя\n            def check_user_variable(var_name, user_data_dict):\n                \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n                # Сначала проверяем в поле user_data (из БД)\n                if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n                    try:\n                        import json\n                        parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                        if var_name in parsed_data:\n                            raw_value = parsed_data[var_name]\n                            if isinstance(raw_value, dict) and \"value\" in raw_value:\n                                var_value = raw_value[\"value\"]\n                                # Проверяем, что значение действительно существует и не пустое\n                                if var_value is not None and str(var_value).strip() != \"\":\n                                    return True, str(var_value)\n                            else:\n                                # Проверяем, что значение действительно существует и не пустое\n                                if raw_value is not None and str(raw_value).strip() != \"\":\n                                    return True, str(raw_value)\n                    except (json.JSONDecodeError, TypeError):\n                        pass\n                \n                # Проверяем в локальных данных (без вложенности user_data)\n                if var_name in user_data_dict:\n                    variable_data = user_data_dict.get(var_name)\n                    if isinstance(variable_data, dict) and \"value\" in variable_data:\n                        var_value = variable_data[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    elif variable_data is not None and str(variable_data).strip() != \"\":\n                        return True, str(variable_data)\n                \n                return False, None\n\n            # Условие 1: user_data_exists для переменных: имя\n            if (\n                check_user_variable(\"имя\", user_data_dict)[0]\n            ):\n                # Собираем значения переменных\n                variable_values = {}\n                _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n                text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n                if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n                    text = text.replace(\"{имя}\", variable_values[\"имя\"])\n                await bot.send_message(user_id, text)\n                # Настраиваем ожидание текстового ввода для условного сообщения\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"profile_command\"\n                }\n            else:\n                # Fallback сообщение\n                nav_text = \"Как тебя зовут?\"\n                # Настраиваем ожидание ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n                await bot.send_message(user_id, nav_text)\n        elif next_node_id == \"final-message-node\":\n            nav_text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"profile_command\":\n            # Выполняем команду /profile\n            from types import SimpleNamespace\n            fake_message = SimpleNamespace()\n            fake_message.from_user = callback_query.from_user\n            fake_message.chat = callback_query.message.chat\n            fake_message.date = callback_query.message.date\n            fake_message.answer = callback_query.message.answer\n            await profile_handler(fake_message)\n        else:\n            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n    except Exception as e:\n        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n    \n    return  # Завершаем обработку после переадресации\n    \n    # Проверяем условные сообщения\n    text = None\n    \n    # Получаем данные пользователя для проверки условий\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_data_dict = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_data_dict = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_data_dict = user_record[\"user_data\"]\n            else:\n                user_data_dict = {}\n        else:\n            user_data_dict = user_record\n    else:\n        user_data_dict = {}\n    \n    # Функция для замены переменных в тексте\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    conditional_parse_mode = None\n    conditional_keyboard = None\n    # Функция для проверки переменных пользователя\n    def check_user_variable(var_name, user_data_dict):\n        \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n        # Сначала проверяем в поле user_data (из БД)\n        if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n            try:\n                import json\n                parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                if var_name in parsed_data:\n                    raw_value = parsed_data[var_name]\n                    if isinstance(raw_value, dict) and \"value\" in raw_value:\n                        var_value = raw_value[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    else:\n                        # Проверяем, что значение действительно существует и не пустое\n                        if raw_value is not None and str(raw_value).strip() != \"\":\n                            return True, str(raw_value)\n            except (json.JSONDecodeError, TypeError):\n                pass\n        \n        # Проверяем в локальных данных (без вложенности user_data)\n        if var_name in user_data_dict:\n            variable_data = user_data_dict.get(var_name)\n            if isinstance(variable_data, dict) and \"value\" in variable_data:\n                var_value = variable_data[\"value\"]\n                # Проверяем, что значение действительно существует и не пустое\n                if var_value is not None and str(var_value).strip() != \"\":\n                    return True, str(var_value)\n            elif variable_data is not None and str(variable_data).strip() != \"\":\n                return True, str(variable_data)\n        \n        return False, None\n    \n    # Условие 1: user_data_exists для переменных: имя\n    if (\n        check_user_variable(\"имя\", user_data_dict)[0]\n    ):\n        # Собираем значения переменных\n        variable_values = {}\n        _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n        text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n        conditional_parse_mode = None\n        if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n            text = text.replace(\"{имя}\", variable_values[\"имя\"])\n        # Настраиваем ожидание текстового ввода для условного сообщения\n        conditional_message_config = {\n            \"condition_id\": \"name_already_exists\",\n            \"wait_for_input\": True,\n            \"input_variable\": \"имя\",\n            \"next_node_id\": \"profile_command\",\n            \"source_type\": \"conditional_message\"\n        }\n        \n        # Если есть условное сообщение с ожиданием ввода\n        if conditional_message_config and conditional_message_config.get(\"wait_for_input\"):\n            user_data[user_id][\"waiting_for_conditional_input\"] = conditional_message_config\n            logging.info(f\"Активировано ожидание условного ввода: {conditional_message_config}\")\n        logging.info(f\"Условие выполнено: переменные {variable_values} (AND)\")\n    else:\n        text = \"Как тебя зовут?\"\n        text = replace_variables_in_text(text, user_data_dict)\n        logging.info(\"Используется основное сообщение узла\")\n    \n    # Активируем сбор пользовательского ввода\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"XDSrTrNly5EtDtr85nN4P\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"имя\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"final-message-node\"\n    \n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text)\n    \n\n@dp.callback_query(lambda c: c.data == \"--2N9FeeykMHVVlsVnSQW\" or c.data.startswith(\"--2N9FeeykMHVVlsVnSQW_btn_\"))\nasync def handle_callback___2N9FeeykMHVVlsVnSQW(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Сохраняем нажатие кнопки в базу данных\n    user_id = callback_query.from_user.id\n    \n    # Ищем текст кнопки по callback_data\n    button_display_text = \"Кнопка --2N9FeeykMHVVlsVnSQW\"\n    \n    # Сохраняем ответ в базу данных\n    timestamp = get_moscow_time()\n    \n    response_data = button_display_text  # Простое значение\n    \n    # Сохраняем в пользовательские данные\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    user_data[user_id][\"button_click\"] = button_display_text\n    \n    # Сохраняем в базу данных с правильным именем переменной\n    await update_user_data_in_db(user_id, \"button_click\", button_display_text)\n    logging.info(f\"Переменная button_click сохранена: \" + str(button_display_text) + f\" (пользователь {user_id})\")\n    \n    # Показываем сообщение об обработке\n    await callback_query.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n    \n    # ПЕРЕАДРЕСАЦИЯ: Переходим к следующему узлу после сохранения данных\n    next_node_id = \"--2N9FeeykMHVVlsVnSQW\"\n    try:\n        logging.info(f\"🚀 Переходим к следующему узлу после выбора кнопки: {next_node_id}\")\n        if next_node_id == \"start_node\":\n            logging.info(\"Переход к узлу start_node\")\n        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            logging.info(\"Переход к узлу --2N9FeeykMHVVlsVnSQW\")\n        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            logging.info(\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n\")\n        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n            nav_text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            await callback_query.message.delete()\n            # Узел с условными сообщениями - проверяем условия\n            user_id = callback_query.from_user.id\n            user_data_dict = await get_user_from_db(user_id) or {}\n            user_data_dict.update(user_data.get(user_id, {}))\n\n            # Функция для проверки переменных пользователя\n            def check_user_variable(var_name, user_data_dict):\n                \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n                # Сначала проверяем в поле user_data (из БД)\n                if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n                    try:\n                        import json\n                        parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                        if var_name in parsed_data:\n                            raw_value = parsed_data[var_name]\n                            if isinstance(raw_value, dict) and \"value\" in raw_value:\n                                var_value = raw_value[\"value\"]\n                                # Проверяем, что значение действительно существует и не пустое\n                                if var_value is not None and str(var_value).strip() != \"\":\n                                    return True, str(var_value)\n                            else:\n                                # Проверяем, что значение действительно существует и не пустое\n                                if raw_value is not None and str(raw_value).strip() != \"\":\n                                    return True, str(raw_value)\n                    except (json.JSONDecodeError, TypeError):\n                        pass\n                \n                # Проверяем в локальных данных (без вложенности user_data)\n                if var_name in user_data_dict:\n                    variable_data = user_data_dict.get(var_name)\n                    if isinstance(variable_data, dict) and \"value\" in variable_data:\n                        var_value = variable_data[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    elif variable_data is not None and str(variable_data).strip() != \"\":\n                        return True, str(variable_data)\n                \n                return False, None\n\n            # Условие 1: user_data_exists для переменных: имя\n            if (\n                check_user_variable(\"имя\", user_data_dict)[0]\n            ):\n                # Собираем значения переменных\n                variable_values = {}\n                _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n                text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n                if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n                    text = text.replace(\"{имя}\", variable_values[\"имя\"])\n                await bot.send_message(user_id, text)\n                # Настраиваем ожидание текстового ввода для условного сообщения\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"profile_command\"\n                }\n            else:\n                # Fallback сообщение\n                nav_text = \"Как тебя зовут?\"\n                # Настраиваем ожидание ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n                await bot.send_message(user_id, nav_text)\n        elif next_node_id == \"final-message-node\":\n            nav_text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"profile_command\":\n            # Выполняем команду /profile\n            from types import SimpleNamespace\n            fake_message = SimpleNamespace()\n            fake_message.from_user = callback_query.from_user\n            fake_message.chat = callback_query.message.chat\n            fake_message.date = callback_query.message.date\n            fake_message.answer = callback_query.message.answer\n            await profile_handler(fake_message)\n        else:\n            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n    except Exception as e:\n        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n    \n    return  # Завершаем обработку после переадресации\n    \n    text = \"Ты хочешься продолжить свою жизнь с чатом?\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    # Активируем сбор пользовательского ввода\n    if callback_query.from_user.id not in user_data:\n        user_data[callback_query.from_user.id] = {}\n    \n    user_data[callback_query.from_user.id][\"waiting_for_input\"] = \"--2N9FeeykMHVVlsVnSQW\"\n    user_data[callback_query.from_user.id][\"input_type\"] = \"text\"\n    user_data[callback_query.from_user.id][\"input_variable\"] = \"желание\"\n    user_data[callback_query.from_user.id][\"save_to_database\"] = True\n    user_data[callback_query.from_user.id][\"input_target_node_id\"] = \"\"\n    \n    # Проверяем, есть ли условная клавиатура\n    if \"keyboard\" not in locals() or keyboard is None:\n        # Создаем inline клавиатуру с кнопками (+ сбор ввода включен)\n        builder = InlineKeyboardBuilder()\n        builder.add(InlineKeyboardButton(text=\"Да\", callback_data=\"btn-1\"))\n        builder.add(InlineKeyboardButton(text=\"Нет\", callback_data=\"btn-2\"))\n        keyboard = builder.as_markup()\n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text, reply_markup=keyboard)\n    \n\n@dp.callback_query(lambda c: c.data == \"final-message-node\" or c.data.startswith(\"final-message-node_btn_\"))\nasync def handle_callback_final_message_node(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Сохраняем нажатие кнопки в базу данных\n    user_id = callback_query.from_user.id\n    \n    # Ищем текст кнопки по callback_data\n    button_display_text = \"Кнопка final-message-node\"\n    \n    # Сохраняем ответ в базу данных\n    timestamp = get_moscow_time()\n    \n    response_data = button_display_text  # Простое значение\n    \n    # Сохраняем в пользовательские данные\n    if user_id not in user_data:\n        user_data[user_id] = {}\n    user_data[user_id][\"button_click\"] = button_display_text\n    \n    # Сохраняем в базу данных с правильным именем переменной\n    await update_user_data_in_db(user_id, \"button_click\", button_display_text)\n    logging.info(f\"Переменная button_click сохранена: \" + str(button_display_text) + f\" (пользователь {user_id})\")\n    \n    # Показываем сообщение об обработке\n    await callback_query.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n    \n    # ПЕРЕАДРЕСАЦИЯ: Переходим к следующему узлу после сохранения данных\n    next_node_id = \"final-message-node\"\n    try:\n        logging.info(f\"🚀 Переходим к следующему узлу после выбора кнопки: {next_node_id}\")\n        if next_node_id == \"start_node\":\n            logging.info(\"Переход к узлу start_node\")\n        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            logging.info(\"Переход к узлу --2N9FeeykMHVVlsVnSQW\")\n        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            logging.info(\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n\")\n        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n            nav_text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            await callback_query.message.delete()\n            # Узел с условными сообщениями - проверяем условия\n            user_id = callback_query.from_user.id\n            user_data_dict = await get_user_from_db(user_id) or {}\n            user_data_dict.update(user_data.get(user_id, {}))\n\n            # Функция для проверки переменных пользователя\n            def check_user_variable(var_name, user_data_dict):\n                \"\"\"Проверяет существование и получает значение переменной пользователя\"\"\"\n                # Сначала проверяем в поле user_data (из БД)\n                if \"user_data\" in user_data_dict and user_data_dict[\"user_data\"]:\n                    try:\n                        import json\n                        parsed_data = json.loads(user_data_dict[\"user_data\"]) if isinstance(user_data_dict[\"user_data\"], str) else user_data_dict[\"user_data\"]\n                        if var_name in parsed_data:\n                            raw_value = parsed_data[var_name]\n                            if isinstance(raw_value, dict) and \"value\" in raw_value:\n                                var_value = raw_value[\"value\"]\n                                # Проверяем, что значение действительно существует и не пустое\n                                if var_value is not None and str(var_value).strip() != \"\":\n                                    return True, str(var_value)\n                            else:\n                                # Проверяем, что значение действительно существует и не пустое\n                                if raw_value is not None and str(raw_value).strip() != \"\":\n                                    return True, str(raw_value)\n                    except (json.JSONDecodeError, TypeError):\n                        pass\n                \n                # Проверяем в локальных данных (без вложенности user_data)\n                if var_name in user_data_dict:\n                    variable_data = user_data_dict.get(var_name)\n                    if isinstance(variable_data, dict) and \"value\" in variable_data:\n                        var_value = variable_data[\"value\"]\n                        # Проверяем, что значение действительно существует и не пустое\n                        if var_value is not None and str(var_value).strip() != \"\":\n                            return True, str(var_value)\n                    elif variable_data is not None and str(variable_data).strip() != \"\":\n                        return True, str(variable_data)\n                \n                return False, None\n\n            # Условие 1: user_data_exists для переменных: имя\n            if (\n                check_user_variable(\"имя\", user_data_dict)[0]\n            ):\n                # Собираем значения переменных\n                variable_values = {}\n                _, variable_values[\"имя\"] = check_user_variable(\"имя\", user_data_dict)\n                text = \"У вас уже есть имя: {имя}. Введите новое имя:\"\n                if \"{имя}\" in text and variable_values[\"имя\"] is not None:\n                    text = text.replace(\"{имя}\", variable_values[\"имя\"])\n                await bot.send_message(user_id, text)\n                # Настраиваем ожидание текстового ввода для условного сообщения\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"profile_command\"\n                }\n            else:\n                # Fallback сообщение\n                nav_text = \"Как тебя зовут?\"\n                # Настраиваем ожидание ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n                await bot.send_message(user_id, nav_text)\n        elif next_node_id == \"final-message-node\":\n            nav_text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n            await callback_query.message.edit_text(nav_text)\n        elif next_node_id == \"profile_command\":\n            # Выполняем команду /profile\n            from types import SimpleNamespace\n            fake_message = SimpleNamespace()\n            fake_message.from_user = callback_query.from_user\n            fake_message.chat = callback_query.message.chat\n            fake_message.date = callback_query.message.date\n            fake_message.answer = callback_query.message.answer\n            await profile_handler(fake_message)\n        else:\n            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n    except Exception as e:\n        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n    \n    return  # Завершаем обработку после переадресации\n    \n    text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n    # Подставляем все доступные переменные пользователя в текст\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Безопасно извлекаем user_data\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    # Заменяем все переменные в тексте\n    import re\n    def replace_variables_in_text(text_content, variables_dict):\n        if not text_content or not variables_dict:\n            return text_content\n        \n        for var_name, var_data in variables_dict.items():\n            placeholder = \"{\" + var_name + \"}\"\n            if placeholder in text_content:\n                if isinstance(var_data, dict) and \"value\" in var_data:\n                    var_value = str(var_data[\"value\"]) if var_data[\"value\"] is not None else var_name\n                elif var_data is not None:\n                    var_value = str(var_data)\n                else:\n                    var_value = var_name  # Показываем имя переменной если значения нет\n                text_content = text_content.replace(placeholder, var_value)\n        return text_content\n    \n    text = replace_variables_in_text(text, user_vars)\n    builder = InlineKeyboardBuilder()\n    builder.add(InlineKeyboardButton(text=\"👤 Посмотреть профиль\", callback_data=\"cmd_profile\"))\n    builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"cmd_start\"))\n    keyboard = builder.as_markup()\n    # Пытаемся редактировать сообщение, если не получается - отправляем новое\n    try:\n        await callback_query.message.edit_text(text, reply_markup=keyboard)\n    except Exception as e:\n        logging.warning(f\"Не удалось редактировать сообщение: {e}. Отправляем новое.\")\n        await callback_query.message.answer(text, reply_markup=keyboard)\n\n\n# Универсальный обработчик пользовательского ввода\n@dp.message(F.text)\nasync def handle_user_input(message: types.Message):\n    user_id = message.from_user.id\n    \n    # Проверяем, ожидаем ли мы ввод для условного сообщения\n    if user_id in user_data and \"waiting_for_conditional_input\" in user_data[user_id]:\n        config = user_data[user_id][\"waiting_for_conditional_input\"]\n        user_text = message.text\n        \n        # Сохраняем текстовый ввод для условного сообщения\n        condition_id = config.get(\"condition_id\", \"unknown\")\n        next_node_id = config.get(\"next_node_id\")\n        \n        # Сохраняем ответ пользователя\n        timestamp = get_moscow_time()\n        # Используем переменную из конфигурации или создаем автоматическую\n        input_variable = config.get(\"input_variable\", \"\")\n        if input_variable:\n            variable_name = input_variable\n        else:\n            variable_name = f\"conditional_response_{condition_id}\"\n        \n        # Сохраняем в пользовательские данные\n        user_data[user_id][variable_name] = user_text\n        \n        # Сохраняем в базу данных\n        saved_to_db = await update_user_data_in_db(user_id, variable_name, user_text)\n        if saved_to_db:\n            logging.info(f\"✅ Условный ответ сохранен в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n        else:\n            logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n        \n        # Отправляем подтверждение\n        await message.answer(\"✅ Спасибо за ваш ответ! Обрабатываю...\")\n        \n        # Очищаем состояние ожидания\n        del user_data[user_id][\"waiting_for_conditional_input\"]\n        \n        logging.info(f\"Получен ответ на условное сообщение: {variable_name} = {user_text}\")\n        \n        # Переходим к следующему узлу если указан\n        if next_node_id:\n            try:\n                logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n                \n                # Проверяем, является ли это командой\n                if next_node_id == \"profile_command\":\n                    logging.info(\"Переход к команде /profile\")\n                    await profile_handler(message)\n                else:\n                    # Создаем фиктивный callback для навигации к обычному узлу\n                    import types as aiogram_types\n                    fake_callback = aiogram_types.SimpleNamespace(\n                        id=\"conditional_nav\",\n                        from_user=message.from_user,\n                        chat_instance=\"\",\n                        data=next_node_id,\n                        message=message,\n                        answer=lambda text=\"\", show_alert=False: asyncio.sleep(0)\n                    )\n                    \n                    if next_node_id == \"start_node\":\n                        await handle_callback_start_node(fake_callback)\n                    elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n                        await handle_callback___2N9FeeykMHVVlsVnSQW(fake_callback)\n                    elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n                        await handle_callback_nr3wIiTfBYYmpkkXMNH7n(fake_callback)\n                    elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n                        await handle_callback_1BHSLWPMao9qQvSAzuzRl(fake_callback)\n                    elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n                        await handle_callback_XDSrTrNly5EtDtr85nN4P(fake_callback)\n                    elif next_node_id == \"final-message-node\":\n                        await handle_callback_final_message_node(fake_callback)\n                    elif next_node_id == \"profile_command\":\n                        await handle_callback_profile_command(fake_callback)\n                    else:\n                        logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n            except Exception as e:\n                logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n        \n        return  # Завершаем обработку для условного сообщения\n    \n    # Проверяем, ожидаем ли мы кнопочный ответ через reply клавиатуру\n    if user_id in user_data and \"button_response_config\" in user_data[user_id]:\n        config = user_data[user_id][\"button_response_config\"]\n        user_text = message.text\n        \n        # Ищем выбранный вариант среди доступных опций\n        selected_option = None\n        for option in config.get(\"options\", []):\n            if option[\"text\"] == user_text:\n                selected_option = option\n                break\n        \n        if selected_option:\n            selected_value = selected_option[\"value\"]\n            selected_text = selected_option[\"text\"]\n            \n            # Сохраняем ответ пользователя\n            variable_name = config.get(\"variable\", \"button_response\")\n            timestamp = get_moscow_time()\n            node_id = config.get(\"node_id\", \"unknown\")\n            \n            # Создаем структурированный ответ\n            response_data = {\n                \"value\": selected_value,\n                \"text\": selected_text,\n                \"type\": \"button_choice\",\n                \"timestamp\": timestamp,\n                \"nodeId\": node_id,\n                \"variable\": variable_name\n            }\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][variable_name] = response_data\n            \n            # Сохраняем в базу данных если включено\n            if config.get(\"save_to_database\"):\n                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n                if saved_to_db:\n                    logging.info(f\"✅ Кнопочный ответ сохранен в БД: {variable_name} = {selected_text} (пользователь {user_id})\")\n                else:\n                    logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            # Отправляем сообщение об успехе\n            success_message = config.get(\"success_message\", \"Спасибо за ваш выбор!\")\n            await message.answer(f\"{success_message}\\n\\n✅ Ваш выбор: {selected_text}\", reply_markup=ReplyKeyboardRemove())\n            \n            # Очищаем состояние\n            del user_data[user_id][\"button_response_config\"]\n            \n            logging.info(f\"Получен кнопочный ответ через reply клавиатуру: {variable_name} = {selected_text}\")\n            \n            # Навигация на основе действия кнопки\n            option_action = selected_option.get(\"action\", \"goto\")\n            option_target = selected_option.get(\"target\", \"\")\n            option_url = selected_option.get(\"url\", \"\")\n            \n            if option_action == \"url\" and option_url:\n                # Открытие ссылки\n                url = option_url\n                keyboard = InlineKeyboardMarkup(inline_keyboard=[\n                    [InlineKeyboardButton(text=\"🔗 Открыть ссылку\", url=url)]\n                ])\n                await message.answer(\"Нажмите кнопку ниже, чтобы открыть ссылку:\", reply_markup=keyboard)\n            elif option_action == \"command\" and option_target:\n                # Выполнение команды\n                command = option_target\n                # Создаем фиктивное сообщение для выполнения команды\n                import types as aiogram_types\n                fake_message = aiogram_types.SimpleNamespace(\n                    from_user=message.from_user,\n                    chat=message.chat,\n                    text=command,\n                    message_id=message.message_id\n                )\n                \n                if command == \"/start\":\n                    try:\n                        await start_handler(fake_message)\n                    except Exception as e:\n                        logging.error(f\"Ошибка выполнения команды /start: {e}\")\n                elif command == \"/profile\":\n                    try:\n                        await _profile_handler(fake_message)\n                    except Exception as e:\n                        logging.error(f\"Ошибка выполнения команды /profile: {e}\")\n                else:\n                    logging.warning(f\"Неизвестная команда: {command}\")\n            elif option_action == \"goto\" and option_target:\n                # Переход к узлу\n                target_node_id = option_target\n                try:\n                    # Вызываем обработчик для целевого узла\n                    if target_node_id == \"start_node\":\n                        await handle_callback_start_node(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n                        await handle_callback___2N9FeeykMHVVlsVnSQW(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n                        await handle_callback_nr3wIiTfBYYmpkkXMNH7n(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n                        await handle_callback_1BHSLWPMao9qQvSAzuzRl(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n                        await handle_callback_XDSrTrNly5EtDtr85nN4P(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"final-message-node\":\n                        await handle_callback_final_message_node(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    elif target_node_id == \"profile_command\":\n                        await handle_callback_profile_command(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=target_node_id, message=message))\n                    else:\n                        logging.warning(f\"Неизвестный целевой узел: {target_node_id}\")\n                except Exception as e:\n                    logging.error(f\"Ошибка при переходе к узлу {target_node_id}: {e}\")\n            else:\n                # Fallback к старой системе next_node_id если нет action\n                next_node_id = config.get(\"next_node_id\")\n                if next_node_id:\n                    try:\n                        # Вызываем обработчик для следующего узла\n                        if next_node_id == \"start_node\":\n                            await handle_callback_start_node(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n                            await handle_callback___2N9FeeykMHVVlsVnSQW(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n                            await handle_callback_nr3wIiTfBYYmpkkXMNH7n(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n                            await handle_callback_1BHSLWPMao9qQvSAzuzRl(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n                            await handle_callback_XDSrTrNly5EtDtr85nN4P(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"final-message-node\":\n                            await handle_callback_final_message_node(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        elif next_node_id == \"profile_command\":\n                            await handle_callback_profile_command(types.CallbackQuery(id=\"reply_nav\", from_user=message.from_user, chat_instance=\"\", data=next_node_id, message=message))\n                        else:\n                            logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n                    except Exception as e:\n                        logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n            return\n        else:\n            # Неверный выбор - показываем доступные варианты\n            available_options = [option[\"text\"] for option in config.get(\"options\", [])]\n            options_text = \"\\n\".join([f\"• {opt}\" for opt in available_options])\n            await message.answer(f\"❌ Неверный выбор. Пожалуйста, выберите один из предложенных вариантов:\\n\\n{options_text}\")\n            return\n    \n    # Проверяем, ожидаем ли мы текстовый ввод от пользователя (универсальная система)\n    if user_id in user_data and \"waiting_for_input\" in user_data[user_id]:\n        # Обрабатываем ввод через универсальную систему\n        waiting_config = user_data[user_id][\"waiting_for_input\"]\n        \n        # Проверяем формат конфигурации - новый (словарь) или старый (строка)\n        if isinstance(waiting_config, dict):\n            # Новый формат - извлекаем данные из словаря\n            waiting_node_id = waiting_config.get(\"node_id\")\n            input_type = waiting_config.get(\"type\", \"text\")\n            variable_name = waiting_config.get(\"variable\", \"user_response\")\n            save_to_database = waiting_config.get(\"save_to_database\", False)\n            min_length = waiting_config.get(\"min_length\", 0)\n            max_length = waiting_config.get(\"max_length\", 0)\n            next_node_id = waiting_config.get(\"next_node_id\")\n        else:\n            # Старый формат - waiting_config это строка с node_id\n            waiting_node_id = waiting_config\n            input_type = user_data[user_id].get(\"input_type\", \"text\")\n            variable_name = user_data[user_id].get(\"input_variable\", \"user_response\")\n            save_to_database = user_data[user_id].get(\"save_to_database\", False)\n            min_length = 0\n            max_length = 0\n            next_node_id = user_data[user_id].get(\"input_target_node_id\")\n        \n        user_text = message.text\n        \n        # Валидация для нового формата\n        if isinstance(waiting_config, dict):\n            # Валидация длины\n            if min_length > 0 and len(user_text) < min_length:\n                retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                await message.answer(f\"❌ Слишком короткий ответ (минимум {min_length} символов). {retry_message}\")\n                return\n            \n            if max_length > 0 and len(user_text) > max_length:\n                retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                await message.answer(f\"❌ Слишком длинный ответ (максимум {max_length} символов). {retry_message}\")\n                return\n            \n            # Валидация типа ввода\n            if input_type == \"email\":\n                import re\n                email_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n                if not re.match(email_pattern, user_text):\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Неверный формат email. {retry_message}\")\n                    return\n            elif input_type == \"number\":\n                try:\n                    float(user_text)\n                except ValueError:\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Введите корректное число. {retry_message}\")\n                    return\n            elif input_type == \"phone\":\n                import re\n                phone_pattern = r\"^[+]?[0-9\\s\\-\\(\\)]{10,}$\"\n                if not re.match(phone_pattern, user_text):\n                    retry_message = waiting_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n                    await message.answer(f\"❌ Неверный формат телефона. {retry_message}\")\n                    return\n            \n            # Сохраняем ответ для нового формата\n            timestamp = get_moscow_time()\n            response_data = user_text\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][variable_name] = response_data\n            \n            # Сохраняем в базу данных если включено\n            if save_to_database:\n                saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n                if saved_to_db:\n                    logging.info(f\"✅ Данные сохранены в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n                else:\n                    logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            # Отправляем сообщение об успехе\n            success_message = waiting_config.get(\"success_message\", \"Спасибо за ваш ответ!\")\n            await message.answer(success_message)\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: {variable_name} = {user_text}\")\n            \n            # Навигация к следующему узлу для нового формата\n            if next_node_id:\n                try:\n                    logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n                    if next_node_id == \"start_node\":\n                        logging.info(f\"Переход к узлу start_node типа start\")\n                    elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n                        logging.info(f\"Переход к узлу --2N9FeeykMHVVlsVnSQW типа keyboard\")\n                    elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n                        logging.info(f\"Переход к узлу nr3wIiTfBYYmpkkXMNH7n типа keyboard\")\n                    elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n                        text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n                        await message.answer(text)\n                    elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n                        logging.info(f\"Переход к узлу XDSrTrNly5EtDtr85nN4P типа keyboard\")\n                    elif next_node_id == \"final-message-node\":\n                        text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n                        await message.answer(text)\n                    elif next_node_id == \"profile_command\":\n                        # Выполняем команду /profile\n                        from types import SimpleNamespace\n                        fake_message = SimpleNamespace()\n                        fake_message.from_user = message.from_user\n                        fake_message.chat = message.chat\n                        fake_message.date = message.date\n                        fake_message.answer = message.answer\n                        await profile_handler(fake_message)\n                    else:\n                        logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n                except Exception as e:\n                    logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n            \n            return  # Завершаем обработку для нового формата\n        \n        # Обработка старого формата (для совместимости)\n        # Находим узел для получения настроек\n        if waiting_node_id == \"start_node\":\n            \n            # Сохраняем ответ пользователя\n            import datetime\n            timestamp = get_moscow_time()\n            \n            # Сохраняем простое значение для совместимости с логикой профиля\n            response_data = user_text  # Простое значение вместо сложного объекта\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][\"источник\"] = response_data\n            \n            # Сохраняем в базу данных\n            saved_to_db = await update_user_data_in_db(user_id, \"источник\", response_data)\n            if saved_to_db:\n                logging.info(f\"✅ Данные сохранены в БД: источник = {user_text} (пользователь {user_id})\")\n            else:\n                logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            await message.answer(\"✅ Спасибо за ваш ответ!\")\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: источник = {user_text}\")\n            \n            # Переходим к следующему узлу\n            try:\n                # Отправляем сообщение с клавиатурой\n                text = \"Ты хочешься продолжить свою жизнь с чатом?\"\n                builder = InlineKeyboardBuilder()\n                builder.add(InlineKeyboardButton(text=\"Да\", callback_data=\"nr3wIiTfBYYmpkkXMNH7n\"))\n                builder.add(InlineKeyboardButton(text=\"Нет\", callback_data=\"1BHSLWPMao9qQvSAzuzRl\"))\n                keyboard = builder.as_markup()\n                await message.answer(text, reply_markup=keyboard)\n                logging.info(\"✅ Переход к следующему узлу выполнен успешно\")\n            except Exception as e:\n                logging.error(f\"Ошибка при переходе к следующему узлу: {e}\")\n            return\n        elif waiting_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n            \n            # Сохраняем ответ пользователя\n            import datetime\n            timestamp = get_moscow_time()\n            \n            # Сохраняем простое значение для совместимости с логикой профиля\n            response_data = user_text  # Простое значение вместо сложного объекта\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][\"желание\"] = response_data\n            \n            # Сохраняем в базу данных\n            saved_to_db = await update_user_data_in_db(user_id, \"желание\", response_data)\n            if saved_to_db:\n                logging.info(f\"✅ Данные сохранены в БД: желание = {user_text} (пользователь {user_id})\")\n            else:\n                logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            await message.answer(\"✅ Спасибо за ваш ответ!\")\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: желание = {user_text}\")\n            \n            return\n        elif waiting_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n            \n            # Сохраняем ответ пользователя\n            import datetime\n            timestamp = get_moscow_time()\n            \n            # Сохраняем простое значение для совместимости с логикой профиля\n            response_data = user_text  # Простое значение вместо сложного объекта\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][\"пол\"] = response_data\n            \n            # Сохраняем в базу данных\n            saved_to_db = await update_user_data_in_db(user_id, \"пол\", response_data)\n            if saved_to_db:\n                logging.info(f\"✅ Данные сохранены в БД: пол = {user_text} (пользователь {user_id})\")\n            else:\n                logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            await message.answer(\"✅ Спасибо за ваш ответ!\")\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: пол = {user_text}\")\n            \n            return\n        elif waiting_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n            \n            # Сохраняем ответ пользователя\n            import datetime\n            timestamp = get_moscow_time()\n            \n            # Сохраняем простое значение для совместимости с логикой профиля\n            response_data = user_text  # Простое значение вместо сложного объекта\n            \n            # Сохраняем в пользовательские данные\n            user_data[user_id][\"имя\"] = response_data\n            \n            # Сохраняем в базу данных\n            saved_to_db = await update_user_data_in_db(user_id, \"имя\", response_data)\n            if saved_to_db:\n                logging.info(f\"✅ Данные сохранены в БД: имя = {user_text} (пользователь {user_id})\")\n            else:\n                logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n            \n            await message.answer(\"✅ Спасибо за ваш ответ!\")\n            \n            # Очищаем состояние ожидания ввода\n            del user_data[user_id][\"waiting_for_input\"]\n            \n            logging.info(f\"Получен пользовательский ввод: имя = {user_text}\")\n            \n            # Переходим к следующему узлу\n            try:\n                # Создаем фиктивный callback_query для навигации\n                import types as aiogram_types\n                import asyncio\n                fake_callback = aiogram_types.SimpleNamespace(\n                    id=\"input_nav\",\n                    from_user=message.from_user,\n                    chat_instance=\"\",\n                    data=\"final-message-node\",\n                    message=message,\n                    answer=lambda text=\"\", show_alert=False: asyncio.sleep(0)\n                )\n                await handle_callback_final_message_node(fake_callback)\n            except Exception as e:\n                logging.error(f\"Ошибка при переходе к следующему узлу: {e}\")\n            return\n        \n        # Если узел не найден\n        logging.warning(f\"Узел для сбора ввода не найден: {waiting_node_id}\")\n        del user_data[user_id][\"waiting_for_input\"]\n        return\n    \n    # НОВАЯ ЛОГИКА: Проверяем, включен ли дополнительный сбор ответов для обычных кнопок\n    if user_id in user_data and user_data[user_id].get(\"input_collection_enabled\"):\n        input_node_id = user_data[user_id].get(\"input_node_id\")\n        input_variable = user_data[user_id].get(\"input_variable\", \"button_response\")\n        user_text = message.text\n        \n        # Сохраняем любой текст как дополнительный ответ\n        timestamp = get_moscow_time()\n        \n        response_data = user_text  # Простое значение\n        \n        # Сохраняем в пользовательские данные\n        user_data[user_id][f\"{input_variable}_additional\"] = response_data\n        \n        # Уведомляем пользователя\n        await message.answer(\"✅ Дополнительный комментарий сохранен!\")\n        \n        logging.info(f\"Дополнительный текстовый ввод: {input_variable}_additional = {user_text} (пользователь {user_id})\")\n        return\n    \n    # Если нет активного ожидания ввода, игнорируем сообщение\n    return\n    # Валидация длины текста\n    min_length = input_config.get(\"min_length\", 0)\n    max_length = input_config.get(\"max_length\", 0)\n    \n    if min_length > 0 and len(user_text) < min_length:\n        retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n        await message.answer(f\"❌ Слишком короткий ответ (минимум {min_length} символов). {retry_message}\")\n        return\n    \n    if max_length > 0 and len(user_text) > max_length:\n        retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n        await message.answer(f\"❌ Слишком длинный ответ (максимум {max_length} символов). {retry_message}\")\n        return\n    \n    # Валидация типа ввода\n    input_type = input_config.get(\"type\", \"text\")\n    \n    if input_type == \"email\":\n        import re\n        email_pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n        if not re.match(email_pattern, user_text):\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Неверный формат email. {retry_message}\")\n            return\n    \n    elif input_type == \"number\":\n        try:\n            float(user_text)\n        except ValueError:\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Введите корректное число. {retry_message}\")\n            return\n    \n    elif input_type == \"phone\":\n        import re\n        phone_pattern = r\"^[+]?[0-9\\s\\-\\(\\)]{10,}$\"\n        if not re.match(phone_pattern, user_text):\n            retry_message = input_config.get(\"retry_message\", \"Пожалуйста, попробуйте еще раз.\")\n            await message.answer(f\"❌ Неверный формат телефона. {retry_message}\")\n            return\n    \n    # Сохраняем ответ пользователя простым значением\n    variable_name = input_config.get(\"variable\", \"user_response\")\n    timestamp = get_moscow_time()\n    node_id = input_config.get(\"node_id\", \"unknown\")\n    \n    # Простое значение вместо сложного объекта\n    response_data = user_text\n    \n    # Сохраняем в пользовательские данные\n    user_data[user_id][variable_name] = response_data\n    \n    # Сохраняем в базу данных если включено\n    if input_config.get(\"save_to_database\"):\n        saved_to_db = await update_user_data_in_db(user_id, variable_name, response_data)\n        if saved_to_db:\n            logging.info(f\"✅ Данные сохранены в БД: {variable_name} = {user_text} (пользователь {user_id})\")\n        else:\n            logging.warning(f\"⚠️ Не удалось сохранить в БД, данные сохранены локально\")\n    \n    # Отправляем сообщение об успехе\n    success_message = input_config.get(\"success_message\", \"Спасибо за ваш ответ!\")\n    await message.answer(success_message)\n    \n    # Очищаем состояние ожидания ввода\n    del user_data[user_id][\"waiting_for_input\"]\n    \n    logging.info(f\"Получен пользовательский ввод: {variable_name} = {user_text}\")\n    \n    # Автоматическая навигация к следующему узлу после успешного ввода\n    next_node_id = input_config.get(\"next_node_id\")\n    logging.info(f\"🔄 Проверяем навигацию: next_node_id = {next_node_id}\")\n    if next_node_id:\n        try:\n            logging.info(f\"🚀 Переходим к следующему узлу: {next_node_id}\")\n            \n            # Создаем фейковое сообщение для навигации\n            fake_message = type(\"FakeMessage\", (), {})()\n            fake_message.from_user = message.from_user\n            fake_message.answer = message.answer\n            fake_message.delete = lambda: None\n            \n            # Находим узел по ID и выполняем соответствующее действие\n            if next_node_id == \"start_node\":\n                logging.info(f\"Переход к узлу start_node типа start\")\n            elif next_node_id == \"--2N9FeeykMHVVlsVnSQW\":\n                text = \"Ты хочешься продолжить свою жизнь с чатом?\"\n                builder = InlineKeyboardBuilder()\n                builder.add(InlineKeyboardButton(text=\"Да\", callback_data=\"nr3wIiTfBYYmpkkXMNH7n\"))\n                builder.add(InlineKeyboardButton(text=\"Нет\", callback_data=\"1BHSLWPMao9qQvSAzuzRl\"))\n                keyboard = builder.as_markup()\n                await fake_message.answer(text, reply_markup=keyboard)\n                # Настраиваем ожидание текстового ввода (collectUserInput)\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"желание\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"--2N9FeeykMHVVlsVnSQW\",\n                    \"next_node_id\": \"nr3wIiTfBYYmpkkXMNH7n\"\n                }\n            elif next_node_id == \"nr3wIiTfBYYmpkkXMNH7n\":\n                text = \"Какой твой пол?\"\n                builder = InlineKeyboardBuilder()\n                builder.add(InlineKeyboardButton(text=\"Женщина\", callback_data=\"XDSrTrNly5EtDtr85nN4P\"))\n                builder.add(InlineKeyboardButton(text=\"Мужчина\", callback_data=\"XDSrTrNly5EtDtr85nN4P\"))\n                keyboard = builder.as_markup()\n                await fake_message.answer(text, reply_markup=keyboard)\n                # Настраиваем ожидание текстового ввода (collectUserInput)\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"пол\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"nr3wIiTfBYYmpkkXMNH7n\",\n                    \"next_node_id\": \"XDSrTrNly5EtDtr85nN4P\"\n                }\n            elif next_node_id == \"1BHSLWPMao9qQvSAzuzRl\":\n                text = \"Печально, если что напиши /start или /profile для просмотра профиля\"\n                # Используем parse_mode условного сообщения если он установлен\n                if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n                    parse_mode = conditional_parse_mode\n                else:\n                    parse_mode = None\n                builder = InlineKeyboardBuilder()\n                builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"cmd_start\"))\n                builder.add(InlineKeyboardButton(text=\"👤 Профиль\", callback_data=\"cmd_profile\"))\n                keyboard = builder.as_markup()\n                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n            elif next_node_id == \"XDSrTrNly5EtDtr85nN4P\":\n                text = \"Как тебя зовут?\"\n                await fake_message.answer(text)\n                # Настраиваем ожидание текстового ввода\n                user_data[user_id][\"waiting_for_input\"] = {\n                    \"type\": \"text\",\n                    \"variable\": \"имя\",\n                    \"save_to_database\": True,\n                    \"node_id\": \"XDSrTrNly5EtDtr85nN4P\",\n                    \"next_node_id\": \"final-message-node\"\n                }\n            elif next_node_id == \"final-message-node\":\n                text = \"\"\"Спасибо за предоставленную информацию! 🎉\n\nВаш профиль сохранен. Теперь вы можете воспользоваться командой /profile чтобы посмотреть свой профиль.\"\"\"\n                # Используем parse_mode условного сообщения если он установлен\n                if \"conditional_parse_mode\" in locals() and conditional_parse_mode is not None:\n                    parse_mode = conditional_parse_mode\n                else:\n                    parse_mode = None\n                builder = InlineKeyboardBuilder()\n                builder.add(InlineKeyboardButton(text=\"👤 Посмотреть профиль\", callback_data=\"cmd_profile\"))\n                builder.add(InlineKeyboardButton(text=\"🔄 Начать заново\", callback_data=\"cmd_start\"))\n                keyboard = builder.as_markup()\n                await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)\n            elif next_node_id == \"profile_command\":\n                logging.info(f\"Переход к узлу profile_command типа command\")\n            else:\n                logging.warning(f\"Неизвестный следующий узел: {next_node_id}\")\n        except Exception as e:\n            logging.error(f\"Ошибка при переходе к следующему узлу {next_node_id}: {e}\")\n\n\n# Обработчик для условных кнопок\n@dp.callback_query(lambda c: c.data.startswith(\"conditional_\"))\nasync def handle_conditional_button(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    \n    # Парсим callback_data: conditional_variableName_value\n    callback_parts = callback_query.data.split(\"_\", 2)\n    if len(callback_parts) >= 3:\n        variable_name = callback_parts[1]\n        variable_value = callback_parts[2]\n        \n        user_id = callback_query.from_user.id\n        \n        # Сохраняем значение в базу данных\n        await update_user_data_in_db(user_id, variable_name, variable_value)\n        \n        # Сохраняем в локальные данные\n        if user_id not in user_data:\n            user_data[user_id] = {}\n        user_data[user_id][variable_name] = variable_value\n        \n        logging.info(f\"Условная кнопка: {variable_name} = {variable_value} (пользователь {user_id})\")\n        \n        # После обновления значения автоматически вызываем профиль\n        await callback_query.answer(f\"✅ {variable_name} обновлено\")\n        \n        # Создаем имитацию сообщения для вызова команды профиль\n        class FakeMessage:\n            def __init__(self, callback_query):\n                self.from_user = callback_query.from_user\n                self.chat = callback_query.message.chat\n                self.date = callback_query.message.date\n                self.message_id = callback_query.message.message_id\n            \n            async def answer(self, text, parse_mode=None, reply_markup=None):\n                if reply_markup:\n                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode, reply_markup=reply_markup)\n                else:\n                    await bot.send_message(self.chat.id, text, parse_mode=parse_mode)\n            \n            async def edit_text(self, text, parse_mode=None, reply_markup=None):\n                try:\n                    await bot.edit_message_text(text, self.chat.id, self.message_id, parse_mode=parse_mode, reply_markup=reply_markup)\n                except Exception:\n                    await self.answer(text, parse_mode, reply_markup)\n        \n        fake_message = FakeMessage(callback_query)\n        \n        # Вызываем обработчик профиля\n        try:\n            await profile_handler(fake_message)\n        except Exception as e:\n            logging.error(f\"Ошибка вызова profile_handler: {e}\")\n            await callback_query.message.answer(f\"✅ Значение {variable_name} обновлено на: {variable_value}\")\n    else:\n        logging.warning(f\"Неверный формат условной кнопки: {callback_query.data}\")\n        await callback_query.answer(\"❌ Ошибка обработки кнопки\", show_alert=True)\n\n\n# Обработчики для кнопок команд\n\n@dp.callback_query(lambda c: c.data == \"cmd_start\")\nasync def handle_cmd_start(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Симулируем выполнение команды /start\n    \n    # Создаем fake message object для команды\n    from types import SimpleNamespace\n    fake_message = SimpleNamespace()\n    fake_message.from_user = callback_query.from_user\n    fake_message.chat = callback_query.message.chat\n    fake_message.date = callback_query.message.date\n    fake_message.answer = callback_query.message.answer\n    fake_message.edit_text = callback_query.message.edit_text\n    \n    # Вызываем start handler\n    await start_handler(fake_message)\n    logging.info(f\"Команда /start выполнена через callback кнопку (пользователь {callback_query.from_user.id})\")\n\n@dp.callback_query(lambda c: c.data == \"cmd_profile\")\nasync def handle_cmd_profile(callback_query: types.CallbackQuery):\n    await callback_query.answer()\n    # Симулируем выполнение команды /profile\n    \n    # Создаем fake message object для команды\n    from types import SimpleNamespace\n    fake_message = SimpleNamespace()\n    fake_message.from_user = callback_query.from_user\n    fake_message.chat = callback_query.message.chat\n    fake_message.date = callback_query.message.date\n    fake_message.answer = callback_query.message.answer\n    fake_message.edit_text = callback_query.message.edit_text\n    \n    # Вызываем profile handler\n    await profile_handler(fake_message)\n    logging.info(f\"Команда /profile выполнена через callback кнопку (пользователь {callback_query.from_user.id})\")\n\n\n# Обработчик команды профиля с поддержкой variableLabel\n@dp.message(Command(\"profile\"))\nasync def profile_handler(message: types.Message):\n    user_id = message.from_user.id\n    \n    # Получаем данные пользователя из базы данных\n    user_record = await get_user_from_db(user_id)\n    if not user_record:\n        user_record = user_data.get(user_id, {})\n    \n    # Извлекаем пользовательские данные\n    if isinstance(user_record, dict):\n        if \"user_data\" in user_record:\n            if isinstance(user_record[\"user_data\"], str):\n                try:\n                    import json\n                    user_vars = json.loads(user_record[\"user_data\"])\n                except (json.JSONDecodeError, TypeError):\n                    user_vars = {}\n            elif isinstance(user_record[\"user_data\"], dict):\n                user_vars = user_record[\"user_data\"]\n            else:\n                user_vars = {}\n        else:\n            user_vars = user_record\n    else:\n        user_vars = {}\n    \n    if not user_vars:\n        await message.answer(\"👤 Профиль недоступен\\n\\nПохоже, вы еще не прошли опрос. Пожалуйста, введите /start чтобы заполнить профиль.\")\n        return\n    \n    # Формируем сообщение профиля с поддержкой variableLabel\n    profile_text = \"👤 Ваш профиль:\\n\\n\"\n    \n    # Отображаем все доступные переменные\n    for var_name, var_data in user_vars.items():\n        if isinstance(var_data, dict) and \"value\" in var_data:\n            value = var_data[\"value\"]\n        else:\n            value = var_data\n        profile_text += f\"{var_name}: {value}\\n\"\n    \n    await message.answer(profile_text)\n    logging.info(f\"Профиль отображен для пользователя {user_id}\")\n\n\n\n# Запуск бота\nasync def main():\n    global db_pool\n    try:\n        # Инициализируем базу данных\n        await init_database()\n        print(\"🤖 Бот запущен и готов к работе!\")\n        await dp.start_polling(bot)\n    except KeyboardInterrupt:\n        print(\"🛑 Получен сигнал остановки, завершаем работу...\")\n    except Exception as e:\n        logging.error(f\"Критическая ошибка: {e}\")\n    finally:\n        # Правильно закрываем все соединения\n        if db_pool:\n            await db_pool.close()\n            print(\"🔌 Соединение с базой данных закрыто\")\n        \n        # Закрываем сессию бота\n        await bot.session.close()\n        print(\"🔌 Сессия бота закрыта\")\n        print(\"✅ Бот корректно завершил работу\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"}