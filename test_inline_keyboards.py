#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
"""

import ast
import re

def test_inline_keyboards():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    with open('test_fixed_menu_bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º Python –∫–æ–¥ –∏–∑ JSON
    import json
    data = json.loads(content)
    code = data['code']
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É inline –∫–Ω–æ–ø–æ–∫...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /menu –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω message.answer()
    menu_handler_match = re.search(r'@dp\.message\(Command\("menu"\)\)(.*?)(?=@|\Z)', code, re.DOTALL)
    if menu_handler_match:
        menu_handler = menu_handler_match.group(1)
        answer_count = menu_handler.count('message.answer')
        print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /menu —Å–æ–¥–µ—Ä–∂–∏—Ç {answer_count} –≤—ã–∑–æ–≤–æ–≤ message.answer()")
        
        if answer_count == 1:
            print("  ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: Inline –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
        else:
            print("  ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã–∑–æ–≤–æ–≤ message.answer()")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ inline –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    inline_pattern = r'builder\.add\(InlineKeyboardButton.*?\)\s*\n.*?keyboard = builder\.as_markup\(\)\s*\n.*?await message\.answer\(.*?reply_markup=keyboard\)'
    inline_matches = re.findall(inline_pattern, code, re.DOTALL)
    
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(inline_matches)} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ –∫–Ω–æ–ø–æ–∫
    separate_keyboard_sends = re.findall(r'await message\.answer\(.*?keyboard.*?\)\s*\n.*?await message\.answer\(', code, re.DOTALL)
    if separate_keyboard_sends:
        print(f"  ‚ùå –ù–ê–ô–î–ï–ù–ê –û–®–ò–ë–ö–ê: {len(separate_keyboard_sends)} —Å–ª—É—á–∞–µ–≤ —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    else:
        print("  ‚úÖ –†–∞–∑–¥–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    callback_handlers = re.findall(r'@dp\.callback_query', code)
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(callback_handlers)} callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    
    print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! Inline –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    return True

if __name__ == "__main__":
    test_inline_keyboards()