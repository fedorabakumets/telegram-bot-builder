#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ —Å HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import requests
import json

def test_updated_political_bot():
    """–°–æ–∑–¥–∞–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç"""
    
    print("ü§ñ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–û–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –ë–û–¢–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
    response = requests.get('http://localhost:5000/api/templates')
    templates = response.json()
    
    political_template = None
    for template in templates:
        if '–ü–æ–ª–∏—Ç–∏–∫–æ' in template['name']:
            political_template = template
            break
    
    if not political_template:
        print("‚ùå –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {political_template['name']}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    project_data = {
        "name": "–¢–µ—Å—Ç HTML –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞",
        "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º –±–æ—Ç–µ",
        "data": political_template['data']
    }
    
    create_response = requests.post('http://localhost:5000/api/projects', json=project_data)
    
    if create_response.status_code == 201:
        project_id = create_response.json()['id']
        print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        
        if export_response.status_code == 200:
            generated_code = export_response.json()['code']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
            with open('test_updated_political_bot_result.py', 'w', encoding='utf-8') as f:
                f.write(generated_code)
            
            print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_updated_political_bot_result.py'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
            analyze_updated_code(generated_code)
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
        return False

def analyze_updated_code(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥"""
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê:")
    print("-" * 40)
    
    lines = code.split('\n')
    
    # –ò—â–µ–º start_handler
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            print(f"üìç –ù–∞–π–¥–µ–Ω start_handler –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 50 —Å—Ç—Ä–æ–∫
            for j in range(i, min(i + 50, len(lines))):
                if 'text = ' in lines[j] and '<b>' in lines[j]:
                    print(f"üìù –ù–∞–π–¥–µ–Ω HTML —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–µ {j+1}:")
                    print(f"   {lines[j].strip()}")
                    
                    # –ò—â–µ–º parse_mode –≤ —Å–ª–µ–¥—É—é—â–∏—Ö 15 —Å—Ç—Ä–æ–∫–∞—Ö
                    for k in range(j, min(j + 15, len(lines))):
                        if 'parse_mode=' in lines[k]:
                            print(f"üìä Parse mode –Ω–∞ —Å—Ç—Ä–æ–∫–µ {k+1}: {lines[k].strip()}")
                            
                            if 'ParseMode.HTML' in lines[k]:
                                print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: HTML —Ç–µ–≥–∏ —Å ParseMode.HTML")
                                print("   –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç <b> –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram")
                            elif 'ParseMode.MARKDOWN' in lines[k]:
                                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: HTML —Ç–µ–≥–∏ —Å ParseMode.MARKDOWN")
                            break
                    break
            break
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    html_modes = code.count('ParseMode.HTML')
    markdown_modes = code.count('ParseMode.MARKDOWN')
    html_tags = code.count('<b>') + code.count('<i>') + code.count('<u>')
    markdown_syntax = code.count('**') + code.count('*') + code.count('__')
    
    print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   HTML —Ç–µ–≥–æ–≤: {html_tags}")
    print(f"   Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {markdown_syntax}")
    print(f"   ParseMode.HTML: {html_modes}")
    print(f"   ParseMode.MARKDOWN: {markdown_modes}")
    
    if html_tags > 0 and html_modes > 0:
        print("‚úÖ HTML —Ç–µ–≥–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π parse mode")
        print("   –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç <b> –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Telegram")
    elif html_tags > 0 and markdown_modes > 0:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: HTML —Ç–µ–≥–∏ —Å markdown parse mode")
    elif markdown_syntax > 0 and markdown_modes > 0:
        print("‚úÖ Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π parse mode")
    else:
        print("‚ùì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—è—Å–Ω–∞")

if __name__ == "__main__":
    success = test_updated_political_bot()
    if success:
        print("\nüéâ –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–û–¢–ê –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print("   HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ Telegram")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")