#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
from pathlib import Path

def test_bot_code_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞...")
    
    bot_file = Path("bots/bot_1.py")
    
    if not bot_file.exists():
        print("‚ùå –§–∞–π–ª –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        code = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    checks = [
        ("start_handler", "async def start_handler" in code),
        ("collection_callback", "handle_callback_collection_message" in code),
        ("inline_keyboard", "InlineKeyboardBuilder()" in code),
        ("user_input_handler", "handle_user_input" in code),
        ("input_collection", "waiting_for_input" in code),
        ("database_save", "update_user_data_in_db" in code),
        ("thank_you_handler", "handle_callback_thank_you_message" in code),
        ("navigation_logic", "fake_callback" in code),
        ("asyncio_import", "import asyncio" in code),
        ("text_input_processing", "user_text = message.text" in code)
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞:")
    passed = 0
    total = len(checks)
    
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}: {result}")
        if result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= total * 0.8:  # 80% —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        print("üéâ –ö–æ–¥ –±–æ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–¥–∞.")
        return False

def test_inline_button_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é inline –∫–Ω–æ–ø–æ–∫"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ inline –∫–Ω–æ–ø–æ–∫...")
    
    bot_file = Path("bots/bot_1.py")
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        code = f.read()
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ collection-message
    collection_handler_start = code.find("handle_callback_collection_message")
    if collection_handler_start == -1:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ collection-message –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
    next_handler = code.find("@dp.callback_query", collection_handler_start + 1)
    if next_handler == -1:
        next_handler = len(code)
    
    collection_handler_code = code[collection_handler_start:next_handler]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ collection-message
    checks = [
        ("inline_builder", "InlineKeyboardBuilder()" in collection_handler_code),
        ("button_creation", "InlineKeyboardButton(" in collection_handler_code),
        ("keyboard_markup", "builder.as_markup()" in collection_handler_code),
        ("input_setup", "waiting_for_input" in collection_handler_code),
        ("callback_data", "callback_data=" in collection_handler_code)
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ collection-message:")
    passed = 0
    total = len(checks)
    
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}: {result}")
        if result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= total * 0.8:
        print("üéâ Inline –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π inline –∫–Ω–æ–ø–æ–∫.")
        return False

def test_navigation_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...")
    
    bot_file = Path("bots/bot_1.py")
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        code = f.read()
    
    # –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    input_handler_start = code.find("handle_user_input")
    if input_handler_start == -1:
        print("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
    input_handler_end = code.find("\n\nasync def", input_handler_start + 1)
    if input_handler_end == -1:
        input_handler_end = len(code)
    
    input_handler_code = code[input_handler_start:input_handler_end]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    checks = [
        ("text_processing", "user_text = message.text" in input_handler_code),
        ("data_saving", "response_data = {" in input_handler_code),
        ("db_save", "update_user_data_in_db" in input_handler_code),
        ("navigation", "fake_callback" in input_handler_code),
        ("asyncio_sleep", "asyncio.sleep(0)" in input_handler_code),
        ("thank_you_call", "handle_callback_thank_you_message" in input_handler_code),
        ("cleanup", "del user_data[user_id]" in input_handler_code)
    ]
    
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞:")
    passed = 0
    total = len(checks)
    
    for check_name, result in checks:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}: {result}")
        if result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed >= total * 0.8:
        print("üéâ –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π.")
        return False

def analyze_error_from_logs():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥–æ–≤"""
    
    print("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫...")
    
    # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—à–∏–±–∫–∞ –±—ã–ª–∞: "object NoneType can't be used in 'await' expression"
    # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ fake_callback.answer() –≤–æ–∑–≤—Ä–∞—â–∞–ª None
    
    bot_file = Path("bots/bot_1.py")
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        code = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ
    has_asyncio_sleep = "asyncio.sleep(0)" in code
    has_asyncio_import = "import asyncio" in code
    
    print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ asyncio.sleep: {has_asyncio_sleep}")
    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç asyncio: {has_asyncio_import}")
    
    if has_asyncio_sleep and has_asyncio_import:
        print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...")
    print("=" * 60)
    
    code_structure_ok = test_bot_code_structure()
    inline_buttons_ok = test_inline_button_generation()
    navigation_ok = test_navigation_logic()
    fix_applied = analyze_error_from_logs()
    
    print("\n" + "=" * 60)
    
    total_tests = 4
    passed_tests = sum([code_structure_ok, inline_buttons_ok, navigation_ok, fix_applied])
    
    print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests >= 3:
        print("‚úÖ –ë–û–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
        print("   ‚Ä¢ Inline –∫–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("   ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ asyncio.sleep –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")
        print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        return True
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ù—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)