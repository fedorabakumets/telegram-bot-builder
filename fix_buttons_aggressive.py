#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
"""

import requests
import json

def fix_buttons_aggressive():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ —Å–æ–∫—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º"""
    
    print("‚úÇÔ∏è –ê–ì–†–ï–°–°–ò–í–ù–û–ï –°–û–ö–†–ê–©–ï–ù–ò–ï –ö–ù–û–ü–û–ö")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    response = requests.get('http://localhost:5000/api/templates')
    templates = response.json()
    
    political_template = None
    for template in templates:
        if '–ü–æ–ª–∏—Ç–∏–∫–æ' in template['name']:
            political_template = template
            break
    
    if not political_template:
        print("‚ùå –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {political_template['name']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
    updated_data = political_template['data'].copy()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    button_text_fixes = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        "üöÄ –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å": "üöÄ –ù–∞—á–∞—Ç—å",
        "üìã –†–∞–∑–¥–µ–ª—ã": "üìã –†–∞–∑–¥–µ–ª—ã",
        "üìñ –ü–æ–º–æ—â—å": "üìñ –ü–æ–º–æ—â—å",
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω...": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "üó≥Ô∏è –ù–∞—á–∞—Ç—å –ø–æ...": "üó≥Ô∏è –°—Ç–∞—Ä—Ç",
        "üìú –ü–µ—Ä–µ–π—Ç–∏ –∫ ...": "üìú –î–∞–ª–µ–µ",
        "ü§î –ü–µ—Ä–µ–π—Ç–∏ –∫ ...": "ü§î –î–∞–ª–µ–µ",
        "üåç –ü–µ—Ä–µ–π—Ç–∏ –∫ ...": "üåç –î–∞–ª–µ–µ",
        "üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ ...": "üìä –î–∞–ª–µ–µ",
        "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π...": "‚û°Ô∏è –î–∞–ª–µ–µ",
        "üéâ –ö —Ä–µ–∑—É–ª—å—Ç–∞...": "üéâ –ò—Ç–æ–≥–∏",
        "‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç...": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "üìö –°–æ–≤–µ—Ç—ã": "üìö –°–æ–≤–µ—Ç—ã",
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ - —ç–∫–æ–Ω–æ–º–∏–∫–∞
        "A) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞...": "A) –ú–∏–Ω–∏–º—É–º",
        "B) –£–º–µ—Ä–µ–Ω–Ω–æ–µ ...": "B) –£–º–µ—Ä–µ–Ω–Ω–æ",
        "C) –ê–∫—Ç–∏–≤–Ω–æ–µ –≤...": "C) –ê–∫—Ç–∏–≤–Ω–æ",
        "D) –ü–æ–ª–Ω—ã–π –≥–æ—Å...": "D) –ü–æ–ª–Ω—ã–π",
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ - –æ–±—â–∏–µ
        "A) –£–±–∏–π—Å—Ç–≤–æ —ç...": "A) –£–±–∏–π—Å—Ç–≤–æ",
        "B) –ò–º–ø–µ—Ä–∏–∞–ª–∏—Å...": "B) –ò–º–ø–µ—Ä–∏–∏",
        "C) –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω...": "C) –ù–∞—Ü–∏–∏",
        "D) –ì–æ–Ω–∫–∞ –≤–æ–æ—Ä...": "D) –ì–æ–Ω–∫–∞",
        
        "A) –í—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ...": "A) –í—Ä–æ–∂–¥–µ–Ω–Ω–æ",
        "B) –ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏...": "B) –†–µ–∑—É–ª—å—Ç–∞—Ç",
        "C) –î–æ–ª–≥ –∏ —É–Ω–∏...": "C) –î–æ–ª–≥",
        "D) –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ...": "D) –°–æ—Ü–∏—É–º",
        
        "A) –†–∞–∑–ª–∏—á–∏—è –≤...": "A) –†–∞–∑–ª–∏—á–∏—è",
        "B) –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã...": "B) –°—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "C) –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ...": "C) –ö—É–ª—å—Ç—É—Ä–∞",
        "D) –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫...": "D) –ò—Å—Ç–æ—Ä–∏—è",
        
        # –ë–ª–æ–∫–∏
        "üìú –ù–∞—á–∞—Ç—å –∏—Å—Ç...": "üìú –ò—Å—Ç–æ—Ä–∏—è",
        "ü§î –ù–∞—á–∞—Ç—å —Ñ–∏–ª...": "ü§î –§–∏–ª–æ—Å–æ—Ñ–∏—è",
        "üåç –ù–∞—á–∞—Ç—å —Å–æ—Ü...": "üåç –°–æ—Ü–∏–æ–ª–æ–≥–∏—è",
        "üìä –î–µ—Ç–∞–ª—å–Ω—ã–π ...": "üìä –ê–Ω–∞–ª–∏–∑",
        "üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ...": "üë• –°—Ä–∞–≤–Ω–∏—Ç—å",
        "ü§î –ö –±–ª–æ–∫—É –§–∏...": "ü§î –§–∏–ª–æ—Å–æ—Ñ–∏—è",
        "üåç –ö –±–ª–æ–∫—É –°–æ...": "üåç –°–æ—Ü–∏–æ–ª–æ–≥–∏—è",
        "üìú –ö –±–ª–æ–∫—É –ò—Å...": "üìú –ò—Å—Ç–æ—Ä–∏—è"
    }
    
    nodes_updated = 0
    buttons_updated = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–µ—Ö —É–∑–ª–∞—Ö
    for node in updated_data['nodes']:
        if 'buttons' in node['data']:
            for button in node['data']['buttons']:
                original_text = button['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if original_text in button_text_fixes:
                    button['text'] = button_text_fixes[original_text]
                    buttons_updated += 1
                    print(f"üîÑ '{original_text}' ‚Üí '{button['text']}'")
                
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
                elif len(original_text) > 12:
                    new_text = original_text
                    
                    # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
                    if new_text.startswith('A) ') or new_text.startswith('B) ') or new_text.startswith('C) ') or new_text.startswith('D) '):
                        prefix = new_text[:3]  # A), B), C), D)
                        remaining = new_text[3:]
                        
                        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 8 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                        if len(remaining) > 8:
                            new_text = prefix + remaining[:8]
                        else:
                            new_text = prefix + remaining
                    
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                    else:
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
                        new_text = new_text.strip()
                        if len(new_text) > 12:
                            new_text = new_text[:12]
                    
                    if new_text != original_text:
                        button['text'] = new_text
                        buttons_updated += 1
                        print(f"‚úÇÔ∏è '{original_text}' ‚Üí '{new_text}'")
            
            if len([b for b in node['data']['buttons'] if len(b['text']) > 12]) == 0:
                nodes_updated += 1
    
    print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–∑–ª–æ–≤: {nodes_updated}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons_updated}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    max_length = 0
    total_buttons = 0
    long_buttons = 0
    
    for node in updated_data['nodes']:
        if 'buttons' in node['data']:
            for button in node['data']['buttons']:
                total_buttons += 1
                length = len(button['text'])
                max_length = max(max_length, length)
                if length > 12:
                    long_buttons += 1
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–ö–†–ê–©–ï–ù–ò–Ø:")
    print(f"   –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {total_buttons}")
    print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {max_length} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –î–ª–∏–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (>12): {long_buttons}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_data = {
        'name': political_template['name'],
        'description': political_template['description'],
        'category': political_template['category'],
        'tags': political_template['tags'],
        'difficulty': political_template['difficulty'],
        'data': updated_data
    }
    
    update_response = requests.put(
        f'http://localhost:5000/api/templates/{political_template["id"]}',
        json=update_data
    )
    
    if update_response.status_code == 200:
        print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {update_response.status_code}")
        return False

if __name__ == "__main__":
    success = fix_buttons_aggressive()
    if success:
        print("\nüéâ –ê–ì–†–ï–°–°–ò–í–ù–û–ï –°–û–ö–†–ê–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("   –í—Å–µ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Telegram")
        print("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–Ω–æ–ø–æ–∫: 12 —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("\n‚ùå –°–û–ö–†–ê–©–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô")