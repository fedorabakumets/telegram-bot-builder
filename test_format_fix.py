#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è formatMode
"""

import json
import requests

def test_format_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è formatMode"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø FORMATMODE")
    print("=" * 65)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –ø—Ä–æ–±–ª–µ–º–æ–π (HTML –≤ markdown —Ä–µ–∂–∏–º–µ)
    bot_data = {
        "nodes": [
            {
                "id": "start-1",
                "type": "start",
                "data": {
                    "command": "/start",
                    "messageText": "–ü—Ä–∏–≤–µ—Ç! <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –≠—Ç–æ <i>—Ç–µ—Å—Ç</i>.",
                    "keyboardType": "inline",
                    "formatMode": "markdown",  # –ó–¥–µ—Å—å –ø—Ä–æ–±–ª–µ–º–∞
                    "buttons": [
                        {
                            "id": "btn-test",
                            "text": "–¢–µ—Å—Ç",
                            "action": "goto",
                            "target": "test-node"
                        }
                    ]
                },
                "position": {"x": 100, "y": 100}
            },
            {
                "id": "test-node",
                "type": "message",
                "data": {
                    "messageText": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    "keyboardType": "inline",
                    "formatMode": "markdown",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "–ù–∞–∑–∞–¥",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                },
                "position": {"x": 300, "y": 100}
            }
        ],
        "connections": [
            {"id": "conn1", "from": "start-1", "to": "test-node"},
            {"id": "conn2", "from": "test-node", "to": "start-1"}
        ]
    }
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ API
    project_data = {
        "name": "–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è formatMode",
        "description": "–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ HTML —Ä–µ–∂–∏–º",
        "data": bot_data
    }
    
    try:
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        
        if create_response.status_code == 201:
            project_id = create_response.json()['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
            
            if export_response.status_code == 200:
                generated_code = export_response.json()['code']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                with open('test_format_fix_result.py', 'w', encoding='utf-8') as f:
                    f.write(generated_code)
                
                print("‚úÖ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'test_format_fix_result.py'")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                analyze_format_fix(generated_code)
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
                print(export_response.text)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            print(create_response.text)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def analyze_format_fix(code):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    print("\nüîç –ê–ù–ê–õ–ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("-" * 30)
    
    # –ò—â–µ–º start_handler
    lines = code.split('\n')
    
    for i, line in enumerate(lines):
        if 'async def start_handler' in line:
            print(f"üìç –ù–∞–π–¥–µ–Ω start_handler –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}")
            
            # –ò—â–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text_line = -1
            parse_mode_line = -1
            
            for j in range(i, min(i + 30, len(lines))):
                if 'text = "' in lines[j]:
                    text_line = j
                    print(f"üìù –¢–µ–∫—Å—Ç: {lines[j].strip()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML —Ç–µ–≥–æ–≤
                    if '<b>' in lines[j] or '<i>' in lines[j]:
                        print("üîç –ù–∞–π–¥–µ–Ω—ã HTML —Ç–µ–≥–∏ –≤ —Ç–µ–∫—Å—Ç–µ")
                        
                if 'parse_mode=ParseMode.' in lines[j]:
                    parse_mode_line = j
                    print(f"üìä Parse mode: {lines[j].strip()}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    if 'ParseMode.HTML' in lines[j]:
                        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢: HTML —Ç–µ–≥–∏ —Å ParseMode.HTML")
                    elif 'ParseMode.MARKDOWN' in lines[j]:
                        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –û–°–¢–ê–õ–ê–°–¨: HTML —Ç–µ–≥–∏ —Å ParseMode.MARKDOWN")
                        
            break
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    html_count = code.count('parse_mode=ParseMode.HTML')
    markdown_count = code.count('parse_mode=ParseMode.MARKDOWN')
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   HTML —Ä–µ–∂–∏–º: {html_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    print(f"   Markdown —Ä–µ–∂–∏–º: {markdown_count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    
    if html_count > 0:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ä–µ–∂–∏–º")
    else:
        print("‚ùå HTML —Ä–µ–∂–∏–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")

if __name__ == "__main__":
    test_format_fix()