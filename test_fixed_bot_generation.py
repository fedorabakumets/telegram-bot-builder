#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –≤ collection-message
"""

import json
import re

def test_fixed_bot_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞...")
    print("=" * 60)
    
    # –î–∞–Ω–Ω—ã–µ collection-message —É–∑–ª–∞ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    collection_message_data = {
        "buttons": [
            {"id": "btn-excellent", "text": "–û—Ç–ª–∏—á–Ω–æ", "action": "goto", "target": "thank-you-message"},
            {"id": "btn-good", "text": " –•–æ—Ä–æ—à–æ", "action": "goto", "target": "thank-you-message"},
            {"id": "btn-average", "text": "–°—Ä–µ–¥–Ω–µ", "action": "goto", "target": "thank-you-message"},
            {"id": "btn-poor", "text": " –ü–ª–æ—Ö–æ", "action": "goto", "target": "thank-you-message"}
        ],
        "inputType": "text",
        "formatMode": "none",
        "nextNodeId": "thank-you-message",
        "messageText": "üìä –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ —Å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º:\n\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–∑—ã–≤ —Ç–µ–∫—Å—Ç–æ–º\n\n–í–∞—à –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ!",
        "inputTimeout": 120,
        "keyboardType": "inline",
        "inputRequired": False,
        "inputVariable": "user_feedback",
        "inputMaxLength": 500,
        "inputMinLength": 5,
        "resizeKeyboard": True,
        "saveToDatabase": True,
        "enableTextInput": True,
        "oneTimeKeyboard": False,
        "collectUserInput": True,
        "inputRetryMessage": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤",
        "inputTargetNodeId": "thank-you-message",
        "inputSuccessMessage": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."
    }
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ collection-message —É–∑–ª–∞:")
    print(f"   collectUserInput: {collection_message_data.get('collectUserInput')}")
    print(f"   inputTargetNodeId: {collection_message_data.get('inputTargetNodeId')}")
    print(f"   keyboardType: {collection_message_data.get('keyboardType')}")
    print(f"   buttons: {len(collection_message_data.get('buttons', []))}")
    print(f"   saveToDatabase: {collection_message_data.get('saveToDatabase')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    tests = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        ("collectUserInput –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", collection_message_data.get('collectUserInput') == True),
        ("inputTargetNodeId —É–∫–∞–∑–∞–Ω", collection_message_data.get('inputTargetNodeId') == 'thank-you-message'),
        ("keyboardType = inline", collection_message_data.get('keyboardType') == 'inline'),
        ("buttons –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç", len(collection_message_data.get('buttons', [])) > 0),
        ("saveToDatabase –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ", collection_message_data.get('saveToDatabase') == True),
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
        ("–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç action", all(btn.get('action') for btn in collection_message_data.get('buttons', []))),
        ("–í—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç target", all(btn.get('target') for btn in collection_message_data.get('buttons', []))),
        ("–í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ thank-you-message", all(btn.get('target') == 'thank-you-message' for btn in collection_message_data.get('buttons', []))),
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        ("inputVariable —É–∫–∞–∑–∞–Ω", collection_message_data.get('inputVariable') == 'user_feedback'),
        ("inputType = text", collection_message_data.get('inputType') == 'text'),
        ("inputTimeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", collection_message_data.get('inputTimeout') == 120),
        ("inputMinLength/MaxLength —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", collection_message_data.get('inputMinLength') and collection_message_data.get('inputMaxLength'))
    ]
    
    passed = 0
    failed = 0
    
    for test_name, result in tests:
        if result:
            print(f"‚úÖ {test_name}")
            passed += 1
        else:
            print(f"‚ùå {test_name}")
            failed += 1
    
    print()
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ")
        print("üí° Inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ")
        print("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
    else:
        print(f"‚ö†Ô∏è  {failed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    return failed == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞...")
    print("=" * 60)
    
    success = test_fixed_bot_generation()
    
    if success:
        print("\n‚úÖ –î–ê–ù–ù–´–ï –ì–û–¢–û–í–´ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò!")
        print("üîÑ –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("üì± Inline –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –±–æ—Ç–µ")
    else:
        print("\n‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê!")
    
    return success

if __name__ == "__main__":
    main()