"""
–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ - Telegram Bot
–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
"""

import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.enums import ParseMode

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [123456789]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    return user_id in user_data

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å' –∏–ª–∏ '—Å—Ç–∞—Ä—Ç' –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–∞–º–∏: '–ø–æ–º–æ—â—å', '—Å—Ç–∞—Ä—Ç', '–º–µ–Ω—é'"""
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥
@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):
    await start_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "–Ω–∞—á–∞—Ç—å")
async def start_synonym_–Ω–∞—á–∞—Ç—å_handler(message: types.Message):
    await start_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def start_synonym_–ø—Ä–∏–≤–µ—Ç_handler(message: types.Message):
    await start_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "–ø–æ–º–æ—â—å")
async def help_synonym_–ø–æ–º–æ—â—å_handler(message: types.Message):
    await help_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")
async def help_synonym_—Å–ø—Ä–∞–≤–∫–∞_handler(message: types.Message):
    await help_handler(message)

@dp.message(lambda message: message.text and message.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def help_synonym_–∫–æ–º–∞–Ω–¥—ã_handler(message: types.Message):
    await help_handler(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "help-cmd")
async def handle_callback_help_cmd(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–∞–º–∏: '–ø–æ–º–æ—â—å', '—Å—Ç–∞—Ä—Ç', '–º–µ–Ω—é'"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "menu-msg")
async def handle_callback_menu_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info-msg"))
    builder.add(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings-msg"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "start-node")
async def handle_callback_start_node(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å' –∏–ª–∏ '—Å—Ç–∞—Ä—Ç' –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "commands-msg")
async def handle_callback_commands_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:

üî∏ /start (–∏–ª–∏ '—Å—Ç–∞—Ä—Ç') - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
üî∏ /help (–∏–ª–∏ '–ø–æ–º–æ—â—å') - –°–ø—Ä–∞–≤–∫–∞
üî∏ /menu (–∏–ª–∏ '–º–µ–Ω—é') - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ —Å–ª–µ—à–µ–º, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞!"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="test-msg"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="help-cmd"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "test-msg")
async def handle_callback_test_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:

‚Ä¢ —Å—Ç–∞—Ä—Ç
‚Ä¢ –ø–æ–º–æ—â—å
‚Ä¢ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ –º–µ–Ω—é

–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏!"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="commands-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "info-msg")
async def handle_callback_info_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü—Ä–æ–±–ª–µ–º–∞: –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Å–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "settings-msg")
async def handle_callback_settings_msg(callback_query: types.CallbackQuery):
    await callback_query.answer()
    text = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:

–ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.

–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å '—Å—Ç–∞—Ä—Ç' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é."""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
