#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–Ω–æ–ø–∫–∞—Ö –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
"""

import requests
import json

def fix_button_text_length():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–Ω–æ–ø–∫–∞—Ö"""
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–õ–ò–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê –í –ö–ù–û–ü–ö–ê–•")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω
    response = requests.get('http://localhost:5000/api/templates')
    templates = response.json()
    
    political_template = None
    for template in templates:
        if '–ü–æ–ª–∏—Ç–∏–∫–æ' in template['name']:
            political_template = template
            break
    
    if not political_template:
        print("‚ùå –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {political_template['name']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
    updated_data = political_template['data'].copy()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
    button_text_fixes = {
        # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        "A) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–æ–ª—å": "A) –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è",
        "B) –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": "B) –£–º–µ—Ä–µ–Ω–Ω–∞—è",
        "C) –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ": "C) –ê–∫—Ç–∏–≤–Ω–∞—è",
        "D) –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å": "D) –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        
        # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
        "A) –ü—Ä—è–º–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—è": "A) –ü—Ä—è–º–∞—è",
        "B) –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ–º–æ–∫—Ä–∞—Ç–∏—è": "B) –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è",
        "C) –°–º–µ—à–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "C) –°–º–µ—à–∞–Ω–Ω–∞—è",
        "D) –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞": "D) –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–∞—è",
        
        # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        "A) –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏": "A) –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ",
        "B) –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∑–º": "B) –£–º–µ—Ä–µ–Ω–Ω—ã–π",
        "C) –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ —Ä–µ—Ñ–æ—Ä–º—ã": "C) –õ–∏–±–µ—Ä–∞–ª—å–Ω—ã–µ",
        "D) –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è": "D) –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ",
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        "A) –î—Ä–µ–≤–Ω–∏–π –º–∏—Ä": "A) –î—Ä–µ–≤–Ω–æ—Å—Ç—å",
        "B) –°—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—å–µ": "B) –°—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞",
        "C) –ù–æ–≤–æ–µ –≤—Ä–µ–º—è": "C) –ù–æ–≤–æ–µ –≤—Ä–µ–º—è",
        "D) –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å": "D) –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å",
        
        # –§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        "A) –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º": "A) –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–º",
        "B) –ò–¥–µ–∞–ª–∏–∑–º": "B) –ò–¥–µ–∞–ª–∏–∑–º",
        "C) –≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º": "C) –≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º",
        "D) –ü–æ—Å—Ç–º–æ–¥–µ—Ä–Ω–∏–∑–º": "D) –ü–æ—Å—Ç–º–æ–¥–µ—Ä–Ω–∏–∑–º",
        
        # –°–æ—Ü–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏
        "A) –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∏–∑–º": "A) –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∏–∑–º",
        "B) –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏—è": "B) –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏—è",
        "C) –ò–Ω—Ç–µ—Ä–∞–∫—Ü–∏–æ–Ω–∏–∑–º": "C) –ò–Ω—Ç–µ—Ä–∞–∫—Ü–∏–æ–Ω–∏–∑–º",
        "D) –ü–æ—Å—Ç—Å—Ç—Ä—É–∫—Ç—É—Ä–∞–ª–∏–∑–º": "D) –ü–æ—Å—Ç—Å—Ç—Ä—É–∫—Ç—É—Ä–∞–ª–∏–∑–º",
        
        # –û–±—â–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
        "üìã –û–±–∑–æ—Ä —Ä–∞–∑–¥–µ–ª–æ–≤": "üìã –†–∞–∑–¥–µ–ª—ã",
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏": "üìñ –ü–æ–º–æ—â—å",
        "üîÑ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å": "üîÑ –î–∞–ª–µ–µ",
        "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑": "üéØ –ê–Ω–∞–ª–∏–∑",
        "üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π": "üë• –°—Ä–∞–≤–Ω–µ–Ω–∏–µ",
        "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": "üìö –°–æ–≤–µ—Ç—ã",
        "üèõÔ∏è –ü–æ–ª–∏—Ç–æ–ª–æ–≥–∏—è": "üèõÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞",
        "üìú –ò—Å—Ç–æ—Ä–∏—è": "üìú –ò—Å—Ç–æ—Ä–∏—è",
        "ü§î –§–∏–ª–æ—Å–æ—Ñ–∏—è": "ü§î –§–∏–ª–æ—Å–æ—Ñ–∏—è",
        "üåç –°–æ—Ü–∏–æ–ª–æ–≥–∏—è": "üåç –°–æ—Ü–∏–æ–ª–æ–≥–∏—è"
    }
    
    nodes_updated = 0
    buttons_updated = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Å–µ—Ö —É–∑–ª–∞—Ö
    for node in updated_data['nodes']:
        if 'buttons' in node['data']:
            for button in node['data']['buttons']:
                original_text = button['text']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if original_text in button_text_fixes:
                    button['text'] = button_text_fixes[original_text]
                    buttons_updated += 1
                    print(f"üîÑ –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: '{original_text}' ‚Üí '{button['text']}'")
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤—Å—ë –µ—â—ë —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Å–æ–∫—Ä–∞—â–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                elif len(original_text) > 15:
                    # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º
                    if original_text.startswith('A) ') or original_text.startswith('B) ') or original_text.startswith('C) ') or original_text.startswith('D) '):
                        prefix = original_text[:3]  # A), B), C), D)
                        remaining = original_text[3:]
                        if len(remaining) > 10:
                            button['text'] = prefix + remaining[:10] + '...'
                            buttons_updated += 1
                            print(f"üîÑ –ö–Ω–æ–ø–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞: '{original_text}' ‚Üí '{button['text']}'")
                    elif len(original_text) > 15:
                        button['text'] = original_text[:12] + '...'
                        buttons_updated += 1
                        print(f"üîÑ –ö–Ω–æ–ø–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∞: '{original_text}' ‚Üí '{button['text']}'")
            
            if buttons_updated > 0:
                nodes_updated += 1
    
    print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–∑–ª–æ–≤: {nodes_updated}")
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {buttons_updated}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_data = {
        'name': political_template['name'],
        'description': political_template['description'],
        'category': political_template['category'],
        'tags': political_template['tags'],
        'difficulty': political_template['difficulty'],
        'data': updated_data
    }
    
    update_response = requests.put(
        f'http://localhost:5000/api/templates/{political_template["id"]}',
        json=update_data
    )
    
    if update_response.status_code == 200:
        print("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_response = requests.get(f'http://localhost:5000/api/templates/{political_template["id"]}')
        if test_response.status_code == 200:
            updated_template = test_response.json()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
            print(f"\nüìä –ü–†–ò–ú–ï–†–´ –û–ë–ù–û–í–õ–ï–ù–ù–´–• –ö–ù–û–ü–û–ö:")
            sample_count = 0
            for node in updated_template['data']['nodes']:
                if 'buttons' in node['data'] and len(node['data']['buttons']) > 0:
                    for button in node['data']['buttons']:
                        if sample_count < 5:
                            print(f"   ‚Ä¢ {button['text']} ({len(button['text'])} —Å–∏–º–≤–æ–ª–æ–≤)")
                            sample_count += 1
                        else:
                            break
                    if sample_count >= 5:
                        break
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {test_response.status_code}")
            return False
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {update_response.status_code}")
        return False

if __name__ == "__main__":
    success = fix_button_text_length()
    if success:
        print("\nüéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   –ö–Ω–æ–ø–∫–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram")
    else:
        print("\n‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–û–ô")