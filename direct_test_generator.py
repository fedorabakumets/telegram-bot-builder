"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–¥–∞
"""
import json

def create_minimal_test():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
    code_check = """
# –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –î–û–õ–ñ–ï–ù –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥:

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "registered_at": message.date
    }

    text = '''üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å '–ø–æ–º–æ—â—å' –∏–ª–∏ '—Å—Ç–∞—Ä—Ç' –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'''
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))
    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))
    keyboard = builder.as_markup()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(text, reply_markup=keyboard)

# –°–∏–Ω–æ–Ω–∏–º—ã –î–û–õ–ñ–ù–´ –≤—ã–∑—ã–≤–∞—Ç—å —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):
    # –°–∏–Ω–æ–Ω–∏–º –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
    await start_handler(message)  # –≠–¢–û –ö–õ–Æ–ß–ï–í–û–ï - –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!
"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:")
    print("1. –ö–æ–º–∞–Ω–¥–∞ /start —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ")
    print("2. –°–∏–Ω–æ–Ω–∏–º '—Å—Ç–∞—Ä—Ç' –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ—Ç –∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ start_handler")
    print("3. –ó–Ω–∞—á–∏—Ç —Å–∏–Ω–æ–Ω–∏–º –î–û–õ–ñ–ï–ù –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ –∂–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
    print()
    print("‚ùì –ï—Å–ª–∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å:")
    print("- –í —Å–∞–º–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ –∫–æ–º–∞–Ω–¥ (generateCommandHandler)")
    print("- –í –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (generateKeyboard)")
    print("- –í –≤—ã–∑–æ–≤–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (generateSynonymHandler)")
    
    return code_check

def analyze_existing_bots():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã"""
    
    existing_files = [
        'complex_test_bot_3.py',
        'generated_advanced_bot.py', 
        'test_command_inline_bot.py'
    ]
    
    for filename in existing_files:
        try:
            print(f"\nüìÅ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {filename}")
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥
            has_command_start = '@dp.message(CommandStart())' in content
            has_command_help = '@dp.message(Command("help"))' in content
            has_inline_keyboard = 'InlineKeyboardBuilder()' in content
            has_synonyms = 'synonym' in content.lower()
            has_keyboard_markup = 'reply_markup=keyboard' in content
            
            print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ /start: {'–î–∞' if has_command_start else '–ù–µ—Ç'}")
            print(f"‚úì –ö–æ–º–∞–Ω–¥–∞ /help: {'–î–∞' if has_command_help else '–ù–µ—Ç'}")
            print(f"‚úì –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {'–î–∞' if has_inline_keyboard else '–ù–µ—Ç'}")
            print(f"‚úì –°–∏–Ω–æ–Ω–∏–º—ã: {'–î–∞' if has_synonyms else '–ù–µ—Ç'}")
            print(f"‚úì –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {'–î–∞' if has_keyboard_markup else '–ù–µ—Ç'}")
            
            # –ò—â–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if has_command_start and has_inline_keyboard:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                start_handler_lines = []
                lines = content.split('\n')
                in_start_handler = False
                
                for line in lines:
                    if '@dp.message(CommandStart())' in line:
                        in_start_handler = True
                        continue
                    elif in_start_handler and line.startswith('@') and 'dp.' in line:
                        break  # –ù–∞—á–∞–ª—Å—è —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    elif in_start_handler:
                        start_handler_lines.append(line)
                
                start_handler_code = '\n'.join(start_handler_lines)
                
                has_keyboard_builder = 'InlineKeyboardBuilder()' in start_handler_code
                has_markup_answer = 'reply_markup=' in start_handler_code
                
                print(f"  üîç –í start_handler:")
                print(f"    - –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {'–î–∞' if has_keyboard_builder else '–ù–µ—Ç'}")
                print(f"    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {'–î–∞' if has_markup_answer else '–ù–µ—Ç'}")
                
                if not has_keyboard_builder or not has_markup_answer:
                    print(f"    ‚ùå –ü–†–û–ë–õ–ï–ú–ê: start_handler –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏!")
                else:
                    print(f"    ‚úÖ start_handler –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏")
                    
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {filename}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –ü–†–Ø–ú–û–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò –í –ö–û–ú–ê–ù–î–ê–•")
    print("=" * 60)
    
    create_minimal_test()
    analyze_existing_bots()
    
    print("\nüí° –í–´–í–û–î–´:")
    print("–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Ç–æ:")
    print("1. –ü—Ä–æ–±–ª–µ–º–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ generateCommandHandler –∏–ª–∏ generateStartHandler")
    print("2. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é generateKeyboard")
    print("3. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç generateKeyboard")

if __name__ == "__main__":
    main()