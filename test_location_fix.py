"""
–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
"""

import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ URL –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
def extract_coordinates_from_yandex(url: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ URL –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç"""
    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç: ll=–¥–æ–ª–≥–æ—Ç–∞,—à–∏—Ä–æ—Ç–∞
        match = re.search(r'll=([0-9.-]+),([0-9.-]+)', url)
        if match:
            return float(match[2]), float(match[1])  # lat, lon
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ path
        match = re.search(r'/([0-9.-]+),([0-9.-]+)/', url)
        if match:
            return float(match[2]), float(match[1])
        
        # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if '?' in url:
            params = url.split('?')[1]
            for param in params.split('&'):
                if param.startswith('ll='):
                    coords = param.replace('ll=', '')
                    lon, lat = coords.split(',')
                    return float(lat), float(lon)
        
        return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç: {e}")
        return None, None

def extract_coordinates_from_google(url: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ URL Google Maps"""
    try:
        # –§–æ—Ä–º–∞—Ç Google Maps: @lat,lon,zoom
        match = re.search(r'@([0-9.-]+),([0-9.-]+),', url)
        if match:
            return float(match[1]), float(match[2])
        return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ Google Maps: {e}")
        return None, None

def extract_coordinates_from_2gis(url: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ URL 2–ì–ò–°"""
    try:
        # –§–æ—Ä–º–∞—Ç 2–ì–ò–°: lat,lon
        match = re.search(r'/([0-9.-]+),([0-9.-]+)/', url)
        if match:
            return float(match[1]), float(match[2])
        return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ 2–ì–ò–°: {e}")
        return None, None

async def is_admin(user_id: int) -> bool:
    return True

async def is_private_chat(message: types.Message) -> bool:
    return message.chat.type == "private"

async def check_auth(user_id: int) -> bool:
    return True

async def set_bot_commands():
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="location", description="–¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")
    ]
    
    bot = Bot.get_current()
    await bot.set_my_commands(commands)

async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    text = """üó∫Ô∏è –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ Telegram
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã"""
    
    try:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìç –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="test_location"))
        builder.add(InlineKeyboardButton(text="üîó –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏", callback_data="test_short_link"))
        keyboard = builder.as_markup()
        await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

async def location_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /location"""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
    latitude, longitude = 55.7558, 37.6176
    title = "–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
    address = "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
    
    try:
        await message.answer_location(latitude=latitude, longitude=longitude)
        await message.answer(f"üìç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è:\nüèôÔ∏è {title}\nüìç {address}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {e}")

async def handle_callback_test_location(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if callback_query.data == "test_location":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞—Ä—Ç
        latitude, longitude = 55.7558, 37.6176
        title = "–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è"
        address = "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            await bot.send_venue(
                callback_query.from_user.id,
                latitude=latitude,
                longitude=longitude,
                title=title,
                address=address
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(
                text="üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", 
                url=f"https://yandex.ru/maps/?ll={longitude},{latitude}&z=15"
            ))
            builder.add(InlineKeyboardButton(
                text="üåç Google Maps", 
                url=f"https://maps.google.com/maps?q={latitude},{longitude}"
            ))
            builder.add(InlineKeyboardButton(
                text="üè¢ 2–ì–ò–°", 
                url=f"https://2gis.ru/search/{latitude},{longitude}"
            ))
            builder.add(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_start"))
            keyboard = builder.as_markup()
            
            await bot.send_message(
                callback_query.from_user.id,
                "üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
            await bot.send_message(callback_query.from_user.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {e}")
    
    elif callback_query.data == "test_short_link":
        # –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
        test_url = "https://yandex.ru/maps/-/CHwa7LZ0"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat, lon = extract_coordinates_from_yandex(test_url)
        
        if lat and lon:
            try:
                await callback_query.message.delete()
                await bot.send_location(callback_query.from_user.id, latitude=lat, longitude=lon)
                await bot.send_message(
                    callback_query.from_user.id, 
                    f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏:\nüìç {lat}, {lon}"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
                await bot.send_message(callback_query.from_user.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Å—ã–ª–∫–∏:\n{test_url}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ll="
            )
    
    elif callback_query.data == "back_to_start":
        text = """üó∫Ô∏è –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫

–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ Telegram
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã"""
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìç –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="test_location"))
        builder.add(InlineKeyboardButton(text="üîó –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏", callback_data="test_short_link"))
        keyboard = builder.as_markup()
        
        await callback_query.message.edit_text(text, reply_markup=keyboard)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    global bot, dp
    bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(start_handler, CommandStart())
    dp.message.register(location_handler, Command("location"))
    dp.callback_query.register(handle_callback_test_location)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands()

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())