#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
"""

import asyncio
import asyncpg
import json
from datetime import datetime

async def update_bot_project():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –±–æ—Ç–∞...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        import os
        database_url = os.getenv('DATABASE_URL')
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        connection = await asyncpg.connect(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
        project_id = 1
        project_data = await connection.fetchrow(
            "SELECT * FROM bot_projects WHERE id = $1",
            project_id
        )
        
        if not project_data:
            print("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞  
        print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: {project_data.keys()}")
        if 'botData' in project_data:
            bot_data = json.loads(project_data['botData'])
        elif 'bot_data' in project_data:
            bot_data = json.loads(project_data['bot_data'])
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º —É–∑–µ–ª collection-message
        collection_node = None
        for node in bot_data['nodes']:
            if node['id'] == 'collection-message':
                collection_node = node
                break
        
        if not collection_node:
            print("‚ùå –£–∑–µ–ª collection-message –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ collection-message:")
        print(f"   collectUserInput: {collection_node['data'].get('collectUserInput', '–ù–ï–¢')}")
        print(f"   inputTargetNodeId: {collection_node['data'].get('inputTargetNodeId', '–ù–ï–¢')}")
        print(f"   buttons: {len(collection_node['data'].get('buttons', []))} –∫–Ω–æ–ø–æ–∫")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É–∑–ª–∞
        collection_node['data']['inputTargetNodeId'] = 'thank-you-message'
        collection_node['data']['collectUserInput'] = True
        collection_node['data']['saveToDatabase'] = True
        collection_node['data']['inputVariable'] = 'user_feedback'
        collection_node['data']['inputType'] = 'text'
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å
        if 'buttons' not in collection_node['data'] or len(collection_node['data']['buttons']) == 0:
            collection_node['data']['buttons'] = [
                {
                    "id": "btn-excellent",
                    "text": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–æ",
                    "action": "goto",
                    "target": "thank-you-message"
                },
                {
                    "id": "btn-good",
                    "text": "‚≠ê‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–æ",
                    "action": "goto",
                    "target": "thank-you-message"
                },
                {
                    "id": "btn-average",
                    "text": "‚≠ê‚≠ê‚≠ê –°—Ä–µ–¥–Ω–µ",
                    "action": "goto",
                    "target": "thank-you-message"
                },
                {
                    "id": "btn-poor",
                    "text": "‚≠ê‚≠ê –ü–ª–æ—Ö–æ",
                    "action": "goto",
                    "target": "thank-you-message"
                }
            ]
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ keyboardType –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        collection_node['data']['keyboardType'] = 'inline'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        updated_bot_data = json.dumps(bot_data)
        if 'botData' in project_data:
            await connection.execute(
                "UPDATE bot_projects SET \"botData\" = $1, \"updatedAt\" = NOW() WHERE id = $2",
                updated_bot_data, project_id
            )
        else:
            await connection.execute(
                "UPDATE bot_projects SET bot_data = $1, updated_at = NOW() WHERE id = $2",
                updated_bot_data, project_id
            )
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        print(f"üìã –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ collection-message:")
        print(f"   collectUserInput: {collection_node['data'].get('collectUserInput')}")
        print(f"   inputTargetNodeId: {collection_node['data'].get('inputTargetNodeId')}")
        print(f"   buttons: {len(collection_node['data'].get('buttons', []))} –∫–Ω–æ–ø–æ–∫")
        print(f"   keyboardType: {collection_node['data'].get('keyboardType')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    finally:
        await connection.close()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ –±–æ—Ç–∞...")
    print("=" * 50)
    
    success = await update_bot_project()
    
    if success:
        print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ò–ú–ï–ù–ï–ù–´!")
        print("üîÑ –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ò!")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())