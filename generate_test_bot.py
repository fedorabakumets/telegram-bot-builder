"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
"""
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'client', 'src', 'lib'))

def load_test_bot():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open('test_command_issue_bot.json', 'r', encoding='utf-8') as f:
            bot_data = json.load(f)
        return bot_data
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª test_command_issue_bot.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test_command_issue.py —Å–Ω–∞—á–∞–ª–∞.")
        return None

def manual_generate_python_code(bot_data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Python –∫–æ–¥ –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    nodes = bot_data['nodes']
    
    code = '"""\n'
    code += '–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ - Telegram Bot\n'
    code += '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n'
    code += '"""\n\n'
    
    code += 'import asyncio\n'
    code += 'import logging\n'
    code += 'from aiogram import Bot, Dispatcher, types, F\n'
    code += 'from aiogram.filters import CommandStart, Command\n'
    code += 'from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardRemove\n'
    code += 'from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder\n'
    code += 'from aiogram.enums import ParseMode\n\n'
    
    code += '# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)\n'
    code += 'BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"\n\n'
    
    code += '# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\n'
    code += 'logging.basicConfig(level=logging.INFO)\n\n'
    
    code += '# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞\n'
    code += 'bot = Bot(token=BOT_TOKEN)\n'
    code += 'dp = Dispatcher()\n\n'
    
    code += '# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n'
    code += 'ADMIN_IDS = [123456789]\n\n'
    
    code += '# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
    code += 'user_data = {}\n\n'
    
    code += '# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n'
    code += 'async def is_admin(user_id: int) -> bool:\n'
    code += '    return user_id in ADMIN_IDS\n\n'
    
    code += 'async def is_private_chat(message: types.Message) -> bool:\n'
    code += '    return message.chat.type == "private"\n\n'
    
    code += 'async def check_auth(user_id: int) -> bool:\n'
    code += '    return user_id in user_data\n\n'
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    code += '@dp.message(CommandStart())\n'
    code += 'async def start_handler(message: types.Message):\n'
    code += '    user_data[message.from_user.id] = {\n'
    code += '        "username": message.from_user.username,\n'
    code += '        "first_name": message.from_user.first_name,\n'
    code += '        "last_name": message.from_user.last_name,\n'
    code += '        "registered_at": message.date\n'
    code += '    }\n\n'
    code += '    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å \'–ø–æ–º–æ—â—å\' –∏–ª–∏ \'—Å—Ç–∞—Ä—Ç\' –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""\n'
    code += '    \n'
    code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏\n'
    code += '    await message.answer(text, reply_markup=keyboard)\n\n'
    
    # –ö–æ–º–∞–Ω–¥–∞ /help
    code += '@dp.message(Command("help"))\n'
    code += 'async def help_handler(message: types.Message):\n'
    code += '    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–∞–º–∏: \'–ø–æ–º–æ—â—å\', \'—Å—Ç–∞—Ä—Ç\', \'–º–µ–Ω—é\'"""\n'
    code += '    \n'
    code += '    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ inline –∫–Ω–æ–ø–∫–∞–º–∏\n'
    code += '    await message.answer(text, reply_markup=keyboard)\n\n'
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥\n'
    code += '@dp.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")\n'
    code += 'async def start_synonym_—Å—Ç–∞—Ä—Ç_handler(message: types.Message):\n'
    code += '    await start_handler(message)\n\n'
    
    code += '@dp.message(lambda message: message.text and message.text.lower() == "–Ω–∞—á–∞—Ç—å")\n'
    code += 'async def start_synonym_–Ω–∞—á–∞—Ç—å_handler(message: types.Message):\n'
    code += '    await start_handler(message)\n\n'
    
    code += '@dp.message(lambda message: message.text and message.text.lower() == "–ø—Ä–∏–≤–µ—Ç")\n'
    code += 'async def start_synonym_–ø—Ä–∏–≤–µ—Ç_handler(message: types.Message):\n'
    code += '    await start_handler(message)\n\n'
    
    code += '@dp.message(lambda message: message.text and message.text.lower() == "–ø–æ–º–æ—â—å")\n'
    code += 'async def help_synonym_–ø–æ–º–æ—â—å_handler(message: types.Message):\n'
    code += '    await help_handler(message)\n\n'
    
    code += '@dp.message(lambda message: message.text and message.text.lower() == "—Å–ø—Ä–∞–≤–∫–∞")\n'
    code += 'async def help_synonym_—Å–ø—Ä–∞–≤–∫–∞_handler(message: types.Message):\n'
    code += '    await help_handler(message)\n\n'
    
    code += '@dp.message(lambda message: message.text and message.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")\n'
    code += 'async def help_synonym_–∫–æ–º–∞–Ω–¥—ã_handler(message: types.Message):\n'
    code += '    await help_handler(message)\n\n'
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
    code += '# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫\n'
    code += '@dp.callback_query(lambda c: c.data == "help-cmd")\n'
    code += 'async def handle_callback_help_cmd(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ–≤–∞–º–∏: \'–ø–æ–º–æ—â—å\', \'—Å—Ç–∞—Ä—Ç\', \'–º–µ–Ω—é\'"""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üìã –í—Å–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="commands-msg"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "menu-msg")\n'
    code += 'async def handle_callback_menu_msg(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info-msg"))\n'
    code += '    builder.add(InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings-msg"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="start-node"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "start-node")\n'
    code += 'async def handle_callback_start_node(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å \'–ø–æ–º–æ—â—å\' –∏–ª–∏ \'—Å—Ç–∞—Ä—Ç\' –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üìã –ü–æ–º–æ—â—å", callback_data="help-cmd"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üì± –ú–µ–Ω—é", callback_data="menu-msg"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "commands-msg")\n'
    code += 'async def handle_callback_commands_msg(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\nüî∏ /start (–∏–ª–∏ \'—Å—Ç–∞—Ä—Ç\') - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\nüî∏ /help (–∏–ª–∏ \'–ø–æ–º–æ—â—å\') - –°–ø—Ä–∞–≤–∫–∞\nüî∏ /menu (–∏–ª–∏ \'–º–µ–Ω—é\') - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ —Å–ª–µ—à–µ–º, —Ç–∞–∫ –∏ –æ–±—ã—á–Ω—ã–µ —Å–ª–æ–≤–∞!"""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã", callback_data="test-msg"))\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø—Ä–∞–≤–∫–µ", callback_data="help-cmd"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "test-msg")\n'
    code += 'async def handle_callback_test_msg(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n‚Ä¢ —Å—Ç–∞—Ä—Ç\n‚Ä¢ –ø–æ–º–æ—â—å\n‚Ä¢ —Å–ø—Ä–∞–≤–∫–∞\n‚Ä¢ –∫–æ–º–∞–Ω–¥—ã\n‚Ä¢ –º–µ–Ω—é\n\n–ï—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏!"""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ö –∫–æ–º–∞–Ω–¥–∞–º", callback_data="commands-msg"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "info-msg")\n'
    code += 'async def handle_callback_info_msg(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.\n\n–ü—Ä–æ–±–ª–µ–º–∞: –∫–æ–≥–¥–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏, —Å–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ."""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    code += '@dp.callback_query(lambda c: c.data == "settings-msg")\n'
    code += 'async def handle_callback_settings_msg(callback_query: types.CallbackQuery):\n'
    code += '    await callback_query.answer()\n'
    code += '    text = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–ó–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å \'—Å—Ç–∞—Ä—Ç\' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é."""\n'
    code += '    builder = InlineKeyboardBuilder()\n'
    code += '    builder.add(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="menu-msg"))\n'
    code += '    keyboard = builder.as_markup()\n'
    code += '    await callback_query.message.edit_text(text, reply_markup=keyboard)\n\n'
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    code += '# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
    code += 'async def main():\n'
    code += '    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")\n'
    code += '    await dp.start_polling(bot)\n\n'
    
    code += 'if __name__ == "__main__":\n'
    code += '    asyncio.run(main())\n'
    
    return code

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
    bot_data = load_test_bot()
    if not bot_data:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    python_code = manual_generate_python_code(bot_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('test_command_inline_bot.py', 'w', encoding='utf-8') as f:
        f.write(python_code)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª test_command_inline_bot.py")
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("1. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏")
    print("   - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /help —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏")
    print("   - –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ —Å–∏–Ω–æ–Ω–∏–º—ã: '—Å—Ç–∞—Ä—Ç', '–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', '–∫–æ–º–∞–Ω–¥—ã'")
    print("   - –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ª–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤")
    
    print("\nüí° –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞:")
    print("–ö–æ–º–∞–Ω–¥—ã /start –∏ /help —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞—é—Ç,")
    print("–Ω–æ —Å–∏–Ω–æ–Ω–∏–º—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–≤–µ—Ç.")

if __name__ == "__main__":
    main()