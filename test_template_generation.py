"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json

def test_template_generation(template_id=8, test_count=3):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑"""
    
    for test_num in range(1, test_count + 1):
        print(f"\nüß™ –¢–µ—Å—Ç #{test_num} - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ ID {template_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
            print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞...")
            response = requests.get(f"http://localhost:5000/api/templates/{template_id}")
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {response.status_code}")
                continue
                
            template = response.json()
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –ø–æ–ª—É—á–µ–Ω: {template['name']}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
            print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞...")
            
            project_data = {
                "name": f"–¢–µ—Å—Ç —à–∞–±–ª–æ–Ω–∞ #{test_num}",
                "description": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ #{test_num}",
                "data": template['data']
            }
            
            response = requests.post(
                "http://localhost:5000/api/projects",
                json=project_data,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code != 201:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code} - {response.text}")
                continue
                
            project = response.json()
            project_id = project['id']
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
            print("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞...")
            
            response = requests.post(f"http://localhost:5000/api/projects/{project_id}/export")
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {response.status_code}")
                continue
                
            export_data = response.json()
            python_code = export_data.get('code', '')
            
            if not python_code:
                print("‚ùå –ö–æ–¥ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                continue
                
            print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
            filename = f"template_test_{test_num}_bot_{project_id}.py"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(python_code)
            
            print(f"üíæ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
            analysis_results = analyze_generated_code(python_code, test_num)
            
            if all(analysis_results.values()):
                print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
            else:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
                for check, result in analysis_results.items():
                    status = "‚úÖ" if result else "‚ùå"
                    print(f"  {status} {check}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ #{test_num}: {e}")

def analyze_generated_code(code, test_num):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥"""
    
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞ #{test_num}:")
    
    checks = {
        "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞": "handle_user_input" in code,
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤": "button_response_config" in code,
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞": "allow_multiple" in code,
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö": "save_user_to_db" in code or "update_user_data_in_db" in code,
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ inline –∫–Ω–æ–ø–æ–∫": "InlineKeyboardMarkup" in code and "InlineKeyboardButton" in code,
        "Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏": "async def handle_callback_" in code,
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤": "response_data" in code,
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ": "timestamp" in code and "nodeId" in code,
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞": "allowMultipleSelection" in code or "allow_multiple_selection" in code,
        "responseOptions –æ–±—Ä–∞–±–æ—Ç–∫–∞": "responseOptions" in code or "response_options" in code
    }
    
    for check, result in checks.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check}")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    callback_count = code.count("async def handle_callback_")
    user_input_count = code.count("user-input")
    button_count = code.count("InlineKeyboardButton")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  üîó Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {callback_count}")
    print(f"  üìù –£–ø–æ–º–∏–Ω–∞–Ω–∏–π user-input: {user_input_count}")
    print(f"  üîò Inline –∫–Ω–æ–ø–æ–∫: {button_count}")
    
    return checks

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    test_template_generation(template_id=8, test_count=3)
    
    print("\n" + "=" * 60)
    print("üèÅ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    run_comprehensive_test()