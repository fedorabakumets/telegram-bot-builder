"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
"""

import requests
import json
import time

def create_test_bot():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∫–Ω–æ–ø–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    
    # –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å user-input —É–∑–ª–æ–º, –∏–º–µ—é—â–∏–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–∞–∑–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    bot_data = {
        "name": "–¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫",
        "description": "–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é",
        "nodes": [
            {
                "id": "start-1",
                "type": "start", 
                "position": {"x": 100, "y": 100},
                "data": {
                    "messageText": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è:",
                    "command": "/start",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-1",
                            "text": "–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å",
                            "action": "goto",
                            "target": "survey-1"
                        }
                    ]
                }
            },
            {
                "id": "survey-1",
                "type": "user-input",
                "position": {"x": 300, "y": 100}, 
                "data": {
                    "messageText": "–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                    "responseType": "buttons",
                    "inputVariable": "user_interest",
                    "saveToDatabase": True,
                    "responseOptions": [
                        {
                            "text": "üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                            "value": "tech",
                            "action": "goto",
                            "target": "tech-info"
                        },
                        {
                            "text": "üéµ –ú—É–∑—ã–∫–∞", 
                            "value": "music",
                            "action": "command",
                            "target": "/music"
                        },
                        {
                            "text": "üåê –°–∞–π—Ç",
                            "value": "website",
                            "action": "url",
                            "url": "https://example.com"
                        },
                        {
                            "text": "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            "value": "menu",
                            "action": "goto", 
                            "target": "start-1"
                        }
                    ]
                }
            },
            {
                "id": "tech-info",
                "type": "message",
                "position": {"x": 500, "y": 50},
                "data": {
                    "messageText": "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ - —ç—Ç–æ –±—É–¥—É—â–µ–µ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ª–∏—á–Ω—É—é —Ç–µ–º—É.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back",
                            "text": "–ù–∞–∑–∞–¥ –∫ –æ–ø—Ä–æ—Å—É",
                            "action": "goto",
                            "target": "survey-1"
                        }
                    ]
                }
            },
            {
                "id": "music-cmd",
                "type": "command",
                "position": {"x": 500, "y": 150},
                "data": {
                    "messageText": "üéµ –ú—É–∑—ã–∫–∞ - —è–∑—ã–∫ –¥—É—à–∏! –ö–∞–∫–æ–π –∂–∞–Ω—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
                    "command": "/music",
                    "keyboardType": "inline", 
                    "buttons": [
                        {
                            "id": "btn-rock",
                            "text": "üé∏ –†–æ–∫",
                            "action": "goto",
                            "target": "start-1"
                        },
                        {
                            "id": "btn-pop",
                            "text": "üé§ –ü–æ–ø",
                            "action": "goto", 
                            "target": "start-1"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {"id": "conn-1", "source": "start-1", "target": "survey-1"},
            {"id": "conn-2", "source": "survey-1", "target": "tech-info"},
            {"id": "conn-3", "source": "tech-info", "target": "survey-1"}
        ]
    }
    
    return bot_data

def test_code_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Python –∫–æ–¥–∞"""
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    create_response = requests.post('http://localhost:5000/api/projects', json={
        'name': '–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫',
        'description': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
        'data': {}
    })
    
    if create_response.status_code not in [200, 201]:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
        return False
    
    project = create_response.json()
    project_id = project['id']
    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {project_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –±–æ—Ç–∞
    bot_data = create_test_bot()
    update_response = requests.put(f'http://localhost:5000/api/projects/{project_id}', json={
        'name': bot_data['name'],
        'description': bot_data['description'], 
        'data': bot_data
    })
    
    if update_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {update_response.status_code}")
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Python –∫–æ–¥
    print("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Python –∫–æ–¥–∞...")
    export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export', json={
        'format': 'python'
    })
    
    if export_response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {export_response.status_code}")
        if export_response.text:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {export_response.text}")
        return False
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
    response_data = export_response.json()
    generated_code = response_data.get('code', '')
    print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    filename = f"generated_individual_navigation_test_{int(time.time())}.py"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(generated_code)
    
    print(f"üìÅ –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞:")
    
    checks = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫", '"options": [' in generated_code),
        ("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", '"action":' in generated_code),
        ("–ü–µ—Ä–µ—Ö–æ–¥ –∫ —É–∑–ª—É", '"action": "goto"' in generated_code),
        ("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã", '"action": "command"' in generated_code), 
        ("–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏", '"action": "url"' in generated_code),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ user-input", 'handle_response_survey_1_' in generated_code),
        ("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ action", 'option_action = current_option.get("action"' in generated_code),
        ("URL –æ–±—Ä–∞–±–æ—Ç–∫–∞", 'if option_action == "url"' in generated_code),
        ("Command –æ–±—Ä–∞–±–æ—Ç–∫–∞", 'elif option_action == "command"' in generated_code),
        ("Goto –æ–±—Ä–∞–±–æ—Ç–∫–∞", 'elif option_action == "goto"' in generated_code),
        ("–ö–æ–º–∞–Ω–¥–∞ /music", '/music' in generated_code),
    ]
    
    passed = 0
    for check_name, check_result in checks:
        status = "‚úÖ" if check_result else "‚ùå"
        print(f"  {status} {check_name}")
        if check_result:
            passed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(checks)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(checks):
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò –ö–ù–û–ü–û–ß–ù–´–• –û–¢–í–ï–¢–û–í")
    print("=" * 60)
    
    success = test_code_generation()
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò")
    print("=" * 60)