#!/usr/bin/env python3
"""
–¢–µ—Å—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ ID
"""

import json
import requests
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('./client/src')

def generatePythonCode(botData, botName):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –Ω–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        project_data = {
            "name": botName,
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            "data": botData
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
        create_response = requests.post('http://localhost:5000/api/projects', 
                                      json=project_data)
        if create_response.status_code != 201:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {create_response.status_code}")
            return None
            
        project_id = create_response.json()['id']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ API —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_response = requests.post(f'http://localhost:5000/api/projects/{project_id}/export')
        if export_response.status_code == 200:
            return export_response.json()['code']
        else:
            print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_response.status_code}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def create_custom_command_test():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥–æ–π –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ ID"""
    
    bot_data = {
        "nodes": [
            {
                "id": "start-1",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π ID —à–∞–±–ª–æ–Ω–∞
                "type": "start",
                "position": {"x": 100, "y": 100},
                "data": {
                    "command": "/start",
                    "messageText": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏.",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-custom-help",
                            "text": "üìã –ü–æ–º–æ—â—å",
                            "action": "goto",
                            "target": "9vy4sGAbnibg4TYr9Xs72"  # –°–ª—É—á–∞–π–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã
                        }
                    ]
                }
            },
            {
                "id": "9vy4sGAbnibg4TYr9Xs72",  # –°–ª—É—á–∞–π–Ω—ã–π ID –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
                "type": "command",
                "position": {"x": 300, "y": 100},
                "data": {
                    "command": "/help",
                    "messageText": "‚ùì –≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏\n\n–°–æ–∑–¥–∞–Ω–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º ID!",
                    "keyboardType": "inline",
                    "buttons": [
                        {
                            "id": "btn-back-to-start",
                            "text": "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                            "action": "goto",
                            "target": "start-1"
                        }
                    ]
                }
            }
        ],
        "connections": [
            {
                "id": "conn1",
                "from": "start-1",
                "to": "9vy4sGAbnibg4TYr9Xs72"
            }
        ]
    }
    
    return bot_data

def test_custom_command_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    print("üß™ –¢–ï–°–¢: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    bot_data = create_custom_command_test()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    generated_code = generatePythonCode(bot_data, "–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open('generated_custom_command_test.py', 'w', encoding='utf-8') as f:
        f.write(generated_code)
    
    print("‚úÖ –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ 'generated_custom_command_test.py'")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
    print("\nüìä –ê–ù–ê–õ–ò–ó –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–û–ì–û –ö–û–î–ê:")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    if '@dp.message(CommandStart())' in generated_code:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –Ω–∞–π–¥–µ–Ω")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    if '@dp.message(Command("help"))' in generated_code:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help –Ω–∞–π–¥–µ–Ω")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID
    callback_pattern = 'lambda c: c.data == "9vy4sGAbnibg4TYr9Xs72"'
    if callback_pattern in generated_code:
        print("‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –Ω–∞–π–¥–µ–Ω")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    function_pattern = 'async def handle_callback_9vy4sGAbnibg4TYr9Xs72'
    if function_pattern in generated_code:
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º InlineKeyboardButton —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data
    button_pattern = 'callback_data="9vy4sGAbnibg4TYr9Xs72"'
    if button_pattern in generated_code:
        print("‚úÖ Inline –∫–Ω–æ–ø–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data –Ω–∞–π–¥–µ–Ω–∞")
    else:
        issues.append("‚ùå Inline –∫–Ω–æ–ø–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∫–Ω–æ–ø–∫—É
    back_button_pattern = 'callback_data="start-1"'
    if back_button_pattern in generated_code:
        print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data –Ω–∞–π–¥–µ–Ω–∞")
    else:
        issues.append("‚ùå –û–±—Ä–∞—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º callback_data")
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {6 - len(issues)}/6 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if issues:
        print("\nüö® –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
        for issue in issues:
            print(f"  {issue}")
        return False
    else:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    success = test_custom_command_generation()
    
    if not success:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generatePythonCode –≤ client/src/lib/bot-generator.ts")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ callback_data –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö ID")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏")

if __name__ == "__main__":
    main()